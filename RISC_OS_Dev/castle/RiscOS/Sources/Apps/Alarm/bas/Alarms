REM This source code in this file is licensed to You by Castle Technology
REM Limited ("Castle") and its licensors on contractual terms and conditions
REM ("Licence") which entitle you freely to modify and/or to distribute this
REM source code subject to Your compliance with the terms of the Licence.
REM
REM This source code has been made available to You without any warranties
REM whatsoever. Consequently, Your use, modification and distribution of this
REM source code is entirely at Your own risk and neither Castle, its licensors
REM nor any other person who has contributed to this source code shall be
REM liable to You for any loss or damage which You may suffer as a result of
REM Your use, modification or distribution of this source code.
REM
REM Full details of Your rights and obligations are set out in the Licence.
REM You should have received a copy of the Licence with this source code file.
REM If You have not received a copy, the text of the Licence is available
REM online at www.castle-technology.co.uk/riscosbaselicence.htm
REM
REM > Alarms

REM *************************************************************************
REM List management
REM *************************************************************************

DEFPROCremove_alarm_from_list(p%,give_error_while_saving%)
 REM
 REM Deletes the specified alarm record
 REM from the linked list
 REM
 LOCAL prev%,next%,c%,n1%,p1%,f%
 REM IFFNcheck_pointer PROCcheck_pointer(p%,"PROCremove_alarm_from_list(p%)")
 prev%=p%!alarm_prev%:p%!alarm_prev%=0
 next%=p%!alarm_next%:p%!alarm_next%=0
 REM IFFNcheck_pointer IFprev% PROCcheck_pointer(prev%,"PROCremove_alarm_from_list(prev)")
 REM IFFNcheck_pointer IFnext% PROCcheck_pointer(next%,"PROCremove_alarm_from_list(next)")
 IFalarm_head%=p% alarm_head%=next%
 IFnext% next%!alarm_prev%=prev%
 IFprev% prev%!alarm_next%=next%
 IFalarm_autosave% AND p%!alarm_fileptr%<>0 AND ra$<>"" THEN
  IFra$=FNmsg_0("FN2") THEN
   PROCwarning(FNmsg_0("File05"))
   ENDPROC
  ENDIF
  PROCsave_alarms_to_disc(ra$, FALSE, TRUE, give_error_while_saving%)
 ENDIF
ENDPROC
:
DEFPROCsave_alarm(ptr%)
 REM
 REM Links the specified record into
 REM the correct order of the linked list
 REM
 LOCAL C%,p%,q%,f%
 REM IFFNcheck_pointer PROCcheck_pointer(ptr%,"PROCsave_alarm")
 REM if the working week flag is set and it isn't a repeating
 REM alarm, turn the flag off
 IF ptr%?alarm_repeating%=0 THEN
  ptr%?alarm_fvdywk%=FALSE
 ENDIF
 IFalarm_head%=0 THEN
  REM simple case!
  alarm_head%=ptr%
  ptr%!alarm_next%=0
  ptr%!alarm_prev%=0
 ELSE
  REM slightly more difficult case!
  C%=alarm_head%
  p%=0
  WHILE C%
   REM IFFNcheck_pointer PROCcheck_pointer(C%,"PROCsave_alarm")
   REM do the comparisons separately (rather than
   REM IF less OR equal) to save time since
   REM if less, then can't be equal!
   f%=FNrec1_less_than_rec2(C%,ptr%)
   IFf%=FALSE f%=FNrec1_equal_rec2(C%,ptr%)
   IFf% THEN
    REM the alarm we are pointing to is before
    REM the one we want to insert
    p%=C%
    C%=C%!alarm_next%
   ELSE
    C%=0
   ENDIF
  ENDWHILE
  IF p%=0 THEN
   REM IFFNcheck_pointer PROCcheck_pointer(alarm_head%,"PROCsave_alarm(alarm_head%)")
   REM insert at the head of the list
   ptr%!alarm_next%=alarm_head%
   ptr%!alarm_prev%=0
   REM alarm_head% can't be zero ...
   alarm_head%!alarm_prev%=ptr%
   alarm_head%=ptr%
  ELSE
   REM IFFNcheck_pointer PROCcheck_pointer(p%,"PROCsave_alarm(p%)")
   REM insert into the chain
   REM p% is pointing to the record that should
   REM be BEFORE this one
   ptr%!alarm_prev%=p%
   ptr%!alarm_next%=p%!alarm_next%
   p%!alarm_next%=ptr%
   p%=ptr%!alarm_next%
   IFp% THEN
    REM IFFNcheck_pointer PROCcheck_pointer(p%,"PROCsave_alarm(p% 1)")
    p%!alarm_prev%=ptr%
   ENDIF
  ENDIF
 ENDIF
 PROCmodified_alarm_database
 IFalarm_autosave% AND ra$<>"" THEN
  IFra$=FNmsg_0("FN2") THEN
   PROCwarning(FNmsg_0("File05"))
  ELSE
   PROCsave_alarms_to_disc(ra$,FALSE,TRUE,TRUE)
  ENDIF
 ENDIF
ENDPROC
:
DEFPROCdelete_alarms
 LOCAL I%,H%,give_error_while_saving%
 give_error_while_saving%=TRUE
 I%=alarm_head%
 WHILE I%
  REM IFFNcheck_pointer PROCcheck_pointer(I%,"PROCdelete_alarms")
  IFI%?alarm_selected% THEN
   H%=I%!alarm_next%
   IFalarms%(1) THEN
    REM there is an active alarm - check it
    IFalarms%(1)=I% PROCtell_pinboard(m_wind%):!Q%=m_wind%:SYS"Wimp_CloseWindow",,Q%
   ENDIF
   PROCremove_alarm_from_list(I%,give_error_while_saving%)
   give_error_while_saving%=FALSE
   PROCheap_free("ALRM",I%)
   I%=H%
  ELSE
   I%=I%!alarm_next%
  ENDIF
 ENDWHILE
 alarm_warned%=FALSE
 PROCmodified_alarm_database
 PROCreset_alarm_status
ENDPROC
:
DEFPROCread_first_alarm(RETURN I%)
 REM
 REM Set the pointer I% to point
 REM to the first alarm
 REM
 LOCAL error%
 alarm_set%=FALSE
 user_alarm_set%=FALSE
 alarm_detected%=FALSE
 IFalarm_head% THEN
  I%=alarm_head%
  WHILE (I%<>0) AND (user_alarm_set%=FALSE)
   IFI%?alarm_applalarm%=FALSE user_alarm_set%=TRUE
   I%=I%!alarm_next%
  ENDWHILE
  I%=alarm_head%
  IFFNvalid_day_of_week(I%)=FALSE THEN
   REM the next alarm we are looking at doesn't fall
   REM onto a valid day of the week, so pull the
   REM date backwards until it does
   PROCcopy_alarm_to_validated(I%)
   REPEAT:I%!alarm_date%-=1:PROCvalidate_alarm_rec(I%,error%):UNTIL FNvalid_day_of_week(I%)
   PROCswap_alarm_and_validated(I%)
   REM so the originally set date and time is in alarm_*
   REM while the validated version is in valid_*
  ELSE
   REM ok - the day of the week is valid - just ensure
   REM that the valid version is up to date
   PROCcopy_alarm_to_validated(I%)
  ENDIF
  alarm_set%=TRUE
 ENDIF
ENDPROC
:
DEFPROCread_prev_alarm(RETURN I%)
 REM
 REM Point to the previous alarm
 REM
 REM IFFNcheck_pointer PROCcheck_pointer(I%,"PROCread_prev_alarm")
 REPEAT
  I%=I%!alarm_prev%
  IFI%=0 ENDPROC
 UNTIL I%?alarm_applalarm%=0
ENDPROC
:
DEFPROCread_next_alarm(RETURN I%)
 REM
 REM Point to the next alarm
 REM
 REM IFFNcheck_pointer PROCcheck_pointer(I%,"PROCread_next_alarm")
 REPEAT
  I%=I%!alarm_next%
  IFI%=0 ENDPROC
 UNTIL I%?alarm_applalarm%=0
ENDPROC

DEF PROCrec_fromwin(I%,H%)
 I%!alarm_year% =VAL(FNread_string(H%,2))
 I%!alarm_date% =VAL(FNread_string(H%,7))
 I%!alarm_hours% =VAL(FNread_string(H%,11))
 I%!alarm_minutes% =VAL(FNread_string(H%,14))
 IF I%!alarm_year% <1901 THEN I%!alarm_year% =1901
 IF I%!alarm_year% >2247 THEN I%!alarm_year% =2247
 
 IF I%!alarm_date% >31 THEN I%!alarm_date% =31
 IF I%!alarm_hours% >23 THEN I%!alarm_hours% =23
 IF I%!alarm_minutes% >59 THEN I%!alarm_minutes% =59
 PROCvalidate_alarm_rec(I%,error%)
ENDPROC
:
DEFPROCcopy_alarm_to_validated(I%)
 REM copy the alarm values into the validated values
 REM IFFNcheck_pointer PROCcheck_pointer(I%,"PROCcopy_alarm_to_validated")
 I%!valid_year%=I%!alarm_year%
 I%!valid_month%=I%!alarm_month%
 I%!valid_date%=I%!alarm_date%
 I%!valid_hours%=I%!alarm_hours%
 I%!valid_minutes%=I%!alarm_minutes%
ENDPROC
:
DEFPROCswap_alarm_and_validated(I%)
 REM swap the values over!
 SWAP I%!valid_year%, I%!alarm_year%
 SWAP I%!valid_month%, I%!alarm_month%
 SWAP I%!valid_date%, I%!alarm_date%
 SWAP I%!valid_hours%, I%!alarm_hours%
 SWAP I%!valid_minutes%, I%!alarm_minutes%
ENDPROC
:
DEFPROCcopy_validated_to_alarm(I%)
 REM copy the validated values into the alarm values
 REM IFFNcheck_pointer PROCcheck_pointer(I%,"PROCcopy_validated_to_alarm")
 I%!alarm_year%=I%!valid_year%
 I%!alarm_month%=I%!valid_month%
 I%!alarm_date%=I%!valid_date%
 I%!alarm_hours%=I%!valid_hours%
 I%!alarm_minutes%=I%!valid_minutes%
ENDPROC
:
DEFPROCcheck_alarm_window(P%,M%,H%,I%)
 REM IFFNcheck_pointer PROCcheck_pointer(alarms%(0),"PROCcheck_alarm_window")
 IF NOT(alarms%(0)?alarm_applalarm%) THEN
  CASE I% OF
  WHEN ic_alarm_urgent%: alarm_urgent%?alarms%(0)=NOT(alarm_urgent%?alarms%(0))
  WHEN ic_alarm_adj_yu%,ic_alarm_adj_yd%,ic_alarm_adj_mu%,ic_alarm_adj_md%,ic_alarm_adj_du%,ic_alarm_adj_dd%,ic_alarm_adj_hu%,ic_alarm_adj_hd%,ic_alarm_adj_minu%,ic_alarm_adj_mind%
                                  PROCrec_fromwin(alarms%(0),H%)
                                  CASE I% OF
                                   WHEN   ic_alarm_adj_dd%: PROCchange_date(alarms%(0),M%,H%)
                                   WHEN   ic_alarm_adj_du%: PROCchange_date(alarms%(0),P%,H%)
                                   WHEN   ic_alarm_adj_md%: PROCchange_month(alarms%(0),M%,H%)
                                   WHEN   ic_alarm_adj_mu%: PROCchange_month(alarms%(0),P%,H%)
                                   WHEN   ic_alarm_adj_yd%: PROCchange_year(alarms%(0),M%,H%)
                                   WHEN   ic_alarm_adj_yu%: PROCchange_year(alarms%(0),P%,H%)
                                   WHEN   ic_alarm_adj_hd%: PROCchange_hour(alarms%(0),M%,H%)
                                   WHEN   ic_alarm_adj_hu%: PROCchange_hour(alarms%(0),P%,H%)
                                   WHEN ic_alarm_adj_mind%: PROCchange_min(alarms%(0),M%,H%)
                                   WHEN ic_alarm_adj_minu%: PROCchange_min(alarms%(0),P%,H%)
                                  ENDCASE
  WHEN          ic_alarm_repeat%: IFalarm_repeating%?alarms%(0) THEN
                                   alarm_repeating%?alarms%(0)=0
                                   alarm_repeat_rate%?alarms%(0)=1
                                   alarm_repeat_mult%?alarms%(0)=1
                                   PROCtoggle_alarm_size(FALSE)
                                  ELSE
                                   IFFNicon_set(a_wind%,ic_alarm_onthe%) THEN
                                    alarm_repeating%?alarms%(0)=2
                                   ELSE
                                    alarm_repeating%?alarms%(0)=1
                                   ENDIF
                                   PROCtoggle_alarm_size(TRUE)
                                  ENDIF
                                  PROCset_repeat_flags(TRUE,alarms%(0))
  WHEN            ic_alarm_task%: alarm_taskalarm%?alarms%(0)=NOT(alarm_taskalarm%?alarms%(0))
                                  IFalarm_taskalarm%?alarms%(0) THEN
                                   PROCsetstate(a_wind%,ic_alarm_urgent%,1<<22,1<<22)
                                  ELSE
                                   PROCsetstate(a_wind%,ic_alarm_urgent%,0,1<<22)
                                  ENDIF
  WHEN      ic_alarm_every_mins%: alarm_repeat_rate%?alarms%(0)=1:PROCset(I%)
  WHEN     ic_alarm_every_hours%: alarm_repeat_rate%?alarms%(0)=2:PROCset(I%)
  WHEN      ic_alarm_every_days%: alarm_repeat_rate%?alarms%(0)=4:PROCset(I%)
  WHEN     ic_alarm_every_weeks%: alarm_repeat_rate%?alarms%(0)=8:PROCset(I%)
  WHEN    ic_alarm_every_months%: alarm_repeat_rate%?alarms%(0)=16:PROCset(I%)
  WHEN     ic_alarm_every_years%: alarm_repeat_rate%?alarms%(0)=32:PROCset(I%)
  WHEN        ic_alarm_adj_repd%: PROCchange_mult(M%)
  WHEN        ic_alarm_adj_repu%: PROCchange_mult(P%)
  WHEN ic_alarm_adj_onthe_drepd%: PROCchange_special_offset(M%)
  WHEN ic_alarm_adj_onthe_drepu%: PROCchange_special_offset(P%)
  WHEN    ic_alarm_adj_onthe_dd%: PROCchange_special_day(M%)
  WHEN    ic_alarm_adj_onthe_du%: PROCchange_special_day(P%)
  WHEN ic_alarm_adj_onthe_mrepd%: PROCchange_special_month(M%)
  WHEN ic_alarm_adj_onthe_mrepu%: PROCchange_special_month(P%)
  WHEN           ic_alarm_wweek%: alarm_fvdywk%?alarms%(0)=NOT(alarm_fvdywk%?alarms%(0))
                                  IFalarm_fvdywk%?alarms%(0) PROCcheck_special_day(alarms%(0))
  WHEN           ic_alarm_every%: IFalarm_repeating%?alarms%(0)<>1 THEN
                                   alarm_repeating%?alarms%(0)=1
                                   alarm_repeat_rate%?alarms%(0)=1
                                   alarm_repeat_mult%?alarms%(0)=1
                                   PROCset_repeat_flags(TRUE,alarms%(0))
                                  ENDIF
                                  PROCset(I%)
  WHEN           ic_alarm_onthe%: IFalarm_repeating%?alarms%(0)<>2 THEN
                                   alarm_repeating%?alarms%(0)=2
                                   alarm_repeat_rate%?alarms%(0)=1
                                   alarm_repeat_mult%?alarms%(0)=1
                                   PROCset_repeat_flags(TRUE,alarms%(0))
                                  ENDIF
                                  PROCset(I%)
  WHEN ic_alarm_ok_lo%,ic_alarm_ok_hi%:
                                  PROCrec_fromwin(alarms%(0),H%):PROCok_current_action
  WHEN ic_alarm_cancel_lo%,ic_alarm_cancel_hi%:
                                  cancel%=TRUE:PROCclosewindow(a_wind%)
  ENDCASE
 ENDIF
ENDPROC
:
DEFPROCstore_alarm_strings(I%)
 REM IFFNcheck_pointer PROCcheck_pointer(I%,"PROCstore_alarm_strings")
 $(I%+alarm_line1%)=FNread_string(a_wind%,mess1%)
 $(I%+alarm_line2%)=FNread_string(a_wind%,mess2%)
 $(I%+alarm_line3%)=FNread_string(a_wind%,mess3%)
ENDPROC
:
DEFPROCcopyalarm(from%,to%)
 LOCAL i%
 REM IFFNcheck_pointer PROCcheck_pointer(from%,"PROCcopyalarm (from)")
 REM IFFNcheck_pointer PROCcheck_pointer(to%,"PROCcopyalarm (to)")
 FORi%=0 TO alarm_SIZE%-1
  to%?i%=from%?i%
 NEXT
 to%!alarm_fileptr%=0
ENDPROC

REM *************************************************************************
REM Application/task alarms
REM *************************************************************************

DEFPROCprocess_appl_alarm(A%)
 CASE Q%!20 OF
 WHEN 0,1:PROCset_appl_alarm
 WHEN 2:PROCcancel_appl_alarm
 OTHERWISE: PROCack_appl_alarm(1,FNmsg_0("ApplA1"))
 ENDCASE
 PROCreset_alarm_status
ENDPROC
:
DEFPROCack_appl_alarm(E%,e$)
 LOCAL C%
 IF A%<>18 ENDPROC
 C%=LEN(e$)+1
 Q%!12=Q%!8
 Q%!20=E%
 $(Q%+24)=e$+CHR$(0)
 !Q%=(24+C%) AND NOT3
 SYS"Wimp_SendMessage",17,Q%,Q%!4
ENDPROC
:
DEFPROCset_appl_alarm
 LOCAL year%,month%,dayofmonth%,hour%,minute%,I%,J%,ptr%
 ptr%=FNheap_claim("ALRM",alarm_SIZE%)
 IFptr%=0 PROCout_of_memory
 IF Q%!20=1 THEN
  |buffers%=|(Q%+24)
  PROCfivebt_to_ordinals(buffers%,hour%,minute%,dayofmonth%,month%,year%)
 ELSE
  year%=Q%!24 AND &FFFF
  month%=Q%?26
  dayofmonth%=Q%?27
  hour%=Q%?28
  minute%=Q%?29
 ENDIF
 ptr%!alarm_hours%=hour%
 ptr%!alarm_minutes%=minute%:REM bug fix to allow application alarms to work
 ptr%!alarm_date%=dayofmonth%
 ptr%!alarm_month%=month%
 ptr%!alarm_year%=year%
 I%=30
 WHILE Q%?I% I%+=1:ENDWHILE
 Q%?I%=13:$(ptr%+alarm_line1%)=$(Q%+30)
 IF LEN($(ptr%+alarm_line1%))>40 THEN
  PROCheap_free("ALRM",ptr%)
  PROCack_appl_alarm(2,FNmsg_0("ApplA2"))
  ENDPROC
 ENDIF
 I%+=1:J%=I%
 WHILE Q%?I% I%+=1:ENDWHILE
 Q%?I%=13:$(ptr%+alarm_line2%)=$(Q%+J%)
 IF LEN($(ptr%+alarm_line2%))>40 THEN
  PROCheap_free("ALRM",ptr%)
  PROCack_appl_alarm(3,FNmsg_0("ApplA3"))
  ENDPROC
 ENDIF
 $(ptr%+alarm_line3%)=""
 ptr%?alarm_repeating%=0
 ptr%?alarm_applalarm%=TRUE
 ptr%?alarm_taskalarm%=FALSE
 ptr%?alarm_fvdywk%=FALSE
 ptr%?alarm_urgent%=FALSE
 PROCsave_alarm(ptr%)
 alarm_warned%=FALSE
 PROCack_appl_alarm(0,"")
ENDPROC
:
DEFPROCbroadcast_appl_alarm
 LOCAL I%
 REM IFFNcheck_pointer PROCcheck_pointer(alarms%(1),"PROCbroadcast_appl_alarm(1)")
 Q%!12=0
 Q%!16=&501
 $(Q%+20)=$(alarms%(1)+alarm_line1%)+CHR$(0)
 I%=21+LEN($(alarms%(1)+alarm_line1%))
 $(Q%+I%)=$(alarms%(1)+alarm_line2%)+CHR$(0)
 I%+=LEN($(alarms%(1)+alarm_line2%))+1
 !Q%=(I%+4) AND NOT3
 SYS"Wimp_SendMessage",18,Q%,0
ENDPROC
;
DEFFNexecute_task_alarm(e$)
 LOCAL ERROR
 ON ERROR LOCAL :=FALSE
 OSCLI("Filer_Run "+e$)
=TRUE
:
DEFPROCactivate_task_alarm
 LOCAL e$,e%,error%
 REM IFFNcheck_pointer IF current_action%<>-1 PROCcheck_pointer(alarms%(0),"PROCactivate_task_alarm(0)")
 REM IFFNcheck_pointer PROCcheck_pointer(alarms%(1),"PROCactivate_task_alarm(1)")
 e$=$(alarms%(1)+alarm_line1%)+$(alarms%(1)+alarm_line2%)+$(alarms%(1)+alarm_line3%)
 IF (alarms%(0)=alarms%(1)) AND current_action%<>setting% THEN
  !Q%=a_wind%
  SYS"Wimp_CloseWindow",,Q%
  PROCcancel_current_action
 ENDIF
 IF alarm_repeating%?alarms%(1) THEN
  PROCremove_alarm_from_list(alarms%(1),FALSE)
  PROCsave_repeating_alarm(alarms%(1),alarm_repeat_rate%?alarms%(1),alarm_repeat_mult%?alarms%(1),error%)
 ELSE
  PROCremove_alarm_from_list(alarms%(1),TRUE)
  PROCheap_free("ALRM",alarms%(1))
  alarms%(1)=0
  PROCmodified_alarm_database
 ENDIF
 alarm_warned%=FALSE
 PROCreset_alarm_status
 e%=FNexecute_task_alarm(e$)
 IF NOTe% SYS"Wimp_StartTask",e$
 IFerror% PROCok(FNmsg_0("OkayC6"))
ENDPROC
:
DEFPROCset_task_alarm_string
 LOCAL v$
 REM IFFNcheck_pointer PROCcheck_pointer(alarms%(0),"PROCset_task_alarm_string(0)")
 v$=FNrtoz(Q%+44)
 $(alarms%(0)+alarm_line1%)=LEFT$(v$,40):v$=MID$(v$,41)
 $(alarms%(0)+alarm_line2%)=LEFT$(v$,40):v$=MID$(v$,41)
 $(alarms%(0)+alarm_line3%)=LEFT$(v$,40)
 PROCset_string(a_wind%,16,$(alarms%(0)+alarm_line1%))
 PROCset_string(a_wind%,17,$(alarms%(0)+alarm_line2%))
 PROCset_string(a_wind%,18,$(alarms%(0)+alarm_line3%))
 SYS"Wimp_SetCaretPosition",a_wind%,mess1%,-1,-1,-1,LEN($(alarms%(0)+alarm_line1%))
 PROCset(29):alarm_taskalarm%?alarms%(0)=TRUE
 PROCsetstate(a_wind%,5,1<<22,1<<22)
ENDPROC
:
DEFPROCcancel_appl_alarm
 REM
 REM Attempt to cancel the specified application
 REM alarm from the linked list
 REM
 LOCAL I%,J%,name$,ident$,E%,res%
 I%=24
 WHILE Q%?I% I%+=1:ENDWHILE
 Q%?I%=13:name$=$(Q%+24)
 IF LEN(name$)>40 PROCack_appl_alarm(2,FNmsg_0("ApplA2")):ENDPROC
 I%+=1:J%=I%
 WHILE Q%?I% I%+=1:ENDWHILE
 Q%?I%=13:ident$=$(Q%+J%)
 IF LEN(ident$)>40 PROCack_appl_alarm(3,FNmsg_0("ApplA3")):ENDPROC
 J%=0
 E%=alarm_head%
 res%=-1
 WHILE E%
  REM IFFNcheck_pointer PROCcheck_pointer(E%,"PROCcancel_appl_alarm")
  IF name$=$(E%+alarm_line1%) AND ident$=$(E%+alarm_line2%) AND E%?alarm_applalarm% THEN
   res%=E%
   E%=0
  ELSE
   E%=E%!alarm_next%
  ENDIF
 ENDWHILE
 IFres%=-1 THEN
  PROCack_appl_alarm(4,FNmsg_0("ApplA4"))
 ELSE
  PROCremove_alarm_from_list(res%,TRUE)
  alarm_warned%=FALSE
  PROCheap_free("ALRM",res%)
  PROCmodified_alarm_database
  PROCreset_alarm_status
  PROCack_appl_alarm(0,"")
 ENDIF
ENDPROC

REM *************************************************************************
REM Alarm record manipulation
REM *************************************************************************

DEFFNrec1_less_than_rec2(rec1%,rec2%)
 IFrec1%!alarm_year%    > rec2%!alarm_year%    :=FALSE
 IFrec1%!alarm_year%    < rec2%!alarm_year%    :=TRUE
 IFrec1%!alarm_month%   > rec2%!alarm_month%   :=FALSE
 IFrec1%!alarm_month%   < rec2%!alarm_month%   :=TRUE
 IFrec1%!alarm_date%    > rec2%!alarm_date%    :=FALSE
 IFrec1%!alarm_date%    < rec2%!alarm_date%    :=TRUE
 IFrec1%!alarm_hours%   > rec2%!alarm_hours%   :=FALSE
 IFrec1%!alarm_hours%   < rec2%!alarm_hours%   :=TRUE
 IFrec1%!alarm_minutes% < rec2%!alarm_minutes% :=TRUE
=FALSE
:
DEFFNrec1_equal_rec2(rec1%,rec2%)
 IFrec1%!alarm_year%    <> rec2%!alarm_year%    :=FALSE
 IFrec1%!alarm_month%   <> rec2%!alarm_month%   :=FALSE
 IFrec1%!alarm_date%    <> rec2%!alarm_date%    :=FALSE
 IFrec1%!alarm_hours%   <> rec2%!alarm_hours%   :=FALSE
 IFrec1%!alarm_minutes% <> rec2%!alarm_minutes% :=FALSE
=TRUE
:
DEFPROCfind_alarm
 LOCAL i%,last%
 REM IFFNcheck_pointer PROCcheck_pointer(alarms%(2),"PROCfind_alarm(2)")
 PROCread_first_alarm(i%)
 REM IFFNcheck_pointer PROCcheck_pointer(i%,"PROCfind_alarm(i%)")
 WHILE FNrec1_less_than_rec2(i%,alarms%(2))
  last%=i%
  PROCread_next_alarm(i%)
  REM if we've run out of alarms, go back to the last one
  REM and write over the find match so we can get out
  REM of the loop
  IFi%=0 i%=last%:PROCcopyalarm(i%,alarms%(2))
 ENDWHILE
 PROCichang(i%)
ENDPROC
:
DEFPROCincrement_alarm(I%,R%,S%,RETURN error%)
 LOCAL J%,day%
 REM IFFNcheck_pointer PROCcheck_pointer(I%,"PROCincrement_alarm")
 
 day%=FNday_of_week(I%)
 
 IF R% AND 1 THEN
  IF I%?alarm_fvdywk% THEN
   REM number of minutes in a day = 1440
   WHILE S%>=1440
    I%!alarm_date%+=1
    S%-=1440
    REPEAT
     day%=(day% + 1) MOD 7
     IF(global_weekwork% AND (1<<day%))=0 I%!alarm_date%+=1:S%-=1440
    UNTIL (global_weekwork% AND (1<<day%))<>0
   ENDWHILE
  ENDIF
  I%!alarm_minutes%+=S%
 ENDIF
 
 IF R% AND 2 THEN
  IF I%?alarm_fvdywk% THEN
   REM number of hours in a day = 24
   WHILE S%>=24
    I%!alarm_date%+=1
    S%-=24
    REPEAT
     day%=(day% + 1) MOD 7
     IF(global_weekwork% AND (1<<day%))=0 I%!alarm_date%+=1:S%-=24
    UNTIL (global_weekwork% AND (1<<day%))<>0
   ENDWHILE
  ENDIF
  I%!alarm_hours%+=S%
 ENDIF
 
 IF R% AND 4 THEN
  IF I%?alarm_fvdywk% THEN
   FOR J%=1 TO S%
    I%!alarm_date%+=1
    REPEAT
     day%=(day% + 1) MOD 7
     IF(global_weekwork% AND (1<<day%))=0 I%!alarm_date%+=1:J%+=1
    UNTIL (global_weekwork% AND (1<<day%))<>0
   NEXT
  ELSE
   I%!alarm_date%+=S%
  ENDIF
 ENDIF
 
 IF R% AND 8  I%!alarm_date%+=S%*7
 IF R% AND 16 I%!alarm_month%+=S%
 IF R% AND 32 I%!alarm_year%+=S%
 
 PROCvalidate_alarm_rec(I%,error%)
 IF I%?alarm_fvdywk% THEN
  WHILE NOTerror% AND NOTFNvalid_day_of_week(I%)
   I%!alarm_date%+=1
   PROCvalidate_alarm_rec(I%,error%)
  ENDWHILE
 ENDIF
ENDPROC
:
DEFPROCincrement_special_alarm(I%,R%,S%,RETURN error%)
 LOCAL J%
 LOCAL day%            :REM day that alarm is required to go off on
 LOCAL offset%         :REM offset into month that alarm is required
 LOCAL required_date%  :REM calculated date for this month
 LOCAL hours%, minutes%, dayofmonth%, month%, year%
 REM IFFNcheck_pointer PROCcheck_pointer(I%,"PROCincrement_special_alarm")
 
 REM extract values from alarm settings
 day%=R% AND 7
 offset%=R% DIV 8
 
 REM ensure that alarm is started from tomorrow
 hours%=I%!alarm_hours%
 minutes%=I%!alarm_minutes%
 dayofmonth%=I%!alarm_date%+1
 month%=I%!alarm_month%
 year%=I%!alarm_year%
 
 REM calculate required date for THIS month
 required_date%=FNcalculate_special_date_required(I%,day%,offset%,error%)
 IFerror% ENDPROC
 
 REM if we are past that date, we must be repeating properly
 REM so add on the required number of months and try again
 IFrequired_date%<dayofmonth% THEN
  month%+=S%
  year%=I%!alarm_year%
  WHILE month%>FNmonthsinyear(year%) month%-=FNmonthsinyear(year%):year%+=1:ENDWHILE
  required_date%=FNcalculate_special_date_required(I%,day%,offset%,error%)
  IFerror% ENDPROC
 ENDIF
 
 I%!alarm_date%=required_date%
 I%!alarm_month%=month%
 I%!alarm_year%=year%
 PROCvalidate_alarm_rec(I%,error%)
ENDPROC
:
DEFPROCread_date_and_time(I%)
 LOCAL hr%,mi%,da%,mo%,yr%
 REM get the current date and time and store it
 REM in the specified alarm record as local ordinals
 REM IFFNcheck_pointer PROCcheck_pointer(I%,"PROCread_date_and_time")
 PROCfivebt_to_ordinals(cur_clock%,hr%,mi%,da%,mo%,yr%)
 I%!alarm_year%=yr%
 I%!alarm_month%=mo%
 I%!alarm_date%=da%
 I%!alarm_hours%=hr%
 I%!alarm_minutes%=mi%
ENDPROC
:
DEFFNread_repeat_day(I%)
 REM IFFNcheck_pointer PROCcheck_pointer(I%,"FNread_repeat_day")
=(I%?alarm_repeat_rate% AND 7)
:
DEFFNread_repeat_offset(I%)
 REM IFFNcheck_pointer PROCcheck_pointer(I%,"FNread_repeat_offset")
=(I%?alarm_repeat_rate% DIV 8)
:
DEFPROCwrite_repeat_day(I%,V%)
 REM IFFNcheck_pointer PROCcheck_pointer(I%,"PROCwrite_repeat_day")
 I%?alarm_repeat_rate%=(FNread_repeat_offset(I%) << 3) + V%
ENDPROC
:
DEFPROCwrite_repeat_offset(I%,V%)
 REM IFFNcheck_pointer PROCcheck_pointer(I%,"PROCwrite_repeat_offset")
 I%?alarm_repeat_rate%=(V% << 3) + FNread_repeat_day(I%)
ENDPROC
:
DEFPROCsave_record(c%,p%,next%,prev%)
 LOCAL b%,p1%
 REM IFFNcheck_pointer PROCcheck_pointer(p%,"PROCsave_record")
 p1%=PTR#c%
 p%!alarm_fileptr%=p1%
 PRINT#c%,100
 PRINT#c%,next%
 PRINT#c%,prev%
 b%=p%!alarm_year%
 BPUT#c%,(b% >> 8) AND 255
 BPUT#c%,(b% AND 255)
 BPUT#c%,p%?alarm_month%
 BPUT#c%,p%?alarm_date%
 BPUT#c%,p%?alarm_hours%
 BPUT#c%,p%?alarm_minutes%
 BPUT#c%,p%?alarm_urgent%
 PRINT#c%,$(p%+alarm_line1%)
 PRINT#c%,$(p%+alarm_line2%)
 PRINT#c%,$(p%+alarm_line3%)
 PTR#c%=p1%+148
 b%=0
 IF p%?alarm_applalarm%   b%+=1
 IF p%?alarm_repeating%=1 b%+=2
 IF p%?alarm_taskalarm%   b%+=4
 IF p%?alarm_fvdywk%      b%+=8
 IF p%?alarm_repeating%=2 b%+=16
 BPUT#c%,b%
 BPUT#c%,p%?alarm_repeat_rate%
 BPUT#c%,p%?alarm_repeat_mult%
ENDPROC
:
DEFFNcalculate_special_date_required(I%,day%,offset%,RETURN error%)
 LOCAL required_date%  :REM calculated date for this month
 LOCAL first_day_month%:REM first day for this month
 LOCAL last_day_month% :REM last day for this month
 LOCAL yr%,mn%,dy%
 REM IFFNcheck_pointer PROCcheck_pointer(I%,"FNcalculate_special_date_required")
 
 yr%=year%:mn%=month%:dy%=1
 
 PROCvalidate_ordinals(hours%,minutes%,dy%,mn%,yr%,error%)
 IFerror% ENDPROC
 PROCordinals_to_fivebt(buffers%,hours%,minutes%,dy%,mn%,yr%)
 first_day_month%=VAL(FNconverttime(buffers%,"%WN"))
 
 mn%+=1
 PROCvalidate_ordinals(hours%,minutes%,dy%,mn%,yr%,error%)
 IFerror% ENDPROC
 PROCordinals_to_fivebt(buffers%,hours%,minutes%,dy%,mn%,yr%)
 last_day_month%=VAL(FNconverttime(buffers%,"%WN"))-1
 IFlast_day_month%=0 last_day_month%=7
 
 CASE offset% OF
 WHEN 0:REM first occurence in month
        required_date%=1
        IFday%<first_day_month% required_date%+=(7-first_day_month%)+day%
        IFday%>first_day_month% required_date%+=(day%-first_day_month%)
 WHEN 1:REM second occurence in month
        required_date%=8
        IFday%<first_day_month% required_date%+=(7-first_day_month%)+day%
        IFday%>first_day_month% required_date%+=(day%-first_day_month%)
 WHEN 2:REM third occurence in month
        required_date%=15
        IFday%<first_day_month% required_date%+=(7-first_day_month%)+day%
        IFday%>first_day_month% required_date%+=(day%-first_day_month%)
 WHEN 3:REM last occurence in month
        required_date%=FNdaysinmonth(month%,year%)
        IFday%>last_day_month% required_date%-=7
        required_date%-=(last_day_month%-day%)
 WHEN 4:REM penultimate occurence in month
        required_date%=FNdaysinmonth(month%,year%)-7
        IFday%>last_day_month% required_date%-=7
        required_date%-=(last_day_month%-day%)
 WHEN 5:REM third to last occurence in month
        required_date%=FNdaysinmonth(month%,year%)-14
        IFday%>last_day_month% required_date%-=7
        required_date%-=(last_day_month%-day%)
 ENDCASE
=required_date%
:
DEFPROCcheck_special_day(Z%)
 LOCAL J%,dir%
 REM IFFNcheck_pointer PROCcheck_pointer(Z%,"PROCcheck_special_day")
 IFZ%?alarm_repeating%<>2 ENDPROC
 J%=FNread_repeat_day(Z%)
 dir%=1
 WHILE NOT(FNvalid_day(J%))
  J%+=dir%
  IFJ%=8 THEN
   J%=FNread_repeat_day(Z%)
   dir%=-1
  ENDIF
 ENDWHILE
 PROCwrite_repeat_day(Z%,J%)
 PROCset_string(a_wind%,38,FNmsg_0("WE"+STR$(J%)+"a"+STR$(FNread_repeat_offset(Z%))))
 PROCset_string(a_wind%,35,FNmsg_0("SR"+STR$(FNread_repeat_offset(Z%))+"w"+STR$(J%)))
ENDPROC
:
DEFPROCchange_special_offset(V%)
 LOCAL D%
 D%=FNread_repeat_offset(alarms%(0))
 D%+=V%
 IF D%>-1 AND D%<6 THEN
  PROCwrite_repeat_offset(alarms%(0),D%)
  PROCset_string(a_wind%,35,FNmsg_0("SR"+STR$(D%)+"w"+STR$(FNread_repeat_day(alarms%(0)))))
  PROCset_string(a_wind%,38,FNmsg_0("WE"+STR$(FNread_repeat_day(alarms%(0)))+"a"+STR$(D%)))
 ENDIF
ENDPROC
:
DEFPROCchange_special_day(V%)
 LOCAL D%
 REM IFFNcheck_pointer PROCcheck_pointer(alarms%(0),"PROCchange_special_day(0)")
 D%=FNread_repeat_day(alarms%(0))
 D%+=V%
 IFalarm_fvdywk%?alarms%(0) THEN
  WHILE NOT(FNvalid_day(D%))
   D%+=V%
   IFD%<0 OR D%>7 D%=FNread_repeat_day(alarms%(0))
  ENDWHILE
 ENDIF
 IF D%>0 AND D%<8 THEN
  PROCwrite_repeat_day(alarms%(0),D%)
  PROCset_string(a_wind%,38,FNmsg_0("WE"+STR$(D%)+"a"+STR$(FNread_repeat_offset(alarms%(0)))))
  PROCset_string(a_wind%,35,FNmsg_0("SR"+STR$(FNread_repeat_offset(alarms%(0)))+"w"+STR$(D%)))
 ENDIF
ENDPROC
:
DEFPROCchange_special_month(V%)
 REM IFFNcheck_pointer PROCcheck_pointer(alarms%(0),"PROCchange_special_month(0)")
 V%+=alarm_repeat_mult%?alarms%(0)
 IF V%>0 AND V%<13 THEN
  alarm_repeat_mult%?alarms%(0)=V%
  PROCset_string(a_wind%,41,FNmsg_0("MR"+STR$(V%)))
 ENDIF
ENDPROC
:
DEFPROCchange_mult(V%)
 REM IFFNcheck_pointer PROCcheck_pointer(alarms%(0),"PROCchange_mult(0)")
 V%+=alarm_repeat_mult%?alarms%(0)
 IF V%>0 AND V%<256 THEN
  alarm_repeat_mult%?alarms%(0)=V%
  PROCset_string(a_wind%,27,STR$(V%))
 ENDIF
ENDPROC

REM *************************************************************************
REM Alarm input/output
REM *************************************************************************

DEFPROCmodified_alarm_database
 IFautosaved% THEN
  autosaved%=FALSE
 ELSE
  modified%=TRUE
 ENDIF
 PROCadjust_browser_size
 !Q%=browser%:SYS"Wimp_GetWindowState",,Q%
 IF(Q%!32 AND (1<<16)) PROCopen_browser
ENDPROC
:
DEFPROCprint_the_alarms_out(f$,selection%)
 REM
 REM Print out the details of all of the
 REM alarms to the file f$
 REM
 LOCAL C%,B%,Z$,Y$,Y1$,Y2$,doit%
 C%=OPENOUT(f$)
 B%=alarm_head%
 WHILE B%
  REM IFFNcheck_pointer PROCcheck_pointer(B%,"PROCprint_the_alarms_out")
  IFselection% THEN
   IFB%?alarm_selected% doit%=TRUE ELSE doit%=FALSE
  ELSE
   doit%=TRUE
  ENDIF
  IF doit% THEN
   PROCalarm_rec_to_fivebt(B%,buffers%)
   Y$=FNconverttime(buffers%,FNmsg_0("PrntA7"))
   IF Y$<>Z$ THEN
    REM ensure that we only print the date ONCE
    IF Z$<>"" THEN
     REM separate dates with a blank line
     BPUT#C%,""
    ENDIF
    BPUT#C%,Y$
    Z$=Y$
   ENDIF
   Y$=FNconverttime(buffers%,FNmsg_0("PrntA6"))
   BPUT#C%,Y$+STRING$(12-LENY$," ");
   IF B%?alarm_applalarm% THEN
    BPUT#C%,FNmsg_1("PrntA1", $(B%+alarm_line1%))
   ELSE
    IF B%?alarm_taskalarm% THEN
     BPUT#C%,FNmsg_0("PrntA2")
     BPUT#C%,STRING$(12," ")+$(B%+alarm_line1%)+$(B%+alarm_line2%)+$(B%+alarm_line3%)
    ELSE
     IF LEN($(B%+alarm_line1%))+LEN($(B%+alarm_line2%))+LEN($(B%+alarm_line3%))=0 THEN
      BPUT#C%,FNmsg_0("PrntB7")
     ELSE
      IF $(B%+alarm_line1%)<>"" BPUT#C%,$(B%+alarm_line1%)
      IF $(B%+alarm_line2%)<>"" BPUT#C%,STRING$(12," ")+$(B%+alarm_line2%)
      IF $(B%+alarm_line3%)<>"" BPUT#C%,STRING$(12," ")+$(B%+alarm_line3%)
     ENDIF
     IF B%?alarm_urgent% BPUT#C%,STRING$(12," ")+FNmsg_0("PrntA3")
    ENDIF
    CASE B%?alarm_repeating% OF
    WHEN 0:IF B%?alarm_fvdywk% BPUT#C%,STRING$(12," ")+FNmsg_0("PrntB8")
    WHEN 1:CASE B%?alarm_repeat_rate% OF
           WHEN 1: Y$=FNmsg_0("PrntB1")
           WHEN 2: Y$=FNmsg_0("PrntB2")
           WHEN 4: Y$=FNmsg_0("PrntB3")
           WHEN 8: Y$=FNmsg_0("PrntB4")
           WHEN 16:Y$=FNmsg_0("PrntB5")
           WHEN 32:Y$=FNmsg_0("PrntB6")
           ENDCASE
           IF B%?alarm_fvdywk% THEN
            BPUT#C%,STRING$(12," ")+FNmsg_2("PrntA4", STR$(B%?alarm_repeat_mult%), Y$)
           ELSE
            BPUT#C%,STRING$(12," ")+FNmsg_2("PrntA5", STR$(B%?alarm_repeat_mult%), Y$)
           ENDIF
    WHEN 2:Y$=FNmsg_0("SR"+STR$(FNread_repeat_offset(B%))+"w"+STR$(FNread_repeat_day(B%)))
           Y1$=FNmsg_0("WE"+STR$(FNread_repeat_day(B%))+"a"+STR$(FNread_repeat_offset(B%)))
           Y2$=FNmsg_0("MR"+STR$(B%?alarm_repeat_mult%))
           BPUT#C%,STRING$(12," ")+FNmsg_3("PrntB9", Y$, Y1$, Y2$)
           IFB%?alarm_fvdywk% BPUT#C%,STRING$(12," ")+FNmsg_0("PrntB8")
    ENDCASE
   ENDIF
  ENDIF
  B%=B%!alarm_next%
 ENDWHILE
 CLOSE#C%
 SYS"OS_File",18,f$,&FFF
ENDPROC
:
DEFPROCload_alarms_into_memory(f$)
 REM
 REM Load all of the alarms from the file
 REM into a linked list of records
 REM
 LOCAL c%,ptr%,this_rec%,B%,m%,old_autosave%,p%,matched%,this_autosave%,null%
 IFf$="" THEN
  REM to catch stupid situations
  PROCreset_alarm_status
  REM IFra$=def_fn$ OR ra$="" ra$=FNmsg_0("FN2")
  IF ra$="" ra$=FNmsg_0("FN2")
 ELSE
  old_autosave%=alarm_autosave%
  this_autosave%=alarm_autosave%
  IFalarm_head%=0 THEN
   this_autosave%=TRUE
   REM if no alarms loaded yet, and we're using the default file,
   REM revert to the old default name so that lower down, we replace
   REM it with the NEW default name
   REM IFra$=def_fn$ ra$=FNmsg_0("FN2")
  ENDIF
  alarm_autosave%=FALSE
  m%=modified%
  c%=FNopen(f$,&40)
  IFc%>0 THEN
   SYS"OS_Args",254,c% TO B%
   IF(B% AND 1<<6)=0 THEN
    CLOSE#c%
    c%=0
   ENDIF
  ENDIF
  IFc%>0 THEN
   IFBGET#c%=&41 AND BGET#c%=&4C AND BGET#c%=&52 AND BGET#c%=&4D THEN
    SYS"Hourglass_On"
    REPEAT
     INPUT#c%,ptr%
     IFptr%<>-1 THEN
      this_rec%=FNheap_claim("ALRM",alarm_SIZE%)
      IFthis_rec%=0 CLOSE#c%:PROCout_of_memory
      PTR#c%=ptr%
      INPUT#c%,B%
      IFB%=100 THEN
       PTR#c%=ptr%+15
       this_rec%!alarm_next%=0
       this_rec%!alarm_prev%=0
       this_rec%!alarm_fileptr%=ptr%
       B%=BGET#c%*256+BGET#c%
       this_rec%!alarm_year%=B%
       this_rec%!alarm_month%=BGET#c%
       this_rec%!alarm_date%=BGET#c%
       this_rec%!alarm_hours%=BGET#c%
       this_rec%!alarm_minutes%=BGET#c%
       this_rec%?alarm_urgent%=BGET#c%
       INPUT#c%,$(this_rec%+alarm_line1%)
       INPUT#c%,$(this_rec%+alarm_line2%)
       INPUT#c%,$(this_rec%+alarm_line3%)
       PTR#c%=ptr%+148
       B%=BGET#c%
       this_rec%?alarm_applalarm%=((B% AND 1)=1)
       this_rec%?alarm_repeating%=0
       IF(B% AND 2)=2   this_rec%?alarm_repeating%=1
       IF(B% AND 16)=16 this_rec%?alarm_repeating%=2
       this_rec%?alarm_taskalarm%=((B% AND 4)=4)
       this_rec%?alarm_fvdywk%=((B% AND 8)=8)
       this_rec%?alarm_repeat_rate%=BGET#c%
       this_rec%?alarm_repeat_mult%=BGET#c%
       this_rec%?alarm_selected%=0
       IFthis_rec%?alarm_applalarm% THEN
        REM check for duplicates of application alarms
        p%=alarm_head%
        WHILE p%
         IF p%?alarm_applalarm% THEN
          matched%=TRUE
          IFthis_rec%!alarm_year%<>p%!alarm_year% matched%=FALSE
          IFthis_rec%!alarm_month%<>p%!alarm_month% matched%=FALSE
          IFthis_rec%!alarm_date%<>p%!alarm_date% matched%=FALSE
          IFthis_rec%!alarm_hours%<>p%!alarm_hours% matched%=FALSE
          IFthis_rec%!alarm_minutes%<>p%!alarm_minutes% matched%=FALSE
          IFthis_rec%?alarm_urgent%<>p%?alarm_urgent% matched%=FALSE
          IF$(this_rec%+alarm_line1%)<>$(p%+alarm_line1%) matched%=FALSE
          IF$(this_rec%+alarm_line2%)<>$(p%+alarm_line2%) matched%=FALSE
          IF$(this_rec%+alarm_line3%)<>$(p%+alarm_line3%) matched%=FALSE
          IFthis_rec%?alarm_repeating%<>p%?alarm_repeating% matched%=FALSE
          IFthis_rec%?alarm_taskalarm%<>p%?alarm_taskalarm% matched%=FALSE
          IFthis_rec%?alarm_fvdywk%<>p%?alarm_fvdywk% matched%=FALSE
          IFthis_rec%?alarm_repeat_rate%<>p%?alarm_repeat_rate% matched%=FALSE
          IFthis_rec%?alarm_repeat_mult%<>p%?alarm_repeat_mult% matched%=FALSE
         ELSE
          matched%=FALSE
         ENDIF
         IFmatched% THEN
          PROCheap_free("ALRM",this_rec%)
          this_rec%=0
          p%=0
         ELSE
          p%=p%!alarm_next%
         ENDIF
        ENDWHILE
       ENDIF
       IFthis_rec%<>0 THEN PROCsave_alarm(this_rec%)
      ENDIF
      REM set the file pointer ready for the loop around
      PTR#c%=ptr%+5
     ENDIF
     SYS"Hourglass_Percentage",PTR#c%*100/EXT#c%
    UNTIL ptr%=-1
    SYS"Hourglass_Off"
    c%=FNclose(c%)
    IFra$=FNmsg_0("FN2") ra$=f$
    IFf$=ra$ AND m%=FALSE AND this_autosave%=TRUE THEN
     REM A consequence of using PROCsave_alarm is that
     REM it marks the modified flag, so if we are loading
     REM the default file and we hadn't set anything yet
     REM then we can clear the flag
     REM
     REM Note that this_autosave% is forced to true if
     REM this is the first alarm file (since we could
     REM load it multiple times) otherwise the global
     REM autosave value is used
     modified%=FALSE
     PROCset_title(browser%,f$)
    ENDIF
   ELSE
    c%=FNclose(c%)
    PROCok(FNmsg_1("OkayA3",f$))
   ENDIF
  ELSE
   REM IFra$=def_fn$ OR ra$="" ra$=FNmsg_0("FN2")
   IFra$="" ra$=FNmsg_0("FN2")
   REM just check that the file actually exists
   SYS"XOS_File",17,f$ TO c%;B%
   IF (B% AND 1)=0 AND c%<>0 THEN
    null% =FNerr_box(1,FNmsg_1("File07",f$),1)
   ENDIF
  ENDIF
  alarm_autosave%=old_autosave%
 ENDIF
 PROCadjust_browser_size
 PROCreset_alarm_status
ENDPROC
:
DEFPROCsave_alarms_to_disc(f$,selection%,safe%,give_error%)
 REM
 REM Save all of the alarms in the linked
 REM list to disc.
 REM
 LOCAL c%,p%,prev%,prev1%,prev2%,doit%
 LOCAL r0%,r2%,r3%,r4%,f%
 LOCAL o$
 autosaved%=FALSE
 IFf$="" ENDPROC
 
 o$=f$ : REM Save original file name
 
 REM if the filename begins "choices:" then we have
 REM to change to using "<choices$write>", and also
 REM check for the presence of a directory called
 REM Alarm in it...
 IF FNupper(f$)=FNupper(def_fn$) THEN
  f$="<Choices$Write>.Alarm"
  SYS"XOS_File",8,f$,0
  f$=f$+".Alarms"
 ENDIF
 
 REM since we are about to create a new Alarms file,
 REM stomp on the existing one first to see if we
 REM get a more interesting error
 SYS"XOS_File",17,f$ TO r0%,,r2%,r3%,r4%;f%
 IF(f%AND1) THEN
  IFgive_error% THEN
   null% =FNerr_box(1,FNmsg_1("File06",FNrtoz(r0%+4)),1)
  ENDIF
  ENDPROC
 ENDIF
 
 REM if we found a file with the same name, create
 REM a file with the same name, load/exec/length
 REM attributes
 
 REM if we DIDN'T find a file with the same name,
 REM try to create a typed empty file
 
 IF r0%=1 THEN
  SYS"XOS_File",7,f$,r2%,r3%,0,r4% TO r0%;f%
 ELSE
  SYS"XOS_File",11,f$,&AE9 TO r0%;f%
 ENDIF
 
 IF(f%AND1) THEN
  IFgive_error% THEN
   null% =FNerr_box(1,FNmsg_1("File06",FNrtoz(r0%+4)),1)
  ENDIF
  ENDPROC
 ENDIF
 
 SYS"Hourglass_On"
 c%=FNopen(f$,&80)
 IF c%>0 THEN
  SYS"OS_Args",254,c% TO p%
  IF(p% AND 1<<7)=0 THEN
   CLOSE#c%
   c%=-2
  ENDIF
 ENDIF
 IF c%>0 THEN
  IFNOT(selection%) AND (safe%) THEN
   modified%=FALSE
   PROCset_title(browser%,o$)
   ra$=o$:REM make this the main alarm file (use original file name)
  ENDIF
  BPUT#c%,&41
  BPUT#c%,&4C
  BPUT#c%,&52
  BPUT#c%,&4D
  IFalarm_head%=0 THEN
   PRINT#c%,-1
  ELSE
   PRINT#c%,14
  ENDIF
  PRINT#c%,-1
  p%=alarm_head%
 
  REM prev% is a pointer to the previous record written to
  prev%=-1
  WHILE p%
   REM IFFNcheck_pointer PROCcheck_pointer(p%,"PROCsave_alarms_to_disc")
   IF selection% THEN
    IFp%?alarm_selected% THEN
     doit%=TRUE
    ELSE
     doit%=FALSE
    ENDIF
   ELSE
    doit%=TRUE
   ENDIF
 
   IF doit% THEN
    prev1%=PTR#c%
    IFprev%<>-1 THEN
     PTR#c%=prev%+5
     PRINT#c%,prev1%
     PTR#c%=prev1%
    ENDIF
    PROCsave_record(c%,p%,-1,prev%)
    prev%=prev1%
   ENDIF
   p%=p%!alarm_next%
  ENDWHILE
  c%=FNclose(c%)
  IFc% THEN
   PROCwarning(FNmsg_1("File03",FNmsg_0("File01")))
  ELSE
   SYS"OS_File",18,f$,&AE9
   autosaved%=TRUE
  ENDIF
 ELSE
  IFc%=-2 THEN
   PROCwarning(FNmsg_1("File03",FNmsg_0("File04")))
  ELSE
   PROCwarning(FNmsg_1("File02", REPORT$))
  ENDIF
 ENDIF
 REM there won't be any instances of duplicated
 REM warnings here, so we can reset the flags now
 alarm_warned%=FALSE
 SYS"Hourglass_Off"
ENDPROC

REM *************************************************************************
REM Alarm actions
REM *************************************************************************

DEFPROCichang(i%)
 REM IFFNcheck_pointer PROCcheck_pointer(i%,"PROCichang")
 alarm_original_pointer%=i%
 IFalarms%(0)=0 alarms%(0)=FNheap_claim("ALRM",alarm_SIZE%)
 IFalarms%(0)=0 PROCout_of_memory
 PROCcopyalarm(alarm_original_pointer%,alarms%(0))
 !Q%=a_wind%:SYS"Wimp_CloseWindow",,Q%
 PROCcreate_alarm_wind(FNmsg_0("TitlA3"),TRUE,alarms%(0))
 PROCopen_alarm_wind
 IF NOT(alarm_applalarm%?alarms%(0)) THEN
  SYS"Wimp_SetCaretPosition",a_wind%,mess1%,-1,-1,-1,FNlength_icon(mess1%)
 ENDIF
 current_action%=changing%
ENDPROC
:
DEFPROCdefer(R%)
 LOCAL S%,e%,error%
 S%=VAL($deftime%)
 IF S%<=0 THEN ENDPROC
 e%=FNheap_claim("ALRM",alarm_SIZE%)
 IFe%=0 PROCout_of_memory
 PROCcopyalarm(alarms%(1),e%)
 REM if we are deferring by any amount less then
 REM a day, reset it to the current date and time
 IFR%<4 PROCread_date_and_time(e%)
 e%?alarm_repeating%=0
 e%?alarm_repeat_rate%=1
 e%?alarm_repeat_mult%=1
 PROCsave_repeating_alarm(e%,R%,S%,error%)
 REM we will report the error NOW so that
 REM the alarm message window does not get closed
 IFerror% PROCok(FNmsg_0("OkayC4"))
 alarm_warned%=FALSE
 PROCclosewindow(m_wind%)
ENDPROC

DEFPROCsave_repeating_alarm(I%,R%,S%,RETURN error%)
 LOCAL P%,Z%,ptr%, open%, dotpos%, left%
 P%=0:Z%=0:dotpos%=0
 open%=FALSE
 REM IFFNcheck_pointer PROCcheck_pointer(I%,"PROCsave_repeating_alarm")
 SYS"Hourglass_On"
 ptr%=FNheap_claim("ALRM",alarm_SIZE%)
 IFptr%=0 PROCout_of_memory
 PROCread_date_and_time(ptr%)
 CASE I%?alarm_repeating% OF
 WHEN 0,1:REPEAT
           P%=(P%+1)MOD 100
           IF P%=0 AND NOT open% PROCopen_slow_increment_warning:open%=TRUE
           PROCincrement_alarm(I%,R%,S%,error%)
          UNTIL FNrec1_less_than_rec2(ptr%,I%) OR error%
 WHEN   2:REPEAT
           P%=(P%+1)MOD 100
           IF P%=0 AND NOT open% PROCopen_slow_increment_warning:open%=TRUE
           PROCincrement_special_alarm(I%,R%,S%,error%)
          UNTIL FNrec1_less_than_rec2(ptr%,I%) OR error%
 ENDCASE
 IFNOT(error%) PROCsave_alarm(I%)
 PROCheap_free("ALRM",ptr%)
 SYS"Hourglass_Off"
 IFopen% THEN
  !Q%=slow%
  SYS"Wimp_CloseWindow",, Q%
  open%=FALSE
 ENDIF  
ENDPROC
:
DEFPROCuser_set_an_alarm
 alarm_original_pointer%=0
 IFalarms%(0)=0 alarms%(0)=FNheap_claim("ALRM",alarm_SIZE%)
 IFalarms%(0)=0 PROCout_of_memory
 alarm_prev%!alarms%(0)=0
 alarm_next%!alarms%(0)=0
 alarm_fileptr%!alarms%(0)=0
 PROCread_date_and_time(alarms%(0))
 $(alarms%(0)+alarm_line1%)=""
 $(alarms%(0)+alarm_line2%)=""
 $(alarms%(0)+alarm_line3%)=""
 alarm_urgent%?alarms%(0)=FALSE
 alarm_applalarm%?alarms%(0)=FALSE
 alarm_repeating%?alarms%(0)=0
 alarm_taskalarm%?alarms%(0)=FALSE
 alarm_fvdywk%?alarms%(0)=fivedayweek%
 alarm_repeat_mult%?alarms%(0)=1
 alarm_repeat_rate%?alarms%(0)=1
 alarm_selected%?alarms%(0)=0
 PROCcreate_alarm_wind(FNmsg_0("TitlA1"),TRUE,alarms%(0))
 PROCopen_alarm_wind
 SYS"Wimp_SetCaretPosition",a_wind%,mess1%,-1,-1,-1,FNlength_icon(mess1%)
 REM if we get this far, we must be setting an alarm :-)
 current_action%=setting%
ENDPROC
:
DEFPROCopen_slow_increment_warning
 LOCAL reason%
 PROCopen_window(slow%)
 SYS"Wimp_Poll", 932209, Q% TO reason%
 IF reason%=1 THEN
  SYS"Wimp_RedrawWindow",, Q% TO left%
  WHILE left%
   SYS"Wimp_GetRectangle",, Q% TO left%
  ENDWHILE
 ENDIF
ENDPROC
:
DEFPROCok_current_action
 LOCAL i%
 REM IFFNcheck_pointer PROCcheck_pointer(alarms%(0),"PROCok_current_action(0)")
 i%=current_action%:current_action%=-1:PROCclosewindow(a_wind%):current_action%=i%
 IF current_action%=setting% OR current_action%=changing% THEN
  IF current_action%=changing% THEN
   PROCremove_alarm_from_list(alarm_original_pointer%,FALSE)
   alarm_original_pointer%=0
  ENDIF
  i%=FNheap_claim("ALRM",alarm_SIZE%)
  IFi%=0 PROCout_of_memory
  PROCcopyalarm(alarms%(0),i%)
  PROCheap_free("ALRM",alarms%(0))
  alarms%(0)=0
  PROCstore_alarm_strings(i%)
  PROCsave_alarm(i%)
  alarm_warned%=FALSE
 ENDIF
 PROCreset_alarm_status
 IFcurrent_action%=changing% THEN
  REM see if there is another selected alarm
  i%=alarm_head%
  WHILE i%
   REM IFFNcheck_pointer PROCcheck_pointer(i%,"PROCok_current_action(i%)")
   IFi%?alarm_selected% THEN
    i%?alarm_selected%=0
    PROCredraw_alarm(i%)
    PROCichang(i%)
    ENDPROC
   ELSE
    i%=i%!alarm_next%
   ENDIF
  ENDWHILE
 ENDIF
 current_action%=-1
ENDPROC
:
DEFPROCcancel_current_action
 REM *always* free this alarm block as it was only a copy
 PROCheap_free("ALRM",alarms%(0))
 alarms%(0)=0
 alarm_original_pointer%=0
 IFcurrent_action%=changing% THEN
  REM see if there is another selected alarm
  i%=alarm_head%
  WHILE i%
   REM IFFNcheck_pointer PROCcheck_pointer(i%,"PROCcancel_current_action(i%)")
   IFi%?alarm_selected% THEN
    i%?alarm_selected%=0
    PROCredraw_alarm(i%)
    PROCichang(i%)
    ENDPROC
   ELSE
    i%=i%!alarm_next%
   ENDIF
  ENDWHILE
 ENDIF
 current_action%=-1
ENDPROC
:
DEFFNalarm_sounding(U%)
 IFNOTalarm_detected%             :=FALSE
 REM IFFNcheck_pointer PROCcheck_pointer(alarms%(1),"FNalarm_sounding(1)")
 IFalarm_applalarm%?alarms%(1) :=FALSE
 IFsilent_alarm% AND (U%=0)       :=FALSE
 IFalarm_counter%=0               :=FALSE
=TRUE
:
DEFFNalarm_gone_off(ptr%)
 LOCAL hr%,mi%,da%,mo%,yr%
 REM IFFNcheck_pointer PROCcheck_pointer(ptr%,"FNalarm_gone_off")
 PROCfivebt_to_ordinals(cur_clock%,hr%,mi%,da%,mo%,yr%)
 IFyr% < ptr%!valid_year%    :=FALSE
 IFyr% > ptr%!valid_year%    :=TRUE
 IFmo% < ptr%!valid_month%   :=FALSE
 IFmo% > ptr%!valid_month%   :=TRUE
 IFda% < ptr%!valid_date%    :=FALSE
 IFda% > ptr%!valid_date%    :=TRUE
 IFhr% < ptr%!valid_hours%   :=FALSE
 IFhr% > ptr%!valid_hours%   :=TRUE
 IFmi% < ptr%!valid_minutes% :=FALSE
=TRUE
:
DEFPROCcheck_date_and_time(U%)
 LOCAL t$,Y%,y%,e%,error%
 REM IFFNcheck_pointer PROCcheck_pointer(alarms%(1),"PROCcheck_date_and_time(1)")
 
 IFNOT(FNalarm_gone_off(alarms%(1))) ENDPROC
 
 REM ensure that all of the icons are clear ... (#2 isn't used)
 PROCset_string(m_wind%,ic_message_at1%,"")
 PROCset_string(m_wind%,ic_message_at2%,"")
 PROCset_string(m_wind%,ic_message_msg1%,"")
 PROCset_string(m_wind%,ic_message_msg2%,"")
 PROCset_string(m_wind%,ic_message_msg3%,"")
 PROCset_string(m_wind%,ic_message_msg4%,"")
 PROCset_string(m_wind%,ic_message_msg5%,"")
 PROCset_string(m_wind%,ic_message_msg6%,"")
 alarm_detected%=TRUE
 alarm_counter%=global_timeout%
 IF alarm_applalarm%?alarms%(1) PROCbroadcast_appl_alarm:ENDPROC
 IF alarm_taskalarm%?alarms%(1) PROCactivate_task_alarm:ENDPROC
 Y%=92
 PROCalarm_rec_to_fivebt(alarms%(1),buffers%)
 t$=FNconverttime(buffers%,FNmsg_0("ActvA1"))
 PROCset_string(m_wind%,ic_message_at1%,t$)
 REM ***** buffers% shouldn't have been altered since three lines above
 t$=FNconverttime(buffers%,FNmsg_0("ActvA6"))
 PROCset_string(m_wind%,ic_message_at2%,t$)

 CASE alarm_repeating%?alarms%(1) OF
 WHEN 0:y%=ic_message_msg1%
 WHEN 1:e%=FNheap_claim("ALRM",alarm_SIZE%)
        IFe%=0 PROCout_of_memory
        PROCcopyalarm(alarms%(1),e%)
        PROCincrement_alarm(e%,e%?alarm_repeat_rate%,e%?alarm_repeat_mult%,error%)
        IFerror% THEN
         PROCset_string(m_wind%,ic_message_msg1%,FNmsg_0("OkayC7"))
         PROCset_string(m_wind%,ic_message_msg2%,FNmsg_0("OkayC8"))
         PROCset_string(m_wind%,ic_message_msg3%,"")
        ELSE
         PROCalarm_rec_to_fivebt(e%,buffers%)
         t$=FNconverttime(buffers%,FNmsg_0("ActvA2"))
         PROCset_string(m_wind%,ic_message_msg1%,t$)
         t$=FNconverttime(buffers%,FNmsg_0("ActvA6"))
         PROCset_string(m_wind%,ic_message_msg2%,t$)
         PROCset_string(m_wind%,ic_message_msg3%,"")
        ENDIF
        Y%+=120
        y%=ic_message_msg4%
        PROCheap_free("ALRM",e%)
        e%=0
 WHEN 2:e%=FNheap_claim("ALRM",alarm_SIZE%)
        IFe%=0 PROCout_of_memory
        PROCcopyalarm(alarms%(1),e%)
        PROCincrement_special_alarm(e%,e%?alarm_repeat_rate%,e%?alarm_repeat_mult%,error%)
        IFerror% THEN
         PROCset_string(m_wind%,ic_message_msg1%,FNmsg_0("OkayC7"))
         PROCset_string(m_wind%,ic_message_msg2%,FNmsg_0("OkayC8"))
         PROCset_string(m_wind%,ic_message_msg3%,"")
        ELSE
         PROCalarm_rec_to_fivebt(e%,buffers%)
         t$=FNconverttime(buffers%,FNmsg_0("ActvA2"))
         PROCset_string(m_wind%,ic_message_msg1%,t$)
         t$=FNconverttime(buffers%,FNmsg_0("ActvA6"))
         PROCset_string(m_wind%,ic_message_msg2%,t$)
         PROCset_string(m_wind%,ic_message_msg3%,"")
        ENDIF
        Y%+=120
        y%=ic_message_msg4%
        PROCheap_free("ALRM",e%)
        e%=0
 ENDCASE
 PROCset_string(m_wind%,y%+0,$(alarms%(1)+alarm_line1%))
 PROCset_string(m_wind%,y%+1,$(alarms%(1)+alarm_line2%))
 PROCset_string(m_wind%,y%+2,$(alarms%(1)+alarm_line3%))
 IF $(alarms%(1)+alarm_line3%)<>"" THEN
  Y%+=160
 ELSE
  IF $(alarms%(1)+alarm_line2%)<>"" THEN
   Y%+=120
  ELSE
   IF $(alarms%(1)+alarm_line1%)<>"" THEN Y%+=80
  ENDIF
 ENDIF
 IF U% THEN
  PROCset_title(m_wind%,FNmsg_0("ActvA3"))
 ELSE
  PROCset_title(m_wind%,FNmsg_0("ActvA4"))
 ENDIF
 
 REM allow for accept button and small gap
 Y% +=52+10

 REM delete former accept button and place new
 !Q%  =m_wind%
 Q%!4 =ic_message_accept%
 SYS"XWimp_GetIconState",,Q%
 SYS"XWimp_DeleteIcon",,Q%
 Q%!4 =m_wind%
 Q%!12= -(Y% -10)     : REM Min y
 Q%!20= -(Y% -10 -52) : REM Max y
 SYS"Wimp_CreateIcon",,Q%+4 TO ic_message_accept%

 PROCtell_pinboard(m_wind%)

 REM resize message window according to number of lines shown
 !Q%=m_wind%
 SYS"Wimp_GetWindowState",,Q%
 Q%!8=Q%!16-Y%
 Q%!28=-1
 SYS"Wimp_OpenWindow",,Q%
ENDPROC
:
DEFFNalarm_hit(y%)
 LOCAL p%,i%,q%
 !Q1%=browser%:SYS"Wimp_GetWindowState",,Q1%
 y%-=Q1%!16-Q1%!24-52
 i%=0
 q%=0
 p%=alarm_head%
 WHILE p%
  REM IFFNcheck_pointer PROCcheck_pointer(p%,"FNalarm_hit")
  i%-=48
  IF(y%>i%) AND (y%<i%+48) THEN
   q%=p%
   p%=0
  ELSE
   p%=p%!alarm_next%
  ENDIF
 ENDWHILE
=q%
:
DEFPROCset_repeat_flags(W%,Z%)
 REM W% is true if the user can manipulate the values
 REM Z% is the alarm index
 LOCAL I%,J%,A%,R%,S%
 REM IFFNcheck_pointer PROCcheck_pointer(Z%,"PROCset_repeat_flags")
 CASE Z%?alarm_repeating% OF
 WHEN 0:PROCsetstate(a_wind%,19,0,1<<21)
        PROCsetstate(a_wind%,32,0,1<<21)
        PROCsetstate(a_wind%,33,0,1<<21)
        FOR I%=20 TO 28
         PROCsetstate(a_wind%,I%,1<<22,3<<21)
        NEXT
        FOR I%=34 TO 42
         PROCsetstate(a_wind%,I%,1<<22,3<<21)
        NEXT
        PROCset_string(a_wind%,27,STR$(Z%?alarm_repeat_mult%))
        PROCset_string(a_wind%,35,FNmsg_0("SR"+STR$(FNread_repeat_offset(Z%))+"w"+STR$(FNread_repeat_day(Z%))))
        PROCset_string(a_wind%,38,FNmsg_0("WE"+STR$(FNread_repeat_day(Z%))+"a"+STR$(FNread_repeat_offset(Z%))))
        PROCset_string(a_wind%,41,FNmsg_0("MR"+STR$(Z%?alarm_repeat_mult%)))
 WHEN 1:PROCset(19)
        PROCset(32)
        S%=Z%?alarm_repeat_rate%
        J%=0
        FOR I%=20 TO 25
         IF W% A%=11<<12 ELSE A%=0
         IF S% AND (1<<J%) A%+=1<<21
         PROCsetstate(a_wind%,I%,A%,(3<<21)+(15<<12))
         J%+=1
        NEXT
        FOR I%=26 TO 28
         PROCsetstate(a_wind%,I%,0,3<<21)
        NEXT
        FOR I%=34 TO 42
         PROCsetstate(a_wind%,I%,1<<22,3<<21)
        NEXT
        PROCset_string(a_wind%,27,STR$(Z%?alarm_repeat_mult%))
 WHEN 2:PROCset(19)
        PROCset(33)
        FOR I%=20 TO 28
         PROCsetstate(a_wind%,I%,1<<22,3<<21)
        NEXT
        FOR I%=34 TO 42
         PROCsetstate(a_wind%,I%,0,3<<21)
        NEXT
        IFZ%?alarm_fvdywk% THEN
         PROCcheck_special_day(Z%)
        ELSE
         PROCset_string(a_wind%,38,FNmsg_0("WE"+STR$(FNread_repeat_day(Z%))+"a"+STR$(FNread_repeat_offset(Z%))))
        ENDIF
        PROCset_string(a_wind%,35,FNmsg_0("SR"+STR$(FNread_repeat_offset(Z%))+"w"+STR$(FNread_repeat_day(Z%))))
        PROCset_string(a_wind%,41,FNmsg_0("MR"+STR$(Z%?alarm_repeat_mult%)))
 ENDCASE
ENDPROC

REM *************************************************************************
REM Alarm time component manipulation
REM *************************************************************************

DEFPROCchange_hour(I%,V%,H%)
 LOCAL error%
 REM IFFNcheck_pointer PROCcheck_pointer(I%,"PROCchange_hour")
 I%!alarm_hours%+=V%
 PROCvalidate_alarm_rec(I%,error%)
 PROCrefresh_alarm_window(H%,I%)
ENDPROC
:
DEFPROCchange_min(I%,V%,H%)
 LOCAL error%
 REM IFFNcheck_pointer PROCcheck_pointer(I%,"PROCchange_min")
 I%!alarm_minutes%+=V%
 PROCvalidate_alarm_rec(I%,error%)
 PROCrefresh_alarm_window(H%,I%)
ENDPROC
:
DEFPROCchange_year(I%,V%,H%)
 LOCAL error%
 REM IFFNcheck_pointer PROCcheck_pointer(I%,"PROCchange_year")
 I%!alarm_year%+=V%
 PROCvalidate_alarm_rec(I%,error%)
 PROCrefresh_alarm_window(H%,I%)
ENDPROC
:
DEFPROCchange_month(I%,V%,H%)
 LOCAL error%
 REM IFFNcheck_pointer PROCcheck_pointer(I%,"PROCchange_month")
 I%!alarm_month%+=V%
 PROCvalidate_alarm_rec(I%,error%)
 PROCrefresh_alarm_window(H%,I%)
ENDPROC
:
DEFPROCchange_date(I%,V%,H%)
 LOCAL error%
 REM IFFNcheck_pointer PROCcheck_pointer(I%,"PROCchange_date")
 I%!alarm_date%+=V%
 PROCvalidate_alarm_rec(I%,error%)
 PROCrefresh_alarm_window(H%,I%)
ENDPROC
:
DEFFNhour(I%)
 REM return the hours from the specified
 REM alarm record as a string formatted by Time10
 REM IFFNcheck_pointer PROCcheck_pointer(I%,"FNtime")
 PROCalarm_rec_to_fivebt(I%,buffers%)
=FNconverttime(buffers%,FNmsg_0("Time10"))
:
DEFFNmin(I%)
 REM return the minutes from the specified
 REM alarm record as a string formatted by Time11
 REM IFFNcheck_pointer PROCcheck_pointer(I%,"FNtime")
 PROCalarm_rec_to_fivebt(I%,buffers%)
=FNconverttime(buffers%,FNmsg_0("Time11"))
:
DEFFNam(I%)
 REM return the am/pm from the specified
 REM alarm record as a string formatted by Time13
 REM IFFNcheck_pointer PROCcheck_pointer(I%,"FNtime")
 PROCalarm_rec_to_fivebt(I%,buffers%)
=FNconverttime(buffers%,FNmsg_0("Time13"))
:
DEFFNtime(I%)
 REM return the hours and minutes from the specified
 REM alarm record as a string formatted by Time01
 REM IFFNcheck_pointer PROCcheck_pointer(I%,"FNtime")
 PROCalarm_rec_to_fivebt(I%,buffers%)
=FNconverttime(buffers%,FNmsg_0("Time01"))
:
DEFFNdate(I%)
 REM return the date from the specified alarm record
 REM as a string formatted by Time02
 REM IFFNcheck_pointer PROCcheck_pointer(I%,"FNdate")
 PROCalarm_rec_to_fivebt(I%,buffers%)
=FNconverttime(buffers%,FNmsg_0("Time02"))
:
DEFFNday(I%)
 REM return the day of the month from the specified alarm record
 REM as a string formatted by Time12
 REM IFFNcheck_pointer PROCcheck_pointer(I%,"FNdate")
 PROCalarm_rec_to_fivebt(I%,buffers%)
=FNconverttime(buffers%,FNmsg_0("Time12"))
:
DEFFNmonth(I%)
 REM return the month from the specified alarm record
 REM as a string formatted by Time03
 REM IFFNcheck_pointer PROCcheck_pointer(I%,"FNmonth")
 PROCalarm_rec_to_fivebt(I%,buffers%)
=FNconverttime(buffers%,FNmsg_0("Time03"))
:
DEFFNdow(I%)
 REM return the day of the week from the specified alarm record
 REM as a string formatted by Time14
 REM IFFNcheck_pointer PROCcheck_pointer(I%,"FNmonth")
 PROCalarm_rec_to_fivebt(I%,buffers%)
=FNconverttime(buffers%,FNmsg_0("Time14"))
:
DEFFNyear(I%)
 REM return the year from the specified alarm record
 REM as a string formatted by Time04
 REM IFFNcheck_pointer PROCcheck_pointer(I%,"FNyear")
 PROCalarm_rec_to_fivebt(I%,buffers%)
=FNconverttime(buffers%,FNmsg_0("Time04"))
