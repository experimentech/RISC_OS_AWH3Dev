REM This source code in this file is licensed to You by Castle Technology
REM Limited ("Castle") and its licensors on contractual terms and conditions
REM ("Licence") which entitle you freely to modify and/or to distribute this
REM source code subject to Your compliance with the terms of the Licence.
REM
REM This source code has been made available to You without any warranties
REM whatsoever. Consequently, Your use, modification and distribution of this
REM source code is entirely at Your own risk and neither Castle, its licensors
REM nor any other person who has contributed to this source code shall be
REM liable to You for any loss or damage which You may suffer as a result of
REM Your use, modification or distribution of this source code.
REM
REM Full details of Your rights and obligations are set out in the Licence.
REM You should have received a copy of the Licence with this source code file.
REM If You have not received a copy, the text of the Licence is available
REM online at www.castle-technology.co.uk/riscosbaselicence.htm
REM
REM > Main

ON ERROR ERROR EXT ERR,LEFT$(REPORT$,240) +" ("+STR$(ERL)+")"
PROCinitialise
SYS"OS_ReadMonotonicTime" TO timex%:timex%+=100

WHILE TRUE
 err% =FALSE
 ON ERROR LOCAL :err% =TRUE
      
 IF err% =TRUE THEN
  ON ERROR :ON ERROR OFF :ERROR ERR,LEFT$(REPORT$,240) +" ("+STR$(ERL)+")"
  PROCerr_report(ERR,REPORT$,%11)
 ELSE 
  SYS"XWimp_PollIdle",0,Q%,timex% TO A%
  CASE A% OF
  WHEN 0    :PROCnudge
  WHEN 1    :PROCredraw_browser
  WHEN 2    :PROCopenwindow
  WHEN 3    :cancel%=TRUE
             PROCclosewindow(!Q%)
  WHEN 5    :IF !Q%=m_wind% THEN
              IF alarm_counter%=0 THENPROCset_timex_for_next_second
              alarm_counter%=global_timeout%
             ENDIF
  WHEN 6    :PROCcheckmouse(!Q%,Q%!4,Q%!8,Q%!12,Q%!16)
  WHEN 7    :PROCdecodedrag
  WHEN 8    :PROCkey(!Q%,Q%!4,Q%!24)
  WHEN 9    :PROCmenuselect(Q%)
  WHEN 17,18:PROCreceive(A%)
  WHEN 19   :PROCacknowledge
  ENDCASE
 ENDIF
ENDWHILE
END

REM *************************************************************************
REM Initialisation
REM *************************************************************************

DEFPROCinitialise
 PROCmsg_init("Alarm:Messages")
 PROCinit_constants
 
 REM This has to be declared here because the increased use
 REM of messages has meant that this block is now use
 REM practically everywhere
 REM Because it is also used for loading templates into (temporarily)
 REM we must make sure that it is big enough for the largest template
 REM we are going to load, hence FNQsize.
 DIM Q% FNQsize
 
 PROCinit_heap_constants
 PROCinit_arrays
 PROCinit_date_and_time
 PROCinit_task
 PROCinit_templates
 PROCinit_globals
 PROCinit_config
 PROCinit_codevar
 PROCinit_timediff
 PROCload_alarms_into_memory(ra$)
ENDPROC
:
DEFPROCinit_date_and_time
 width_am%=0
 width_we%=1
 width_w3%=2
 width_dy%=3
 width_st%=4
 width_mo%=5
 width_m3%=6
 width_tz%=7
 DIM widths%(7)
 ?cur_clock%=3:SYS"OS_Word",14,cur_clock%
 SYS"Territory_ReadCalendarInformation",-1,cur_clock%,Q2%
 widths%(width_am%)=Q2%!16
 widths%(width_we%)=Q2%!20
 widths%(width_w3%)=Q2%!24
 widths%(width_dy%)=Q2%!28
 widths%(width_st%)=Q2%!32
 widths%(width_mo%)=Q2%!36
 widths%(width_m3%)=Q2%!40
 widths%(width_tz%)=Q2%!44
ENDPROC
:
DEFPROCinit_task
 LOCAL E%,length%,s$
 task_id$=FNmsg_0("TaskID")
 REM define the block of messages wanted by Alarm
 Q%!0=2       :REM Message_DataSaveAck
 Q%!4=3       :REM Message_DataLoad
 Q%!8=5       :REM Message_DataOpen
 Q%!12=8      :REM Message_PreQuit
 Q%!16=10     :REM Message_SaveDesktop
 Q%!20=&500   :REM Message_AlarmSet
 Q%!24=&501   :REM Message_AlarmGoneOff
 Q%!28=&502   :REM Message_HelpRequest
 Q%!32=&400C0 :REM Message_MenuWarning
 Q%!36=&400C1 :REM Message_ModeChange
 Q%!40=&400C2 :REM Message_TaskInitialise
 Q%!44=&400C9 :REM Message_MenusDeleted
 Q%!48=&400CF :REM Message_FontChanged
 Q%!52=0
 SYS"Wimp_Initialise",310,&4B534154,task_id$,Q% TO wimpversion%,taskid%
 REM work out whether or not a filename was provided on the command line
 SYS"OS_GetEnv" TO E%
 SYS"OS_ReadArgs","/g,quit/s,/g,/g",E%,Q%,2048
 E%=Q%!12
 s$=""
 IFE% THEN
  REM The filename is present
  length%=!E% AND &FFFF
  E%+=2
  WHILE length%
   s$+=CHR$(?E%)
   E%+=1
   length%-=1
  ENDWHILE
 ENDIF
 IFs$<>"" THENra$=s$

 REM Try loading the browser redraw code
 SYS"OS_File",17,"Alarm:Code" TO t%,,,,I%
 IFt%<>1 PROCok(FNmsg_0("OkayD1"))
 DIM assembler% I%
 SYS"OS_File",16,"Alarm:Code",assembler%,&80000000:REM Use R2 address and flush I cache
ENDPROC
:
DEFPROCinit_heap_constants
 LOCAL ws%
 ws%=0
 REM WARNING!
 REM If you make ANY changes to the following workspace usage,
 REM it must be mirrored in the browser source code
 alarm_next%       =FNws_claim(ws%,4)  :REM ptr to next alarm in this linked list
 alarm_prev%       =FNws_claim(ws%,4)  :REM ptr to previous alarm in list
 alarm_fileptr%    =FNws_claim(ws%,4)  :REM ptr to alarm in data file
 alarm_year%       =FNws_claim(ws%,4)  :REM *local* year for alarm to go off on
 alarm_month%      =FNws_claim(ws%,4)  :REM *local* month for alarm to go off on
 alarm_date%       =FNws_claim(ws%,4)  :REM *local* date for alarm to go off on
 alarm_hours%      =FNws_claim(ws%,4)  :REM *local* hours for alarm to go off on
 alarm_minutes%    =FNws_claim(ws%,4)  :REM *local* minutes for alarm to go off on
 valid_year%       =FNws_claim(ws%,4)  :REM validated *local* year for alarm to go off on
 valid_month%      =FNws_claim(ws%,4)  :REM validated *local* month for alarm to go off on
 valid_date%       =FNws_claim(ws%,4)  :REM validated *local* date for alarm to go off on
 valid_hours%      =FNws_claim(ws%,4)  :REM validated *local* hours for alarm to go off on
 valid_minutes%    =FNws_claim(ws%,4)  :REM validated *local* minutes for alarm to go off on
 alarm_line1%      =FNws_claim(ws%,41) :REM line 1 of the alarm text
 alarm_line2%      =FNws_claim(ws%,41) :REM line 2 of the alarm text
 alarm_line3%      =FNws_claim(ws%,41) :REM line 3 of the alarm text
 alarm_repeating%  =FNws_claim(ws%,1)  :REM is this a repeating alarm?
 alarm_repeat_rate%=FNws_claim(ws%,1)  :REM repeat rate for this alarm
 alarm_repeat_mult%=FNws_claim(ws%,1)  :REM repeat multiplier for this alarm
 alarm_urgent%     =FNws_claim(ws%,1)  :REM is this an urgent alarm?
 alarm_applalarm%  =FNws_claim(ws%,1)  :REM is this an application alarm?
 alarm_taskalarm%  =FNws_claim(ws%,1)  :REM is this a task alarm?
 alarm_fvdywk%     =FNws_claim(ws%,1)  :REM does this alarm fit into a working week?
 alarm_selected%   =FNws_claim(ws%,1)  :REM has this alarm been selected on the viewer?
 alarm_SIZE%       =FNws_claim(ws%,1)

 SYS"OS_ReadMemMapInfo" TO heap_psize%
 SYS"OS_GetEnv" TO ,heap_start%
 heap_size%=0
ENDPROC
:
DEFPROCinit_config
 LOCAL i%,j%
 SYS"OS_Byte",161,&DC TO ,,i%
 IF(i% AND %111)=0 i%=%00001001
 format%        =(i% AND %111)
 alarm_confirm% =((i% AND %1000)<>0)
 alarm_autosave%=((i% AND %10000)<>0)
 fivedayweek%   =((i% AND %100000)<>0)
 silent_alarm%  =((i% AND %1000000)<>0)
 $Q1%=FNread_system_string("Alarm$Options","")
 REM format is -timeout value -weekwork days -format string
 SYS"XOS_ReadArgs","timeout/k,weekwork/k,format/k",Q1%,Q%,2048 TO ;i%
 IF(i% AND 1) THEN !Q%=0:Q%!4=0:Q%!8=0

 REM Timeout
 IFQ%!0 THEN
  global_timeout%=VAL(FNrtoz(!Q%))
 ELSE
  global_timeout%=10
 ENDIF

 REM Working week
 IFQ%!4 THEN
  global_weekwork%=VAL(FNrtoz(Q%!4))
 ELSE
  ?cur_clock%=3:SYS"OS_Word",14,cur_clock%
  SYS"Territory_ReadCalendarInformation",-1,cur_clock%,Q2%
  global_weekwork%=0
  FORi%=1 TO 7
   IFi%>=Q2%!0 AND i%<=Q2%!4 global_weekwork%+=(1<<(i%-1))
  NEXT
 ENDIF

 REM User format
 IFQ%!8 THEN
  PROCset_string(setup%,ic_setup_user_string%,FNrtoz(Q%!8))
 ELSE
  PROCset_string(setup%,ic_setup_user_string%,"%z12:%mi:%se %pm. %zdy/%zmn/%yr")
 ENDIF

 REM Timeout
 IFglobal_timeout%=-1 THEN
  PROCset_string(setup%,ic_setup_beep_time%,"10")
  PROCsetstate(setup%,ic_setup_cont_beep%,1<<21,1<<21)
  PROCsetstate(setup%,ic_setup_beep_off%,0,1<<21)
 ELSE
  PROCset_string(setup%,ic_setup_beep_time%,STR$(global_timeout%))
  PROCsetstate(setup%,ic_setup_cont_beep%,0,1<<21)
  PROCsetstate(setup%,ic_setup_beep_off%,1<<21,1<<21)
 ENDIF
 alarm_counter%=global_timeout%

 REM Working week
 j%=global_weekwork%
 FORi%=0 TO 6
  IF(j% AND 1) THEN
   PROCsetstate(setup%,ic_setup_sun%+i%,1<<21,1<<21)
  ELSE
   PROCsetstate(setup%,ic_setup_sun%+i%,0,1<<21)
  ENDIF
  j%=j%>>1
 NEXT

 REM User format
 userformat$=FNread_string(setup%,ic_setup_user_string%)
 PROCset_format(format%)
ENDPROC
:
DEFPROCinit_globals
 LOCAL f%
 SYS"OS_Byte",161,&1C TO ,,f%
 IF(f% AND 2)=0 THEN
  REM CMOS has turned DragASprite off
  save_start%=-1
  save_stop%=-1
 ELSE
  REM Use DragASprite if available
  SYS"XOS_SWINumberFromString",,"DragASprite_Start" TO save_start%;f%
  IF(f% AND 1) save_start%=-1
  SYS"XOS_SWINumberFromString",,"DragASprite_Stop" TO save_stop%;f%
  IF(f% AND 1) save_stop%=-1
 ENDIF
 menuhand%=-1
 current_action%=-1
 cancel%=FALSE
 modified%=FALSE
 autosaved%=FALSE
 doing_deleting%=FALSE
 doing_shutdown%=0
 ictime%=-1
 alarm_head%=0
 alarm_count%=0
 alarm_set%=FALSE
 user_alarm_set%=FALSE
 alarm_original_pointer%=0
 alarm_warned%=FALSE
 timex%=0
 cur_textlen% =0
 cur_fonty% =-1
 cur_format$ =""
 spr_area% =0
ENDPROC
:
DEFPROCinit_codevar
 LOCAL len%,R%,P%,free_code%,buffer%,end_code%
 SYS"XOS_ReadVarVal","Alarm$Free",0,-1,0 TO ,,len%
 IF len% < 0 THEN
  REM Already defined, don't recreate it
 ELSE
  FOR R% =0 TO 2 STEP 2
  P% =Q%
  [OPT R%
  .free_code%
   MOV pc,r14 ;no write
   STMFD r13!,{r14}
 
   MVN r0,#0 ;=-1
   MVN r1,#0 ;=-1
   SWI "XWimp_SlotSize"
 
   MOV r0,r2
   ADR r1,buffer%
   MOV r2,#16
   SWI "XOS_ConvertFileSize"
 
   SUB r2,r1,r0 ;len =term -buf start
   LDMFD r13!,{pc}
  .buffer%
   EQUS STRING$(16,"*")
   ALIGN
  .end_code%
  ]
  NEXT
  SYS"OS_SetVarVal","Alarm$Free",free_code%,end_code%-free_code%,0,16
ENDIF  
ENDPROC
:
DEFPROCinit_templates
 LOCAL ind%

 REM Readability of icon numbers
 ic_warning_discard%=2
 ic_warning_save%=3

 ic_message_at1%=0
 ic_message_at2%=1
 ic_message_gap%=2
 ic_message_msg1%=3 : REM Next 6 in order, increments of 1
 ic_message_msg2%=4
 ic_message_msg3%=5
 ic_message_msg4%=6
 ic_message_msg5%=7
 ic_message_msg6%=8
 ic_message_accept%=9

 ic_setup_silent%=0
 ic_setup_working_week%=1
 ic_setup_cont_beep%=11
 ic_setup_beep_off%=15
 ic_setup_beep_time%=2
 ic_setup_seconds_label%=38
 ic_setup_auto_database%=14
 ic_setup_confirm_del%=13
 ic_setup_format_label%=4
 ic_setup_format_frame%=3
 ic_setup_ok%=5
 ic_setup_cancel%=6
 ic_setup_user_string%=30
 ic_setup_analogue_ws%=25 : REM Next 5 in order, increments of 1
 ic_setup_analogue_wos%=26
 ic_setup_hh_mm%=27
 ic_setup_hh_mm_ss%=28
 ic_setup_user_def%=29
 ic_setup_sun%=31 : REM Next 7 in order, increments of 1
 ic_setup_mon%=32
 ic_setup_tue%=33
 ic_setup_wed%=34
 ic_setup_thu%=35
 ic_setup_fri%=36
 ic_setup_sat%=37

 ic_save_icon%=3
 ic_save_name%=2
 ic_save_ok%=0

 ic_info_version%=3

 ic_deleting_msg1%=0
 ic_deleting_msg2%=3
 ic_deleting_delete%=1
 ic_deleting_keep%=2

 ic_alarm_year_delta%=51
 ic_alarm_year_label%=57
 ic_alarm_day_delta%=52
 ic_alarm_day_label%=56
 ic_alarm_hour_delta%=50
 ic_alarm_hour_label%=55
 ic_alarm_min_delta%=49
 ic_alarm_min_label%=54
 ic_alarm_dow_label%=46
 ic_alarm_ampm_label%=48
 ic_alarm_cur_year%=2
 ic_alarm_cur_mon%=47
 ic_alarm_cur_day%=7
 ic_alarm_cur_hour%=11
 ic_alarm_cur_min%=14
 ic_alarm_msg_label%=31
 ic_alarm_line1%=16
 ic_alarm_line2%=17
 ic_alarm_line3%=18
 ic_alarm_urgent%=5
 ic_alarm_task%=29
 ic_alarm_wweek%=30
 ic_alarm_repeat%=19
 ic_alarm_every%=32
 ic_alarm_every_many%=27
 ic_alarm_every_mins%=20
 ic_alarm_every_hours%=21
 ic_alarm_every_days%=22
 ic_alarm_every_weeks%=23
 ic_alarm_every_months%=24
 ic_alarm_every_years%=25
 ic_alarm_onthe%=33
 ic_alarm_onthe_rep_day%=35
 ic_alarm_onthe_day%=38
 ic_alarm_onthe_rep_month%=41
 ic_alarm_onthe_month_label%=44
 ic_alarm_ofevery_label%=43
 ic_alarm_ok_hi%=45
 ic_alarm_cancel_hi%=60
 ic_alarm_ok_lo%=58
 ic_alarm_cancel_lo%=59
 ic_alarm_adj_yu%=13
 ic_alarm_adj_yd%=12
 ic_alarm_adj_mu%=10
 ic_alarm_adj_md%=9
 ic_alarm_adj_du%=8
 ic_alarm_adj_dd%=6
 ic_alarm_adj_hu%=0
 ic_alarm_adj_hd%=1
 ic_alarm_adj_minu%=3
 ic_alarm_adj_mind%=4
 ic_alarm_adj_repu%=28
 ic_alarm_adj_repd%=26
 ic_alarm_adj_onthe_drepu%=36
 ic_alarm_adj_onthe_drepd%=34
 ic_alarm_adj_onthe_du%=39
 ic_alarm_adj_onthe_dd%=37
 ic_alarm_adj_onthe_mrepu%=42
 ic_alarm_adj_onthe_mrepd%=40
 
 PROCopen_templates
 
 a_wind% =FNload_template("alarm")
 m_wind% =FNload_template("message")
 setup% =FNload_template("setup")
 info% =FNload_template("info")
 browser% =FNload_template("browser")
 browse1% =FNload_template("browse1")
 warning% =FNload_template("warning")
 deleting% =FNload_template("deleting")
 slow% =FNload_template("slow")
 save% =FNload_template("save")

 SYS"Wimp_CloseTemplate"

 !Q% =save%
 Q%!4 =ic_save_name%
 SYS"Wimp_GetIconState",,Q%
 filename%=Q%!28
 
 PROCset_string(info%,ic_info_version%,FNmsg_0("_Version"))

 !Q%=browser%:Q%!4=2:SYS"Wimp_GetIconState",,Q%:SYS"Wimp_DeleteIcon",,Q%
 assembler%!4=Q%!16:REM right hand end of day icon
 !Q%=browser%:Q%!4=0:SYS"Wimp_GetIconState",,Q%:SYS"Wimp_DeleteIcon",,Q%
 assembler%!8=Q%!16:REM right hand end of date icon
 !Q%=browser%:Q%!4=1:SYS"Wimp_GetIconState",,Q%:SYS"Wimp_DeleteIcon",,Q%
 assembler%!12=Q%!16:REM right hand end of time icon
ENDPROC
:
DEFPROCinit_constants
 LOCAL I%,J%
 def_fn$="Choices:Alarm.Alarms"
 ra$=def_fn$
 setting%=0
 changing%=2
 mess1%=16
 mess2%=17
 mess3%=18
 errok%=1
 errfatal%=3
ENDPROC
:
DEFPROCinit_arrays
 LOCAL I%,t%
 REM Various alarm pointers are used:
 REM 0 : alarm currently being modified by the user
 REM 1 : alarm currently being monitored by !Alarm
 REM 2 : general scratch pointer
 DIM alarms%(2)
 DIM sin(59),cos(59)
 DIM Q1% 1024
 DIM Q2% 1024
 DIM cur_clock% 6
 DIM deftime% 5
 DIM buffers% 64
 DIM menufree% 256:menuend%=menufree%+256
 DIM validation_buffer% 64
 DIM menu_ws% 256:menu_curws%=menu_ws%:menu_maxws%=256

 REM Need to claim one block of an alarm record
 REM for the clock setting
 DIM t% alarm_SIZE%:alarms%(2)=t%

 REM Build some angles lookup tables
 FOR I%=0 TO 59
  sin(I%)=SINRAD(I%*6)
  cos(I%)=COSRAD(I%*6)
 NEXT
ENDPROC
:
REM *************************************************************************
REM Poll code handlers
REM *************************************************************************

DEFPROCnudge
 LOCAL U%
 PROCgettime
 PROCredraw_icon(-1,ictime%)
 IF alarm_set% THEN
  REM IFFNcheck_pointer PROCcheck_pointer(alarms%(1),"PROCnudge(1)")
  U%=alarm_urgent%?alarms%(1)
  IF NOT(alarm_detected%) PROCcheck_date_and_time(U%)
  IF FNalarm_sounding(U%) THEN
   VDU 7
   IF alarm_counter%>0 alarm_counter%-=1
  ENDIF
 ENDIF
 IF secs_used% OR FNalarm_sounding(U%) THEN
  PROCset_timex_for_next_second
 ELSE
  SYS"OS_ReadMonotonicTime" TO timeslip%
  U%=VAL(FNconverttime(cur_clock%,"%SE"))
  timeslip%-=timex%
  timex%+=timeslip% - (timeslip% MOD 100) + 100*(60-U%)
 ENDIF
ENDPROC
:
DEFPROCredraw_browser
 LOCAL A%,B%,C%,D%,more%
 SYS"Wimp_RedrawWindow",,Q% TO more%
 A%=more%
 B%=Q%
 C%=alarm_head%
 D%=msg_desc%
 CALLassembler%
ENDPROC
:
DEFPROCopenwindow
REM task_buff%  = original open window block
REM Q1% = pane window state block
REM Q2% = edit window state block
IF!Q%=browser% THEN
 REM get current state of pane window
 !Q1%=browse1%:SYS"Wimp_GetWindowState",,Q1%
 REM if edit window is above pane window, open the
 REM edit window behind it
 IF Q1%!28 = Q%!28 Q%!28=browse1%
 REM get current state of edit window
 !Q2%=browser%:SYS"Wimp_GetWindowState",,Q2%
 REM if edit window is moving in the direction of
 REM the pane window, open the pane first
 SYS"Wimp_OpenWindow",,Q%:REM open window & get updated coordinates
 IF Q%!28=-2 THEN
  !Q2%=browser%:SYS"Wimp_GetWindowState",,Q2%
  Q%!28=Q2%!28
 ENDIF
 PROCopen_top_pane(Q%,browse1%)
ELSE
 IF!Q%<>browse1% SYS"Wimp_OpenWindow",,Q%
ENDIF
ENDPROC
:
DEFPROCclosewindow(H%)
 LOCAL error%
 !Q%=H%:PROCtell_pinboard(H%)
 SYS"Wimp_CloseWindow",,Q%
 IF H%=browser% !Q%=browse1%:SYS"Wimp_CloseWindow",,Q%
 IF H%=a_wind% THEN
  REM following bit relies on the fact that
  REM alarm_original_pointer% and alarms%(1) are pointing
  REM to the correct records!
  IF alarm_original_pointer%<>0 AND alarms%(1)<>0 THEN
   REM IFFNcheck_pointer PROCcheck_pointer(alarm_original_pointer%,"PROCclosewindow(alarm_original_pointer%)")
   REM IFFNcheck_pointer PROCcheck_pointer(alarms%(1),"PROCclosewindow(1)")
   IF (alarm_original_pointer%=alarms%(1)) AND NOT(cancel%) THEN
    !Q%=m_wind%
    SYS"Wimp_CloseWindow",,Q%
   ENDIF
  ENDIF
  IF current_action%<>-1 PROCcancel_current_action
 ENDIF
 IF H%=m_wind% THEN
  REM IFFNcheck_pointer PROCcheck_pointer(alarms%(1),"PROCclosewindow(1)")
  REM following bit relies on the fact that
  REM alarm_original_pointer% and alarms%(1) are pointing
  REM to the correct records!
  IF alarm_original_pointer%<>0 AND alarms%(1)<>0 THEN
   REM IFFNcheck_pointer PROCcheck_pointer(alarm_original_pointer%,"PROCclosewindow(alarm_original_pointer%)")
   IF (alarm_original_pointer%=alarms%(1)) AND current_action%<>setting% THEN
    !Q%=a_wind%
    SYS"Wimp_CloseWindow",,Q%
    PROCcancel_current_action
   ENDIF
  ENDIF
  IF alarm_repeating%?alarms%(1) THEN
   PROCremove_alarm_from_list(alarms%(1),FALSE)
   PROCsave_repeating_alarm(alarms%(1),alarm_repeat_rate%?alarms%(1),alarm_repeat_mult%?alarms%(1),error%)
  ELSE
   PROCremove_alarm_from_list(alarms%(1),TRUE)
   PROCheap_free("ALRM",alarms%(1))
   alarms%(1)=0
   PROCmodified_alarm_database
  ENDIF
  alarm_warned%=FALSE
  PROCreset_alarm_status
  IFerror% PROCok(FNmsg_0("OkayC3"))
 ENDIF
 cancel%=FALSE
ENDPROC
:
DEFPROCcheckmouse(X%,Y%,B%,H%,I%)
 CASE B% OF
  WHEN&400: IFH%=browser% PROCcheck_browser(B%,Y%)
  WHEN&100: IFH%=browser% PROCcheck_browser(B%,Y%)
  WHEN &40: IFH%=save% PROCdragicon(X%,Y%,H%,I%)
  WHEN   2: REM Menu
            CASE H% OF
             WHEN       -2: PROCdomenu(0,X%-64,316)
             WHEN browser%: PROCdomenu(1,X%-64,Y%)
             WHEN browse1%: PROCdomenu(1,X%-64,Y%)
             WHEN  m_wind%: $deftime%="1"
                            PROCdomenu(2,X%-64,Y%)
             WHEN  a_wind%: PROCdomenu(3,X%-64,Y%)
            ENDCASE
  WHEN   4: REM Select
            CASE H% OF
             WHEN       -2: IFcurrent_action%=setting% PROCfront(a_wind%):PROCok(FNmsg_0("OkayB6"))
                            IFcurrent_action%=changing% PROCfront(a_wind%):PROCok(FNmsg_0("OkayB8"))
                            PROCuser_set_an_alarm
             WHEN browser%: PROCcheck_browser(B%,Y%)
             WHEN  a_wind%: PROCcheck_alarm_window(1,-1,H%,I%)
             WHEN  m_wind%: IF I%=ic_message_accept% THEN PROCclosewindow(m_wind%)
             WHEN   setup%: PROCcheck_setup_window(1,-1,I%)
             WHEN warning%: SYS"Wimp_CreateMenu",,-1
                            SYS"Wimp_SetCaretPosition",-1,-1
                            REM Quit
                            IFI%=ic_warning_discard% THEN
                             modified%=FALSE
                             IFdoing_shutdown%=2 THEN
                              SYS"Wimp_ProcessKey",&1FC
                             ELSE
                              PROCshutdown
                             ENDIF
                            ENDIF
                            REM Save and quit
                            IFI%=ic_warning_save% THEN
                             IFdoing_shutdown%=2 THEN
                              REM global shutdown asked for
                              doing_shutdown%=3
                             ELSE
                              doing_shutdown%=1
                             ENDIF
                             PROCsave_setup(&AE9,0,4,ra$)
                             SYS"Wimp_CreateMenu",,save%,X%,Y%
                            ENDIF
             WHENdeleting%: SYS"Wimp_CreateMenu",,-1
                            IFI%=ic_deleting_delete% PROCdelete_alarms
             WHEN    save%: IF I%=ic_save_ok% THEN
                             PROCsavefile(TRUE,$filename%,FALSE)
                             ENDPROC
                            ENDIF
            ENDCASE
  WHEN   1: REM Adjust
            CASE H% OF
             WHEN       -2: PROCunset_alarms_selection:PROCopen_browser
             WHEN browser%: PROCcheck_browser(B%,Y%)
             WHEN  a_wind%: PROCcheck_alarm_window(-1,1,H%,I%)
             WHEN   setup%: PROCcheck_setup_window(-1,1,I%)
             WHEN    save%: IF I%=ic_save_ok% THEN
                             PROCsavefile(TRUE,$filename%,TRUE)
                             ENDPROC
                            ENDIF
            ENDCASE
 ENDCASE
ENDPROC
:
DEFPROCdecodedrag
 LOCAL h%,i%,mx%,my%
 IFsave_stop%<>-1 SYS save_stop%
 SYS"Wimp_GetPointerInfo",,Q%
 mx%=!Q%
 my%=Q%!4
 h%=Q%!12
 i%=Q%!16
 IF h%=save% ENDPROC
 PROCdrag_savefile(h%,i%,mx%,my%)
ENDPROC
:
DEFPROCmenuselect(menus%)
 LOCAL C%,D%,H%,got_adjust%,taskname$
 SYS"Wimp_GetPointerInfo",,buffers%
 IF (buffers%!8 AND 1) AND menuhand%<>2 got_adjust%=TRUE ELSE got_adjust%=FALSE
 CASE menuhand% OF
 WHEN 0: REM icon menu
         CASE !menus% OF
          WHEN 1:PROCunset_alarms_selection:PROCopen_browser
          WHEN 2:PROCopen_setup
          WHEN 3:REM Known to exist (to unshade the menu), check it's not running
                 C% = 0
                 REPEAT
                  SYS"TaskManager_EnumerateTasks",C%,Q%,16 TO C%
                  REM Can't use FNrtoz because Message_TaskInitialise permits ctrl termination
                  IF C% >= 0 THEN SYS"XOS_GenerateError",Q%!4 TO taskname$
                 UNTIL (taskname$ = "Time Setup") OR (C% < 0)
                 IF C% < 0 THEN
                  REM Not already running, so run it
                  SYS"XWimp_StartTask","/BootResources:Configure.!TimeSetup"
                 ELSE
                  REM Make it pop to the top
                  H%   = Q%!0
                  Q%!0 = 20
                  Q%!12= 0
                  Q%!16= &50D83:REM OpenConfigWindow
                  SYS"XWimp_SendMessage",17,Q%,H%
                 ENDIF
          WHEN 4:PROCshutdown
         ENDCASE
 WHEN 1: REM browser menu
         CASE !menus% OF
          WHEN 0:PROCuser_set_an_alarm
          WHEN 1:CASE menus%!4 OF
                 WHEN 0: C%=alarm_head%
                         WHILE C%
                          REM IFFNcheck_pointer PROCcheck_pointer(C%,"PROCmenuselect(C%,0)")
                          IFC%?alarm_selected% THEN
                           C%?alarm_selected%=0
                           PROCredraw_alarm(C%)
                           PROCichang(C%)
                           C%=0
                          ELSE
                           C%=C%!alarm_next%
                          ENDIF
                         ENDWHILE
                 WHEN 1: IFalarm_confirm% THEN
                          IFFNalarm_selection_count=1 THEN
                           PROCset_string(deleting%,ic_deleting_msg2%,FNmsg_0("BrwsT3"))
                          ELSE
                           PROCset_string(deleting%,ic_deleting_msg2%,FNmsg_0("BrwsT4"))
                          ENDIF
                          doing_deleting%=TRUE
                          !Q%=deleting%:SYS"Wimp_GetWindowState",,Q%
                          C%=(scrx1%-(Q%!12-Q%!4)) DIV 2
                          D%=(scry1%-(Q%!8-Q%!16)) DIV 2
                          SYS"Wimp_CreateMenu",,deleting%,C%,D%
                          got_adjust%=FALSE
                         ELSE
                          PROCdelete_alarms
                         ENDIF
                 WHEN 2: REM copy alarms ...
                         SYS"Hourglass_On"
                         C%=alarm_head%
                         WHILE C%
                          REM IFFNcheck_pointer PROCcheck_pointer(C%,"PROCmenuselect(C%,2)")
                          IFC%?alarm_selected% THEN
                           C%?alarm_selected%=0
                           D%=FNheap_claim("ALRM",alarm_SIZE%)
                           IFD%=0 PROCout_of_memory
                           PROCcopyalarm(C%,D%)
                           PROCsave_alarm(D%)
                           C%=alarm_head%:REM start at the beginning again
                          ELSE
                           C%=C%!alarm_next%
                          ENDIF
                         ENDWHILE
                         alarm_warned%=FALSE
                         PROCunset_alarms_selection:REM neat way for forcing a redraw
                         SYS"Hourglass_Off"
                 ENDCASE
          WHEN 2:SYS"Hourglass_On":PROCselect_all_alarms:SYS"Hourglass_Off"
          WHEN 3:PROCunset_alarms_selection
          WHEN 5:REM since <Alarm$Dir>.Alarms is the default
                 REM we can safely save the alarms away
                 PROCsave_alarms_to_disc(ra$,FALSE,TRUE,TRUE)
                 PROCunset_alarms_selection
                 PROCopen_browser
         ENDCASE
 WHEN 2: REM alarm message menu
         CASE !menus% OF
          WHEN 0:PROCclosewindow(m_wind%)
          WHEN 1:REM IFFNcheck_pointer PROCcheck_pointer(alarms%(1),"PROCmenuselect(alarms%(1))")
                 alarm_repeating%?alarms%(1)=0:PROCclosewindow(m_wind%)
          WHEN 2:CASE menus%!4 OF
                 WHEN 0:PROCdefer(1)
                 WHEN 1:PROCdefer(2)
                 WHEN 2:PROCdefer(4)
                 WHEN 3:PROCdefer(8)
                 WHEN 4:PROCdefer(16)
                 WHEN 5:PROCdefer(32)
                 ENDCASE
         ENDCASE
 WHEN 3: REM alarm find menu
         C%=alarms%(0):REM pointer to current alarm
         CASE !menus% OF
         WHEN 0:PROCread_prev_alarm(C%)
                PROCichang(C%)
         WHEN 1:PROCread_next_alarm(C%)
                PROCichang(C%)
         ENDCASE
 ENDCASE
 
 IF got_adjust% PROCdomenu(menuhand%,menux%,menuy%)
ENDPROC
:
DEFPROCreceive(A%)
 LOCAL task_handle%,my_ref%,size%,type%,name$,q20%,q24%,q28%,q32%
 CASE Q%!16 OF
 WHEN 0     :PROCshutdown
 WHEN 2     :task_handle%=Q%!4
             my_ref%=Q%!8
             q20%=Q%!20
             q24%=Q%!24
             q28%=Q%!28
             q32%=Q%!32
             size%=Q%!36
             type%=Q%!40
             name$=FNrtoz(Q%+44)
             PROCsavefile((size%<>-1),name$,FALSE)
             PROCtransfer_reply(3,task_handle%,my_ref%,size%,type%,name$,q20%,q24%,q28%,q32%)
 WHEN 3     :task_handle%=Q%!4
             my_ref%=Q%!8
             q20%=Q%!20
             q24%=Q%!24
             q28%=Q%!28
             q32%=Q%!32
             size%=Q%!36
             type%=Q%!40
             name$=FNrtoz(Q%+44)
             IF Q%!20=a_wind% THEN
              PROCset_task_alarm_string
              PROCtransfer_reply(4,task_handle%,my_ref%,size%,type%,name$,q20%,q24%,q28%,q32%)
             ELSE
              IF (Q%!20=-2 OR Q%!20=browser%) AND type%=&AE9 THEN
               PROCload_alarms_into_memory(name$)
               PROCtransfer_reply(4,task_handle%,my_ref%,size%,type%,name$,q20%,q24%,q28%,q32%)
              ENDIF
             ENDIF
 WHEN 5     :IF Q%!40=&AE9 THEN
              task_handle%=Q%!4
              my_ref%=Q%!8
              q20%=Q%!20
              q24%=Q%!24
              q28%=Q%!28
              q32%=Q%!32
              size%=Q%!36
              type%=Q%!40
              name$=FNrtoz(Q%+44)
              PROCtransfer_reply(4,task_handle%,my_ref%,size%,type%,name$,q20%,q24%,q28%,q32%)
              PROCload_alarms_into_memory(name$)
             ENDIF
 WHEN 8     :IFmodified% THEN
              IF!Q%<>20 THEN
               IF(Q%!20 AND 1)=0 doing_shutdown%=2
              ELSE
               doing_shutdown%=2
              ENDIF
              Q%!12=Q%!8
              SYS"Wimp_SendMessage",19,Q%,Q%!4
              !Q%=warning%:SYS"Wimp_GetWindowState",,Q%
              C%=(scrx1%-(Q%!12-Q%!4)) DIV 2
              D%=(scry1%-(Q%!8-Q%!16)) DIV 2
              SYS"Wimp_CreateMenu",,warning%,C%,D%
              SYS"Wimp_SetCaretPosition",warning%,-1,,,1<<25
             ENDIF
 WHEN 10    :PROCsave_desktop_state
 WHEN &500  :PROCprocess_appl_alarm(A%)
 WHEN &502  :PROCdetermine_help
 WHEN &400C0:CASE Q%!32 OF
              WHEN 1: CASE Q%!36 OF
                      WHEN 3: PROCsave_setup(&FFF,0,1,FNmsg_0("FN1"))
                      WHEN 4: PROCsave_setup(&AE9,0,2,FNmsg_0("FN1"))
                      ENDCASE
              WHEN 4: PROCsave_setup(&FFF,0,3,FNmsg_0("FN2"))
              WHEN 5: PROCsave_setup(&AE9,0,4,ra$)
             ENDCASE
             SYS"Wimp_CreateSubMenu",,Q%!20,Q%!24,Q%!28
 WHEN &400C1,&400CF :cur_format$ ="":PROCgettime
 WHEN &400C2:IFQ%!4<>taskid% AND FNrtoz(Q%+28)=task_id$ THEN
              Q%!12=0:Q%!16=0:!Q%=20
              SYS"Wimp_SendMessage",17,Q%,Q%!4
              PROCok(FNmsg_0("OkayB9"))
             ENDIF
 WHEN &400C9:IFQ%!20=deleting% THEN
              doing_deleting%=FALSE
             ENDIF
             IFFNalarm_selection_count=1 AND NOT(doing_deleting%) AND doing_shutdown%=0 THEN
              PROCunset_alarms_selection
             ENDIF
             IFQ%!20=save% doing_shutdown%=0
             IFQ%!20=warning% AND doing_shutdown%<>3 AND doing_shutdown%<>1 THEN
              REM 1 or 3 means that we have moved to the save dbox
              doing_shutdown%=0
             ENDIF
 ENDCASE
ENDPROC
:
DEFPROCacknowledge
 LOCAL error%
 IF Q%!16=&501 AND Q%!12=0 THEN
  REM IFFNcheck_pointer PROCcheck_pointer(alarms%(1),"PROCacknowledge(1)")
  PROCremove_alarm_from_list(alarms%(1),FALSE)
  PROCread_date_and_time(alarms%(1))
  PROCsave_repeating_alarm(alarms%(1),1,1,error%)
  IFerror% PROCok(FNmsg_0("OkayC5"))
  alarm_warned%=FALSE
  PROCreset_alarm_status
  PROCok(FNmsg_1("OkayA1",$(alarms%(1)+alarm_line1%)))
 ENDIF
ENDPROC

REM *************************************************************************
REM User message decoders
REM *************************************************************************

DEFPROCtransfer_reply(type%,handle%,ref%,size%,filetype%,name$,q20%,q24%,q28%,q32%)
 !Q%=(48+LENname$)ANDNOT3
 Q%!12=ref%
 Q%!16=type%
 Q%!20=q20%
 Q%!24=q24%
 Q%!28=q28%
 Q%!32=q32%
 Q%!36=size%
 Q%!40=filetype%
 $(Q%+44)=name$+CHR$0
 SYS"Wimp_SendMessage",17,Q%,handle%
ENDPROC
:
DEFPROCshutdown
 LOCAL C%,D%
 IFmodified% THEN
  !Q%=warning%:SYS"Wimp_GetWindowState",,Q%
  C%=(scrx1%-(Q%!12-Q%!4)) DIV 2
  D%=(scry1%-(Q%!8-Q%!16)) DIV 2
  SYS"Wimp_CreateMenu",,warning%,C%,D%
  SYS"Wimp_SetCaretPosition",warning%,-1,,,1<<25
  ENDPROC
 ENDIF
 PROCmsg_end
 REM Delete the code variable
 SYS"XOS_SetVarVal","Alarm$Free",,-1,0,16
 SYS"Wimp_CloseDown"
 END
ENDPROC
:
DEFPROCsave_desktop_state
 LOCAL I%,s$
 LOCAL ERROR
 ON ERROR LOCAL Q%!12=Q%!8:SYS"Wimp_SendMessage",19,Q%,Q%!4:ENDPROC
 I%=Q%!20
 BPUT#I%,FNbuild_alarm_options
 BPUT#I%,"Run "+FNread_system_string("Alarm$Dir","");
 IF FNupper(ra$)=FNupper(def_fn$) THEN BPUT#I%,10 ELSE BPUT#I%," "+ra$:REM Append alarms file location if non default
ENDPROC
:
DEFPROCdetermine_help
 LOCAL additional_help$,v%
 additional_help$=""
 IF Q%!36<-1 ENDPROC
 CASE Q%!32 OF
 WHEN -2: PROCh("AlarmH2")
 WHEN browser%,browse1%: PROCh("AlarmHA")
 WHEN  setup%:REM knock out the textual icons that we don't want to help on
              IF Q%!36=ic_setup_seconds_label% THEN Q%!36=-1
              IF Q%!36=ic_setup_format_label% THEN Q%!36=-1
              IF Q%!36=ic_setup_format_frame% THEN Q%!36=-1
              CASE Q%!36 OF
               WHEN                     -1: PROCh("AlarmHB")
               WHEN       ic_setup_silent%: IF FNicon_set(setup%,Q%!36) PROCh("SHlp0B") ELSE PROCh("SHlp0A")
               WHEN           ic_setup_ok%: PROCh("SHlpIA")
               WHEN       ic_setup_cancel%: PROCh("SHlpIB")
               WHEN ic_setup_working_week%: IF FNicon_set(setup%,Q%!36) PROCh("SHlp1B") ELSE PROCh("SHlp1A")
               WHENic_setup_sun%,ic_setup_mon%,ic_setup_tue%,ic_setup_wed%,ic_setup_thu%,ic_setup_fri%,ic_setup_sat%:
                                            IF FNicon_set(setup%,Q%!36) PROCh("SHlpHA") ELSE PROCh("SHlpHB")
               WHEN    ic_setup_cont_beep%: PROCh("SHlpGA")
               WHEN     ic_setup_beep_off%: PROCh("SHlpGB")
               WHEN    ic_setup_beep_time%: PROCh("SHlpAA")
               WHENic_setup_auto_database%: IF FNicon_set(setup%,Q%!36) PROCh("SHlp2B") ELSE PROCh("SHlp2A")
               WHEN  ic_setup_confirm_del%: IF FNicon_set(setup%,Q%!36) PROCh("SHlp3B") ELSE PROCh("SHlp3A")
               WHEN  ic_setup_analogue_ws%: PROCh("SHlp4A")
               WHEN        ic_setup_hh_mm%: PROCh("SHlp6A")
               WHEN ic_setup_analogue_wos%: PROCh("SHlp5A")
               WHEN     ic_setup_hh_mm_ss%: PROCh("SHlp7A")
               WHEN     ic_setup_user_def%: PROCh("SHlp8A")
               WHEN  ic_setup_user_string%: additional_help$=FNconverttime(cur_clock%,FNread_string(setup%,Q%!36))
                                            IFadditional_help$<>FNmsg_0("FrmtA4") THEN
                                             additional_help$=FNmsg_0("SHlpBB")+"|M"+additional_help$
                                            ENDIF
                                            PROCh("SHlpBA")
              ENDCASE
 WHEN a_wind%:REM knock out the textual icons that we don't want to help on
              IF Q%!36=ic_alarm_msg_label% Q%!36=-1
              IF Q%!36=ic_alarm_onthe_month_label% Q%!36=-1
              IF Q%!36=ic_alarm_ofevery_label% Q%!36=-1
              IFcurrent_action%<>setting% additional_help$=FNmsg_0("HelpE5")
              IF Q%!36=-1 THEN
               CASE current_action% OF
                WHEN setting%:PROCh("AlarmH3")
                WHEN changing%:PROCh("AlarmH5")
               ENDCASE
              ELSE
               CASE Q%!36 OF
                WHEN          ic_alarm_adj_hu%: PROCh("ClockA7")
                WHEN          ic_alarm_adj_hd%: PROCh("ClockA8")
                WHEN        ic_alarm_adj_minu%: PROCh("ClockA9")
                WHEN        ic_alarm_adj_mind%: PROCh("ClockB1")
                WHEN          ic_alarm_adj_dd%: PROCh("ClockB2")
                WHEN          ic_alarm_adj_du%: PROCh("ClockB3")
                WHEN          ic_alarm_adj_md%: PROCh("ClockB4")
                WHEN          ic_alarm_adj_mu%: PROCh("ClockB5")
                WHEN          ic_alarm_adj_yd%: PROCh("ClockB6")
                WHEN          ic_alarm_adj_yu%: PROCh("ClockB7")
                WHEN        ic_alarm_adj_repd%: PROCh("HelpC9")
                WHEN        ic_alarm_adj_repu%: PROCh("HelpD2")
                WHEN ic_alarm_adj_onthe_drepd%: PROCh("HelpF1")
                WHEN ic_alarm_adj_onthe_drepu%: PROCh("HelpF1")
                WHEN    ic_alarm_adj_onthe_du%: PROCh("HelpF2")
                WHEN    ic_alarm_adj_onthe_dd%: PROCh("HelpF2")
                WHEN ic_alarm_adj_onthe_mrepd%: PROCh("HelpF3")
                WHEN ic_alarm_adj_onthe_mrepu%: PROCh("HelpF3")
                WHEN          ic_alarm_urgent%: IF FNicon_set(a_wind%,Q%!36) PROCh("HelpA7") ELSE PROCh("HelpA6")
                WHEN          ic_alarm_repeat%: IF FNicon_set(a_wind%,Q%!36) PROCh("HelpC2") ELSE PROCh("HelpC1")
                WHEN            ic_alarm_task%: IF FNicon_set(a_wind%,Q%!36) PROCh("HelpE2") ELSE PROCh("HelpE1")
                WHEN           ic_alarm_wweek%: IF FNicon_set(a_wind%,Q%!36) PROCh("HelpE4") ELSE PROCh("HelpE3")
                WHEN ic_alarm_ok_lo%,ic_alarm_ok_hi%:
                                                CASE current_action% OF
                                                 WHEN setting%  :PROCh("HelpD3")
                                                 WHEN changing% :PROCh("HelpD7")
                                                ENDCASE
                WHEN ic_alarm_cancel_lo%,ic_alarm_cancel_hi%:
                                                CASE current_action% OF
                                                 WHEN setting%  :PROCh("HelpIB")
                                                 WHEN changing% :PROCh("HelpIC")
                                                ENDCASE
                WHEN ic_alarm_line1%,ic_alarm_line2%:
                                                PROCh("HelpB8")
                WHEN           ic_alarm_line3%: PROCh("HelpB9")
                WHEN      ic_alarm_every_mins%: PROCh("HelpC3")
                WHEN     ic_alarm_every_hours%: PROCh("HelpC4")
                WHEN      ic_alarm_every_days%: PROCh("HelpC5")
                WHEN     ic_alarm_every_weeks%: PROCh("HelpC6")
                WHEN    ic_alarm_every_months%: PROCh("HelpC7")
                WHEN     ic_alarm_every_years%: PROCh("HelpC8")
                WHEN      ic_alarm_every_many%: PROCh("HelpD1")
                WHEN        ic_alarm_cur_year%: PROCh("HelpB7")
                WHEN         ic_alarm_cur_day%: PROCh("HelpA9")
                WHEN        ic_alarm_cur_hour%: PROCh("HelpA3")
                WHEN         ic_alarm_cur_min%: PROCh("HelpA4")
                WHEN           ic_alarm_every%: PROCh("HelpF7")
                WHEN           ic_alarm_onthe%: PROCh("HelpE6")
                WHEN   ic_alarm_onthe_rep_day%: PROCh("HelpF4")
                WHEN       ic_alarm_onthe_day%: PROCh("HelpF5")
                WHEN ic_alarm_onthe_rep_month%: PROCh("HelpF6")
                WHEN       ic_alarm_dow_label%: PROCh("HelpB5")
                WHEN         ic_alarm_cur_mon%: PROCh("HelpB4")
                WHEN      ic_alarm_ampm_label%: PROCh("HelpA5")
                WHEN       ic_alarm_min_delta%: PROCh("HelpG4")
                WHEN      ic_alarm_hour_delta%: PROCh("HelpG3")
                WHEN      ic_alarm_year_delta%: PROCh("HelpG1")
                WHEN       ic_alarm_day_delta%: PROCh("HelpG2")
               ENDCASE
              ENDIF
 WHEN m_wind%:IF Q%!36 = ic_message_accept% THEN PROCh("MnuAL1") ELSE PROCh("AlarmH8")
 WHEN info%:PROCh("AlarmH9")
 WHEN save%:CASE Q%!36 OF
             WHEN ic_save_ok%:PROCh("Drg02")
             WHEN ic_save_name%:PROCh("Drg03")
             WHEN ic_save_icon%:PROCh("Drg04")
             OTHERWISE:PROCh("Drg01")
            ENDCASE
 OTHERWISE
  IF Q%!36<>-1 THEN
   SYS"Wimp_GetMenuState",1,Q%+1024,Q%!32,Q%!36
   IF menuhand%=0 THEN
    CASE Q%!1024 OF
     WHEN 0:IF Q%!1028=-1 PROCh("MnuMM1")
     WHEN 1:PROCh("MnuMM3")
     WHEN 2:PROCh("MnuMM4")
     WHEN 3:PROCh("MnuMM5")
     WHEN 4:PROCh("MnuMM6")
    ENDCASE
   ENDIF
   IF menuhand%=3 THEN
    IFcurrent_action%=setting% THEN
     PROCh("MnuFI4")
    ELSE
     CASE Q%!1024 OF
      WHEN 0:PROCh("MnuFI1")
      WHEN 1:PROCh("MnuFI2")
     ENDCASE
    ENDIF
   ENDIF
   IF menuhand%=1 THEN
    v%=FNalarm_selection_count
    CASE Q%!1024 OF
    WHEN 0:IFcurrent_action%=-1 PROCh("BHlpA1") ELSE PROCgrey_help
    WHEN 1:IFcurrent_action%<>-1 OR v%=0 THEN
            PROCgrey_help
           ELSE
            CASE Q%!1028 OF
            WHEN 0: IFv%=1 THEN
                     PROCh("BHlpB1")
                    ELSE
                     PROCh("BHlpB2")
                    ENDIF
            WHEN 1: IFv%=1 THEN
                     PROCh("BHlpB3")
                    ELSE
                     PROCh("BHlpB4")
                    ENDIF
            WHEN 2: IFv%=1 THEN
                     PROCh("BHlpB9")
                    ELSE
                     PROCh("BHlpBA")
                    ENDIF
            WHEN 3: IFv%=1 THEN
                     PROCh("BHlpB5")
                    ELSE
                     PROCh("BHlpB6")
                    ENDIF
            WHEN 4: IFv%=1 THEN
                     PROCh("BHlpB7")
                    ELSE
                     PROCh("BHlpB8")
                    ENDIF
            OTHERWISE:IFv%=1 THEN
                       PROCh("BHlpA2")
                      ELSE
                       PROCh("BHlpA3")
                      ENDIF
            ENDCASE
           ENDIF
    WHEN 2:IFalarm_head%=0 PROCgrey_help ELSE PROCh("BHlpA4")
    WHEN 3:IFalarm_head%=0 THEN
            PROCh("MnuAM9")
           ELSE
            IFv%=0 THEN
             PROCh("MnuAMA")
            ELSE
             PROCh("BHlpA5")
            ENDIF
           ENDIF
    WHEN 4:IFalarm_head%=0 OR current_action%<>-1 PROCgrey_help ELSE PROCh("BHlpA6")
    WHEN 5:IFcurrent_action%<>-1 PROCgrey_help ELSE PROCh("BHlpA7")
    ENDCASE
   ENDIF
   IF menuhand%=2 THEN
    CASE Q%!1024 OF
     WHEN 0:PROCh("MnuAL1")
     WHEN 1:PROCh("MnuAL2")
     WHEN 2:CASE Q%!1028 OF
             WHEN 0:IF Q%!1032=-1 PROCh("MnuD21") ELSE PROCh("MnuD11")
             WHEN 1:IF Q%!1032=-1 PROCh("MnuD22") ELSE PROCh("MnuD11")
             WHEN 2:IF Q%!1032=-1 PROCh("MnuD23") ELSE PROCh("MnuD11")
             WHEN 3:IF Q%!1032=-1 PROCh("MnuD24") ELSE PROCh("MnuD11")
             WHEN 4:IF Q%!1032=-1 PROCh("MnuD25") ELSE PROCh("MnuD11")
             WHEN 5:IF Q%!1032=-1 PROCh("MnuD26") ELSE PROCh("MnuD11")
             OTHERWISE :PROCh("MnuAL3")
            ENDCASE
    ENDCASE
   ENDIF
  ENDIF
 ENDCASE
ENDPROC
:
DEFPROCkey(H%,I%,C%)
 LOCAL num_icons%,copy_icons%,midx%,midy%
 LOCAL mine%

 mine% =FALSE

 IF H% =a_wind% THEN
  CASE C% OF
  WHEN &0D,&18A,&19A,&18E,&18F:
   REM Return, tab, shift tab, down, up navigation
   alarm% =alarms%(0) ELSE alarm% =alarms%(2)
   PROCrec_fromwin(alarm%,H%)
   PROCrefresh_alarm_window(H%,alarm%)
   mine% =TRUE
  ENDCASE
 ENDIF

 IF (C%=&1B OR C%=&1A2) AND (H%=setup% OR H%=a_wind%) THEN
  REM Escape or CTRL-F2 closes
  Q%!28=H%
  SYS"Wimp_SendMessage",3,Q%+28,H%
  mine% =TRUE
 ENDIF

 IFC%=13 AND (H%=a_wind% OR H%=save% OR H%=setup% OR H%=warning%) THEN
  REM Return presses the default button or first button
  Q%!28 =H% OR 1
  SYS"Wimp_GetWindowInfo",,Q% +28
  num_icons% =Q%!(28 +4 +84)
  midx%=(Q%!(28 +4 +0) + Q%!(28 +4 +8)) / 2
  midy%=(Q%!(28 +4 +4) + Q%!(28 +4+12)) / 2

  REM look for default button first
  copy_icons% =0
  WHILE copy_icons% <num_icons%
   Q%!(28 +4) =copy_icons%
   SYS"Wimp_GetIconState",,Q% +28
   IF INSTR(FNvalid(Q%+28 +8),"R6,3") THEN
    REM Land the mouse somewhere in the visible area
    Q%!(28 +0) =midx%
    Q%!(28 +4) =midy%
    Q%!(28 +8) =%100 :REM select
    Q%!(28 +12) =H%
    Q%!(28 +16) =copy_icons%
    SYS"Wimp_SendMessage",6,Q%+28,H%
    ENDPROC : REM Implicit mine% = TRUE
   ENDIF
   copy_icons% +=1
  ENDWHILE

  REM then look for non-default button
  copy_icons% =0
  WHILE copy_icons% <num_icons%
   Q%!(28 +4) =copy_icons%
   SYS"Wimp_GetIconState",,Q% +28
   IF INSTR(FNvalid(Q%+28 +8),"R5,3") THEN
    REM Land the mouse somewhere in the visible area
    Q%!(28 +0) =midx%
    Q%!(28 +4) =midy%
    Q%!(28 +8) =%100 :REM select
    Q%!(28 +12) =H%
    Q%!(28 +16) =copy_icons%
    SYS"Wimp_SendMessage",6,Q%+28,H%
    ENDPROC : REM Implicit mine% = TRUE
   ENDIF
   copy_icons% +=1
  ENDWHILE
 ENDIF

 IF NOT mine% THEN SYS"Wimp_ProcessKey",C%
ENDPROC
