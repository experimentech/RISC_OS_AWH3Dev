; This source code in this file is licensed to You by Castle Technology
; Limited ("Castle") and its licensors on contractual terms and conditions
; ("Licence") which entitle you freely to modify and/or to distribute this
; source code subject to Your compliance with the terms of the Licence.
; 
; This source code has been made available to You without any warranties
; whatsoever. Consequently, Your use, modification and distribution of this
; source code is entirely at Your own risk and neither Castle, its licensors
; nor any other person who has contributed to this source code shall be
; liable to You for any loss or damage which You may suffer as a result of
; Your use, modification or distribution of this source code.
; 
; Full details of Your rights and obligations are set out in the Licence.
; You should have received a copy of the Licence with this source code file.
; If You have not received a copy, the text of the Licence is available
; online at www.castle-technology.co.uk/riscosbaselicence.htm
; 
#include "VersionNum"

title-string: BootCommands

help-string: Boot_Commands Module_MajorVersion_CMHG Module_MinorVersion_CMHG

date-string: Module_Date_CMHG

initialisation-code: main_initialise

finalisation-code: main_terminate

#ifdef NO_INTERNATIONAL_HELP

command-keyword-table: main_command
   AddApp( min-args: 1, max-args: 1,
      gstrans-map: 1,
      add-syntax:,
      invalid-syntax: "Syntax:	*AddApp <application>",
      help-text: "*AddApp creates a link from the Resources icon to an application\n"),
   AppSize( min-args: 1, max-args: 1,
      gstrans-map: 0,
      add-syntax:,
      invalid-syntax: "Syntax:	*AppSize <size>",
      help-text: "*AppSize reserves space in application workspace\n"),
   Do( min-args: 0, max-args: 255,
      gstrans-map: 0,
      add-syntax:,
      invalid-syntax: "Syntax:	*Do <command>",
      help-text: "*Do passes its argument to the command interpreter\n"),
   IfThere( min-args: 1, max-args: 255,
      gstrans-map: 1,
      add-syntax:,
      invalid-syntax: "Syntax:	*IfThere <file> then <command> else <command>",
      help-text: "*IfThere looks for a file and executes a choice of commands\n"),
   LoadCMOS( min-args: 1, max-args: 1,
      gstrans-map: 1,
      add-syntax:,
      invalid-syntax: "Syntax:	*LoadCMOS <file>",
      help-text: "*LoadCMOS configures the computer from a configuration file\n"),
   SaveCMOS( min-args: 1, max-args: 1,
      gstrans-map: 1,
      add-syntax:,
      invalid-syntax: "Syntax:	*SaveCMOS <file>",
      help-text: "*SaveCMOS saves the computer's configuration to a configuration file\n"),
   Repeat( min-args: 0, max-args: 255,
      gstrans-map: 2,
      add-syntax:,
      invalid-syntax: "Syntax:	*Repeat <command> <directory> [-directories | -files | -applications | -type <type>] <tail> [-tasks] [-verbose] [-sort] [-continue]",
      help-text: "*Repeat iterates over a directory, performing a command for each object found\nOptions:\ndirectories\tlimit search to directories\nfiles\t\tlimit search to files\napplications\tlimit search to applications\ntype <type>\tlimit search to files of a given type\ntasks\t\tstart each command as a separate task\nverbose\t\tshow each command before it is executed\nsort\t\tenumerate directories in ascending ASCII order\ncontinue\tput first error into X$Error then carry on (except when -tasks)\n"),
   SafeLogon( min-args: 1, max-args: 255,
      gstrans-map: 0,
      add-syntax:,
      invalid-syntax: "Syntax:	*SafeLogon [[:]<station number>|:<File server name>] <user name> [[:<CR>]<Password>]",
      help-text: "*SafeLogon initialises the current (or given) file server for your use, except that if you are already logged on, it does nothing\n"),
   FreePool( min-args: 0, max-args: 0,
      gstrans-map: 0,
      add-syntax:,
      invalid-syntax: "Syntax:	*FreePool",
      help-text: "*FreePool moves all available memory except for the next slot into the free pool\n"),
   ShrinkRMA( min-args: 0, max-args: 0,
      gstrans-map: 0,
      add-syntax:,
      invalid-syntax: "Syntax:	*ShrinkRMA",
      help-text: "*ShrinkRMA will try to shrink the relocatable module area to its minimum size\n"),
   AddToRMA( min-args: 1, max-args: 1,
      gstrans-map: 0,
      add-syntax:,
      invalid-syntax: "Syntax:	*AddToRMA <size>",
      help-text: "*AddToRMA adds free space onto the end of the RMA\n"),
   AppSlot( min-args: 1, max-args: 1,
      gstrans-map: 0,
      add-syntax:,
      invalid-syntax: "Syntax:	*AppSlot <size>",
      help-text: "*AppSlot tries to achieve the specified application space size\n"),
   X( min-args: 0, max-args: 255,
      gstrans-map: 0,
      add-syntax:,
      invalid-syntax: "Syntax:	*X <command>",
      help-text: "*X passes its argument to the command interpreter, storing any error in system variable X$Error (if not already set)\n")

#else

international-help-file: "Resources:$.Resources.BootCmds.Messages"

command-keyword-table: main_command
   AddApp( min-args: 1, max-args: 1,
      gstrans-map: 1,
      international:,
      invalid-syntax: "AddAppSyntax",
      help-text: "AddAppHelp"),
   AppSize( min-args: 1, max-args: 1,
      gstrans-map: 0,
      international:,
      invalid-syntax: "AppSizeSyntax",
      help-text: "AppSizeHelp"),
   Do( min-args: 0, max-args: 255,
      gstrans-map: 0,
      international:,
      invalid-syntax: "DoSyntax",
      help-text: "DoHelp"),
   IfThere( min-args: 1, max-args: 255,
      gstrans-map: 1,
      international:,
      invalid-syntax: "IfThereSyntax",
      help-text: "IfThereHelp"),
   LoadCMOS( min-args: 1, max-args: 1,
      gstrans-map: 1,
      international:,
      invalid-syntax: "LoadCMOSSyntax",
      help-text: "LoadCMOSHelp"),
   SaveCMOS( min-args: 1, max-args: 1,
      gstrans-map: 1,
      international:,
      invalid-syntax: "SaveCMOSSyntax",
      help-text: "SaveCMOSHelp"),
   Repeat( min-args: 0, max-args: 255,
      gstrans-map: 2,
      international:,
      invalid-syntax: "RepeatSyntax",
      help-text: "RepeatHelp"),
   SafeLogon( min-args: 1, max-args: 255,
      gstrans-map: 0,
      international:,
      invalid-syntax: "SafeLogonSyntax",
      help-text: "SafeLogonHelp"),
   FreePool( min-args: 0, max-args: 0,
      gstrans-map: 0,
      international:,
      invalid-syntax: "FreePoolSyntax",
      help-text: "FreePoolHelp"),
   ShrinkRMA( min-args: 0, max-args: 0,
      gstrans-map: 0,
      international:,
      invalid-syntax: "ShrinkRMASyntax",
      help-text: "ShrinkRMAHelp"),
   AddToRMA( min-args: 1, max-args: 1,
      gstrans-map: 0,
      international:,
      invalid-syntax: "AddToRMASyntax",
      help-text: "AddToRMAHelp"),
   AppSlot( min-args: 1, max-args: 1,
      gstrans-map: 0,
      international:,
      invalid-syntax: "AppSlotSyntax",
      help-text: "AppSlotHelp"),
   X( min-args: 0, max-args: 255,
      gstrans-map: 0,
      international:,
      invalid-syntax: "XSyntax",
      help-text: "XHelp")

#endif
