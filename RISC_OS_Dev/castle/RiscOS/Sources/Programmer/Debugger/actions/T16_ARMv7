# This source code in this file is licensed to You by Castle Technology
# Limited ("Castle") and its licensors on contractual terms and conditions
# ("Licence") which entitle you freely to modify and/or to distribute this
# source code subject to Your compliance with the terms of the Licence.
# 
# This source code has been made available to You without any warranties
# whatsoever. Consequently, Your use, modification and distribution of this
# source code is entirely at Your own risk and neither Castle, its licensors
# nor any other person who has contributed to this source code shall be
# liable to You for any loss or damage which You may suffer as a result of
# Your use, modification or distribution of this source code.
# 
# Full details of Your rights and obligations are set out in the Licence.
# You should have received a copy of the Licence with this source code file.
# If You have not received a copy, the text of the Licence is available
# online at www.castle-technology.co.uk/riscosbaselicence.htm
# 

# Actions for Thumb disassembly - INCOMPLETE!

IS_T32(nonstandard)
{
	COMMON
	params->width = 0;
	sprintf(params->buf,"%s",MSG(MSG_THUMB32));
	return;
}

UNDEFINED()
{
	const uint32_t nonstandard = 0; /* Prevent duplicate instances due to needless dependencies on 'nonstandard' */
	COMMONT16
	if(params->opt->dci)
		sprintf(params->buf,"DCI.N\t%s%08X\t%s",HEX,OPCODE,MSG(MSG_UNDEFINEDINSTRUCTION));
	else
		sprintf(params->buf,"%s",MSG(MSG_UNDEFINEDINSTRUCTION));
	return;
}

UNALLOCATED_HINT()
{
	const uint32_t nonstandard = 0; /* Prevent duplicate instances due to needless dependencies on 'nonstandard' */
	COMMONT16
	if(params->opt->dci)
		sprintf(params->buf,"DCI.N\t%s%08X\t%s",HEX,OPCODE,MSG(MSG_UNALLOCATEDHINT));
	else
		sprintf(params->buf,"%s",MSG(MSG_UNALLOCATEDHINT));
	return;
}

PERMA_UNDEFINED()
{
	const uint32_t nonstandard = 0; /* Prevent duplicate instances due to needless dependencies on 'nonstandard' */
	COMMONT16
	if(params->opt->dci)
		sprintf(params->buf,"DCI.N\t%s%08X\t%s",HEX,OPCODE,MSG(MSG_PERMAUNDEFINED));
	else
		sprintf(params->buf,"%s",MSG(MSG_PERMAUNDEFINED));
	return;
}

ADC_reg_T1(Rdn,Rm,nonstandard)
{
	COMMONT16
	ONLY4(ARMv4T,ARMv5Tstar,ARMv6star,ARMv7);
	OP_S_CC_RD_RM(JUSTPARAMS,"ADC",S,cond,Rdn,Rm);
	return;
}

ADD_imm_T1(Rd,Rn,imm3,nonstandard)
{
	COMMONT16
	ONLY4(ARMv4T,ARMv5Tstar,ARMv6star,ARMv7);
	OP_S_CC_RD_RM_IMM(JUSTPARAMS,"ADD",S,cond,Rd,Rn,imm3);
	return;
}

ADD_imm_T2(Rdn,imm8,nonstandard)
{
	COMMONT16
	ONLY4(ARMv4T,ARMv5Tstar,ARMv6star,ARMv7);
	OP_S_CC_RD_IMM(JUSTPARAMS,"ADD",S,cond,Rdn,imm8);
	return;
}

ADD_reg_T1(Rd,Rn,Rm,nonstandard)
{
	COMMONT16
	ONLY4(ARMv4T,ARMv5Tstar,ARMv6star,ARMv7);
	OP_S_CC_RD_RN_RM(JUSTPARAMS,"ADD",S,cond,Rd,Rn,Rm);
	return;
}

ADD_reg_T2a(Rdn,Rm,DN,nonstandard)
{
	COMMONT16
	ONLY2(ARMv6T2,ARMv7);
	OP_S_CC_RD_RM(JUSTPARAMS,"ADD",S,cond,Rdn,Rm);
	return;
}

ADD_reg_T2b(Rdn,Rm,DN,nonstandard)
{
	COMMONT16
	ONLY4(ARMv4T,ARMv5Tstar,ARMv6star,ARMv7);
	uint32_t Rd = Rdn|(DN<<3);
	_UNPREDICTABLE((Rd==15) || (Rm==15));
	_UNPREDICTABLE((Rd==15) && INITBLOCK && !LASTINITBLOCK);
	OP_S_CC_RD_RM(JUSTPARAMS,"ADD",S,cond,Rd,Rm);
	return;
}

ADD_sp_imm_T1(Rd,imm8,nonstandard)
{
	COMMONT16
	ONLY4(ARMv4T,ARMv5Tstar,ARMv6star,ARMv7);
	OP_S_CC_RD_RM_IMM(JUSTPARAMS,"ADD",false,cond,Rd,13,imm8<<2);
	return;
}

ADD_sp_imm_T2(imm7,nonstandard)
{
	COMMONT16
	ONLY4(ARMv4T,ARMv5Tstar,ARMv6star,ARMv7);
	OP_S_CC_RD_RM_IMM(JUSTPARAMS,"ADD",false,cond,13,13,imm7<<2);
	return;
}

ADD_sp_reg_T1(Rdm,DM,nonstandard)
{
	COMMONT16
	ONLY4(ARMv4T,ARMv5Tstar,ARMv6star,ARMv7);
	uint32_t Rd = Rdm|(DM<<3);
	_UNPREDICTABLE((Rd==15) && INITBLOCK && !LASTINITBLOCK);
	OP_S_CC_RD_RN_RM(JUSTPARAMS,"ADD",false,cond,Rd,13,Rd);
	return;
}

ADD_sp_reg_T2(Rm,nonstandard)
{
	COMMONT16
	ONLY4(ARMv4T,ARMv5Tstar,ARMv6star,ARMv7);
	OP_S_CC_RD_RM(JUSTPARAMS,"ADD",false,cond,13,Rm);
	return;
}

ADR_T1(Rd,imm8,nonstandard)
{
	COMMONT16
	ONLY4(ARMv4T,ARMv5Tstar,ARMv6star,ARMv7);
	if(params->op->positionind)
		OP_S_CC_RD_RN_IMM(JUSTPARAMS,"ADD",false,cond,Rd,15,imm8<<2);
	else
		OP_S_CC_RD_ADDR(JUSTPARAMS,"ADR",false,cond,Rd,params->addr+(imm8<<2));
	return;
}

AND_reg_T1(Rdn,Rm,nonstandard)
{
	COMMONT16
	ONLY4(ARMv4T,ARMv5Tstar,ARMv6star,ARMv7);
	OP_S_CC_RD_RM(JUSTPARAMS,"AND",S,cond,Rdn,Rm);
	return;
}

ASR_imm_T1(Rd,Rm,imm5,nonstandard)
{
	COMMONT16
	ONLY4(ARMv4T,ARMv5Tstar,ARMv6star,ARMv7);
	OP_S_CC_RD_RM_IMM(JUSTPARAMS,"ASR",S,cond,Rd,Rm,(imm5?imm5:32));
	return;
}

ASR_reg_T1(Rdn,Rm,nonstandard)
{
	COMMONT16
	ONLY4(ARMv4T,ARMv5Tstar,ARMv6star,ARMv7);
	OP_S_CC_RD_RM(JUSTPARAMS,"ASR",S,cond,Rdn,Rm);
	return;
}

B_T1(cond,imm8,nonstandard)
{
	COMMON
	params->width = 16;
	ONLY4(ARMv4T,ARMv5Tstar,ARMv6star,ARMv7);
	_UNPREDICTABLE(INITBLOCK);
	int32_t ofs = sextend(imm8<<1,9);
	OP_CC_ADDR(JUSTPARAMS,"B",cond,ofs,4);
	return;
}

B_T2(imm11,nonstandard)
{
	COMMONT16
	ONLY4(ARMv4T,ARMv5Tstar,ARMv6star,ARMv7);
	_UNPREDICTABLE(INITBLOCK && !LASTINITBLOCK);
	int32_t ofs = sextend(imm11<<1,12);
	OP_CC_ADDR(JUSTPARAMS,"B",cond,ofs,4);
	return;
}

BIC_reg_T1(Rdn,Rm,nonstandard)
{
	COMMONT16
	ONLY4(ARMv4T,ARMv5Tstar,ARMv6star,ARMv7);
	OP_S_CC_RD_RM(JUSTPARAMS,"BIC",S,cond,Rdn,Rm);
	return;
}

BKPT_T1(imm8,nonstandard)
{
	COMMONT16
	ONLY3(ARMv5Tstar,ARMv6star,ARMv7);
	sprintf(params->buf,"BKPT\t%s%s%02X",(params->opt->ual?"#":""),HEX,imm8);
	return;
}

BLX_reg_T1(Rm,nonstandard)
{
	COMMONT16
	ONLY3(ARMv5Tstar,ARMv6star,ARMv7);
	_UNPREDICTABLE(Rm==15);
	_UNPREDICTABLE(INITBLOCK && !LASTINITBLOCK);
	sprintf(params->buf,"BLX%s\t%s",condition(JUSTPARAMS,cond),REG(Rm));
	return;
}

BX_T1(Rm,nonstandard)
{
	COMMONT16
	ONLY4(ARMv4T,ARMv5Tstar,ARMv6star,ARMv7);
	_UNPREDICTABLE(INITBLOCK && !LASTINITBLOCK);
	sprintf(params->buf,"BX%s\t%s",condition(JUSTPARAMS,cond),REG(Rm));
	return;
}

CBNZ_CBZ_T1(op,Rn,imm5,i,nonstandard)
{
	COMMONT16
	ONLY2(ARMv6T2,ARMv7);
	_UNPREDICTABLE(INITBLOCK);
	int32_t ofs = (i<<7)|(imm5<<1);
	int32_t dest;
	const char *pre;
	if(!params->opt->positionind)
	{
		dest = params->addr+ofs;
		pre = "";
	}
	else
	{
		dest = ofs+4;
		pre = ".+";
	}
	sprintf(params->buf,"%s\t%s,%s%s%08X",(op?"CBNZ":"CBZ"),REG(Rn),pre,HEX,dest);
	return;
}

CMN_reg_T1(Rn,Rm,nonstandard)
{
	COMMONT16
	ONLY4(ARMv4T,ARMv5Tstar,ARMv6star,ARMv7);
	OP_S_CC_RN_RM(JUSTPARAMS,"CMN",false,cond,Rm,Rn);
	return;
}

CMP_imm_T1(Rn,imm8,nonstandard)
{
	COMMONT16
	ONLY4(ARMv4T,ARMv5Tstar,ARMv6star,ARMv7);
	OP_S_CC_RN_IMM(JUSTPARAMS,"CMP",false,cond,Rn,imm8);
	return;
}

CMP_reg_T1(Rn,Rm,nonstandard)
{
	COMMONT16
	ONLY4(ARMv4T,ARMv5Tstar,ARMv6star,ARMv7);
	OP_S_CC_RN_RM(JUSTPARAMS,"CMP",false,cond,Rm,Rn);
	return;
}

CMP_reg_T2(Rn,N,Rm,nonstandard)
{
	COMMONT16
	ONLY4(ARMv4T,ARMv5Tstar,ARMv6star,ARMv7);
	_UNPREDICTABLE(((!N)&&(Rm<8))||((Rn|(N<<3))==15)||(Rm==15))
	OP_S_CC_RN_RM(JUSTPARAMS,"CMP",false,cond,Rm,Rn|(N<<3));
	return;
}

EOR_reg_T1(Rdn,Rm,nonstandard)
{
	COMMONT16
	ONLY4(ARMv4T,ARMv5Tstar,ARMv6star,ARMv7);
	OP_S_CC_RN_RM(JUSTPARAMS,"EOR",S,cond,Rdn,Rm);
	return;
}

IT_T1(mask,firstcond,nonstandard)
{
	COMMONT16
	ONLY4(ARMv6T2,ARMv7);
	_UNPREDICTABLE((firstcond == 15) || ((firstcond==14) && ((mask-1)&mask)));
	_UNPREDICTABLE(INITBLOCK);
	char op[4];
	uint32_t bit = firstcond & 1;
	char *c = op;
	while(mask != 8)
	{
		*c++ = (((mask>>3)==bit)?'T':'E');
		mask = (mask<<1) & 0xf;
	}
	*c = 0;
	sprintf(params->buf,"IT%s\t%s",op,condition(JUSTPARAMS,firstcond));
	params->psr = (params->psr & ~(PSR_IT10 | PSR_IT72)) | ((mask & 3)<<25) | (firstcond << 16) | ((mask & 0xc)<<14);
	params->itset = true;
	return;
}

LDR_imm_T1(Rt,Rn,imm5,nonstandard)
{
	COMMONT16
	ONLY4(ARMv4T,ARMv5Tstar,ARMv6star,ARMv7);
	ldrstr_imm("LDR",Rt,Rn,imm5<<2);
	return;
}

LDR_imm_T2(Rt,imm8,nonstandard)
{
	COMMONT16
	ONLY4(ARMv4T,ARMv5Tstar,ARMv6star,ARMv7);
	ldrstr_imm("LDR",Rt,13,imm8<<2);
	return;
}

LDR_lit_T1(Rt,imm8,nonstandard)
{
	COMMONT16
	ONLY4(ARMv4T,ARMv5Tstar,ARMv6star,ARMv7);
	op_reg_hex("LDR",Rt,(imm8<<2)+4,8);
	return;
}

LDR_reg_T1(Rt,Rn,Rm,nonstandard)
{
	COMMONT16
	ONLY4(ARMv4T,ARMv5Tstar,ARMv6star,ARMv7);
	ldrstr_reg("LDR",Rt,Rn,Rm);
	return;
}

LDRB_imm_T1(Rt,Rn,imm5,nonstandard)
{
	COMMONT16
	ONLY4(ARMv4T,ARMv5Tstar,ARMv6star,ARMv7);
	ldrstr_imm("LDRB",Rt,Rn,imm5);
	return;
}

LDRB_reg_T1(Rt,Rn,Rm,nonstandard)
{
	COMMONT16
	ONLY4(ARMv4T,ARMv5Tstar,ARMv6star,ARMv7);
	ldrstr_reg("LDRB",Rt,Rn,Rm);
	return;
}

LDRH_imm_T1(Rt,Rn,imm5,nonstandard)
{
	COMMONT16
	ONLY4(ARMv4T,ARMv5Tstar,ARMv6star,ARMv7);
	ldrstr_imm("LDRH",Rt,Rn,imm5<<1);
	return;
}

LDRH_reg_T1(Rt,Rn,Rm,nonstandard)
{
	COMMONT16
	ONLY4(ARMv4T,ARMv5Tstar,ARMv6star,ARMv7);
	ldrstr_reg("LDRH",Rt,Rn,Rm);
	return;
}

LDRSB_reg_T1(Rt,Rn,Rm,nonstandard)
{
	COMMONT16
	ONLY4(ARMv4T,ARMv5Tstar,ARMv6star,ARMv7);
	ldrstr_reg("LDRSB",Rt,Rn,Rm);
	return;
}

LDRSH_reg_T1(Rt,Rn,Rm,nonstandard)
{
	COMMONT16
	ONLY4(ARMv4T,ARMv5Tstar,ARMv6star,ARMv7);
	ldrstr_reg("LDRSH",Rt,Rn,Rm);
	return;
}

LSL_imm_T1(Rd,Rm,imm5,nonstandard)
{
	COMMONT16
	ONLY4(ARMv4T,ARMv5Tstar,ARMv6star,ARMv7);
	op_reg_reg_int("LSL",Rd,Rm,imm5);
	return;
}

LSL_reg_T1(Rdn,Rm,nonstandard)
{
	COMMONT16
	ONLY4(ARMv4T,ARMv5Tstar,ARMv6star,ARMv7);
	op_reg_reg("LSL",Rdn,Rm);
	return;
}

LSR_imm_T1(Rd,Rm,imm5,nonstandard)
{
	COMMONT16
	ONLY4(ARMv4T,ARMv5Tstar,ARMv6star,ARMv7);
	op_reg_reg_int("LSR",Rd,Rm,(imm5?imm5:32));
	return;
}

LSR_reg_T1(Rdn,Rm,nonstandard)
{
	COMMONT16
	ONLY4(ARMv4T,ARMv5Tstar,ARMv6star,ARMv7);
	op_reg_reg("LSR",Rdn,Rm);
	return;
}

MOV_imm_T1(Rd,imm8,nonstandard)
{
	COMMONT16
	ONLY4(ARMv4T,ARMv5Tstar,ARMv6star,ARMv7);
	op_reg_imm("MOV",Rd,imm8);
	return;
}

MOV_reg_T1a(Rd,Rm,nonstandard)
{
	COMMONT16
	ONLY4(ARMv4T,ARMv5Tstar,ARMv6star,ARMv7);
	op_reg_reg("MOV",Rd,Rm);
	comment("ARMv6 or later");
	return;
}

MOV_reg_T1b(Rd,Rm,D,nonstandard)
{
	COMMONT16
	ONLY4(ARMv4T,ARMv5Tstar,ARMv6star,ARMv7);
	op_reg_reg("MOV",Rd|(D<<3),Rm);
	return;
}

MOV_reg_T2(Rd,Rm,nonstandard)
{
	COMMONT16
	ONLY4(ARMv4T,ARMv5Tstar,ARMv6star,ARMv7);
	op_reg_reg("MOVS",Rd,Rm);
	return;
}

MUL_T1(Rdm,Rn,nonstandard)
{
	COMMONT16
	ONLY4(ARMv4T,ARMv5Tstar,ARMv6star,ARMv7);
	op_reg_reg("MUL",Rdm,Rn);
	return;
}

MVN_reg_T1(Rd,Rm,nonstandard)
{
	COMMONT16
	ONLY4(ARMv4T,ARMv5Tstar,ARMv6star,ARMv7);
	op_reg_reg("MVN",Rd,Rm);
	return;
}

NOP_T1(nonstandard)
{
	COMMONT16
	ONLY4(ARMv4T,ARMv5Tstar,ARMv6star,ARMv7);
	do_op("NOP");
	comment("ARMv6T2 or later");
	return;
}

ORR_reg_T1(Rdn,Rm,nonstandard)
{
	COMMONT16
	ONLY4(ARMv4T,ARMv5Tstar,ARMv6star,ARMv7);
	op_reg_reg("ORR",Rdn,Rm);
	return;
}

POP_T1(reglist,P,nonstandard)
{
	COMMONT16
	ONLY4(ARMv4T,ARMv5Tstar,ARMv6star,ARMv7);
	op_reglist("POP",reglist|(P<<15));
	return;
}

PUSH_T1(reglist,M,nonstandard)
{
	COMMONT16
	ONLY4(ARMv4T,ARMv5Tstar,ARMv6star,ARMv7);
	op_reglist("PUSH",reglist|(M<<14));
	return;
}

REV_T1(Rd,Rm,nonstandard)
{
	COMMONT16
	ONLY4(ARMv4T,ARMv5Tstar,ARMv6star,ARMv7);
	op_reg_reg("REV",Rd,Rm);
	comment("ARMv6 or later");
	return;
}

REV16_T1(Rd,Rm,nonstandard)
{
	COMMONT16
	ONLY4(ARMv4T,ARMv5Tstar,ARMv6star,ARMv7);
	op_reg_reg("REV16",Rd,Rm);
	comment("ARMv6 or later");
	return;
}

REVSH_T1(Rd,Rm,nonstandard)
{
	COMMONT16
	ONLY4(ARMv4T,ARMv5Tstar,ARMv6star,ARMv7);
	op_reg_reg("REVSH",Rd,Rm);
	comment("ARMv6 or later");
	return;
}

ROR_reg_T1(Rdn,Rm,nonstandard)
{
	COMMONT16
	ONLY4(ARMv4T,ARMv5Tstar,ARMv6star,ARMv7);
	op_reg_reg("ROR",Rdn,Rm);
	return;
}

RSB_imm_T1(Rd,Rn,nonstandard)
{
	COMMONT16
	ONLY4(ARMv4T,ARMv5Tstar,ARMv6star,ARMv7);
	op_reg_reg_imm("RSB",Rd,Rn,0);
	return;
}

SBC_reg_T1(Rdn,Rm,nonstandard)
{
	COMMONT16
	ONLY4(ARMv4T,ARMv5Tstar,ARMv6star,ARMv7);
	op_reg_reg("SBC",Rdn,Rm);
	return;
}

SETEND_T1(E,nonstandard)
{
	COMMONT16
	ONLY4(ARMv4T,ARMv5Tstar,ARMv6star,ARMv7);
	if(nonstandard)
		printf("Unpredictable instruction\n");
	else
	{
		op_str("SETEND",(E?"BE":"LE"));
		comment("ARMv6 or later");
	}
	return;
}

SEV_T1(nonstandard)
{
	COMMONT16
	ONLY4(ARMv4T,ARMv5Tstar,ARMv6star,ARMv7);
	do_op("SEV");
	comment("ARMv7 or later");
	return;
}

STR_imm_T1(Rt,Rn,imm5,nonstandard)
{
	COMMONT16
	ONLY4(ARMv4T,ARMv5Tstar,ARMv6star,ARMv7);
	ldrstr_imm("STR",Rt,Rn,imm5<<2);
	return;
}

STR_imm_T2(Rt,imm8,nonstandard)
{
	COMMONT16
	ONLY4(ARMv4T,ARMv5Tstar,ARMv6star,ARMv7);
	ldrstr_imm("STR",Rt,13,imm8<<2);
	return;
}

STR_reg_T1(Rt,Rn,Rm,nonstandard)
{
	COMMONT16
	ONLY4(ARMv4T,ARMv5Tstar,ARMv6star,ARMv7);
	ldrstr_reg("STR",Rt,Rn,Rm);
	return;
}

STRB_imm_T1(Rt,Rn,imm5,nonstandard)
{
	COMMONT16
	ONLY4(ARMv4T,ARMv5Tstar,ARMv6star,ARMv7);
	ldrstr_imm("STRB",Rt,Rn,imm5);
	return;
}

STRB_reg_T1(Rt,Rn,Rm,nonstandard)
{
	COMMONT16
	ONLY4(ARMv4T,ARMv5Tstar,ARMv6star,ARMv7);
	ldrstr_reg("STRB",Rt,Rn,Rm);
	return;
}

STRH_imm_T1(Rt,Rn,imm5,nonstandard)
{
	COMMONT16
	ONLY4(ARMv4T,ARMv5Tstar,ARMv6star,ARMv7);
	ldrstr_imm("STRH",Rt,Rn,imm5<<1);
	return;
}

STRH_reg_T1(Rt,Rn,Rm,nonstandard)
{
	COMMONT16
	ONLY4(ARMv4T,ARMv5Tstar,ARMv6star,ARMv7);
	ldrstr_reg("STRH",Rt,Rn,Rm);
	return;
}

SUB_imm_T1(Rd,Rn,imm3,nonstandard)
{
	COMMONT16
	ONLY4(ARMv4T,ARMv5Tstar,ARMv6star,ARMv7);
	op_reg_reg_imm("SUB",Rd,Rn,imm3);
	return;
}

SUB_imm_T2(Rdn,imm8,nonstandard)
{
	COMMONT16
	ONLY4(ARMv4T,ARMv5Tstar,ARMv6star,ARMv7);
	op_reg_imm("SUB",Rdn,imm8);
	return;
}

SUB_reg_T1(Rd,Rn,Rm,nonstandard)
{
	COMMONT16
	ONLY4(ARMv4T,ARMv5Tstar,ARMv6star,ARMv7);
	op_reg_reg_reg("SUB",Rd,Rn,Rm);
	return;
}

SUB_sp_imm_T1(imm7,nonstandard)
{
	COMMONT16
	ONLY4(ARMv4T,ARMv5Tstar,ARMv6star,ARMv7);
	op_reg_reg_imm("SUB",13,13,imm7<<2);
	return;
}

SVC_T1(imm8,nonstandard)
{
	COMMONT16
	ONLY4(ARMv4T,ARMv5Tstar,ARMv6star,ARMv7);
	op_hex("SVC",imm8,2);
	return;
}

SXTB_T1(Rd,Rm,nonstandard)
{
	COMMONT16
	ONLY4(ARMv4T,ARMv5Tstar,ARMv6star,ARMv7);
	op_reg_reg("SXTB",Rd,Rm);
	comment("ARMv6 or later");
	return;
}

SXTH_T1(Rd,Rm,nonstandard)
{
	COMMONT16
	ONLY4(ARMv4T,ARMv5Tstar,ARMv6star,ARMv7);
	op_reg_reg("SXTH",Rd,Rm);
	comment("ARMv6 or later");
	return;
}

TST_reg_T1(Rn,Rm,nonstandard)
{
	COMMONT16
	ONLY4(ARMv4T,ARMv5Tstar,ARMv6star,ARMv7);
	op_reg_reg("TST",Rn,Rm);
	return;
}

UDF_T1(imm8,nonstandard)
{
	COMMONT16
	ONLY4(ARMv4T,ARMv5Tstar,ARMv6star,ARMv7);
	op_hex("UDF",imm8,2);
	comment("Undefined instruction");
	return;
}

UXTB_T1(Rd,Rm,nonstandard)
{
	COMMONT16
	ONLY4(ARMv4T,ARMv5Tstar,ARMv6star,ARMv7);
	op_reg_reg("UXTB",Rd,Rm);
	comment("ARMv6 or later");
	return;
}

UXTH_T1(Rd,Rm,nonstandard)
{
	COMMONT16
	ONLY4(ARMv4T,ARMv5Tstar,ARMv6star,ARMv7);
	op_reg_reg("UXTH",Rd,Rm);
	comment("ARMv6 or later");
	return;
}

WFE_T1(nonstandard)
{
	COMMONT16
	ONLY4(ARMv4T,ARMv5Tstar,ARMv6star,ARMv7);
	do_op("WFE");
	comment("ARMv7 or later");
	return;
}

WFI_T1(nonstandard)
{
	COMMONT16
	ONLY4(ARMv4T,ARMv5Tstar,ARMv6star,ARMv7);
	do_op("WFI");
	comment("ARMv7 or later");
	return;
}

YIELD_T1(nonstandard)
{
	COMMONT16
	ONLY4(ARMv4T,ARMv5Tstar,ARMv6star,ARMv7);
	do_op("YIELD");
	comment("ARMv7 or later");
	return;
}

CPS_T1(im,A,I,F,nonstandard)
{
	COMMONT16
	ONLY4(ARMv4T,ARMv5Tstar,ARMv6star,ARMv7);
	if(nonstandard)
		printf("Unpredictable instruction\n");
	else
	{
		char str[4];
		char *s = str;
		if(A)
			*s++ = 'a';
		if(I)
			*s++ = 'i';
		if(F)
			*s++ = 'f';
		*s = 0;
		op_str((im?"CPSID":"CPSIE"),str);
		comment("ARMv6 or later");
	}
	return;
}

LDMIA_T1(Rn,reglist,nonstandard)
{
	COMMONT16
	ONLY4(ARMv4T,ARMv5Tstar,ARMv6star,ARMv7);
	op_reg_reglist("LDMIA",Rn,!(reglist&(1<<Rn)),reglist);
	return;
}

STMIA_T1(Rn,reglist,nonstandard)
{
	COMMONT16
	ONLY4(ARMv4T,ARMv5Tstar,ARMv6star,ARMv7);
	op_reg_reglist("STMIA",Rn,true,reglist);
	return;
}
