# This source code in this file is licensed to You by Castle Technology
# Limited ("Castle") and its licensors on contractual terms and conditions
# ("Licence") which entitle you freely to modify and/or to distribute this
# source code subject to Your compliance with the terms of the Licence.
# 
# This source code has been made available to You without any warranties
# whatsoever. Consequently, Your use, modification and distribution of this
# source code is entirely at Your own risk and neither Castle, its licensors
# nor any other person who has contributed to this source code shall be
# liable to You for any loss or damage which You may suffer as a result of
# Your use, modification or distribution of this source code.
# 
# Full details of Your rights and obligations are set out in the Licence.
# You should have received a copy of the Licence with this source code file.
# If You have not received a copy, the text of the Licence is available
# online at www.castle-technology.co.uk/riscosbaselicence.htm
# 

# Actions for ARMv7 disassembly

ADC_imm_A1(cond,S,Rn,Rd,imm12,nonstandard)
{
	COMMON
	SUBS_PC_LR(JUSTPARAMS,S,Rd,Rn);
	OP_S_CC_RD_RN_IMM12(JUSTPARAMS,"ADC",S,cond,Rd,Rn,imm12);
	return;
}

ADC_reg_A1(cond,S,Rn,Rd,imm5,type,Rm,nonstandard)
{
	COMMON
	SUBS_PC_LR(JUSTPARAMS,S,Rd,Rn);
	OP_S_CC_RD_RN_RM_SHIFT(JUSTPARAMS,"ADC",S,cond,Rd,Rn,Rm,type,imm5);
	return;
}

ADC_rsr_A1(cond,S,Rn,Rd,Rs,type,Rm,nonstandard)
{
	COMMON
	_UNPREDICTABLE((Rd==15) || (Rn==15) || (Rm==15) || (Rs==15));
	OP_S_CC_RD_RN_RM_RS(JUSTPARAMS,"ADC",S,cond,Rd,Rn,Rm,type,Rs);
	return;
}

ADD_imm_A1(cond,S,Rn,Rd,imm12,nonstandard)
{
	COMMON
	SUBS_PC_LR(JUSTPARAMS,S,Rd,Rn);
	OP_S_CC_RD_RN_IMM12(JUSTPARAMS,"ADD",S,cond,Rd,Rn,imm12);
	return;
}

ADD_reg_A1(cond,S,Rn,Rd,imm5,type,Rm,nonstandard)
{
	COMMON
	SUBS_PC_LR(JUSTPARAMS,S,Rd,Rn);
	OP_S_CC_RD_RN_RM_SHIFT(JUSTPARAMS,"ADD",S,cond,Rd,Rn,Rm,type,imm5);
	return;
}

ADD_rsr_A1(cond,S,Rn,Rd,Rs,type,Rm,nonstandard)
{
	COMMON
	_UNPREDICTABLE((Rd==15) || (Rn==15) || (Rm==15) || (Rs==15));
	OP_S_CC_RD_RN_RM_RS(JUSTPARAMS,"ADD",S,cond,Rd,Rn,Rm,type,Rs);
	return;
}

ADD_sp_imm_A1(cond,S,Rd,imm12,nonstandard)
{
	COMMON
	/* UAL synonym for ADD, but we can just use the same code as ADD_imm_A1 */
	SUBS_PC_LR(JUSTPARAMS,S,Rd,13);
	OP_S_CC_RD_RN_IMM12(JUSTPARAMS,"ADD",S,cond,Rd,13,imm12);
	return;
}

ADD_sp_reg_A1(cond,S,Rd,imm5,type,Rm,nonstandard)
{
	COMMON
	/* UAL synonym for ADD, but we can just use the same code as ADD_reg_A1 */
	SUBS_PC_LR(JUSTPARAMS,S,Rd,13);
	OP_S_CC_RD_RN_RM_SHIFT(JUSTPARAMS,"ADD",S,cond,Rd,13,Rm,type,imm5);
	return;
}

ADR_A1(cond,Rd,imm12,nonstandard)
{
	COMMON
	int32_t ofs = decodeimm12(imm12);
	if(ofs<0)
		warning(JUSTPARAMS,WARN_NONSTANDARD_PC_OFFSET);
	if(params->opt->positionind)
		OP_S_CC_RD_RN_IMM12(JUSTPARAMS,"ADD",false,cond,Rd,15,imm12);
	else
		OP_S_CC_RD_ADDR(JUSTPARAMS,"ADR",false,cond,Rd,params->addr+ofs);
	return;
}

ADR_A2(cond,Rd,imm12,nonstandard)
{
	COMMON
	int32_t ofs = decodeimm12(imm12);
	if(ofs<0)
		warning(JUSTPARAMS,WARN_NONSTANDARD_PC_OFFSET);
	if(!ofs || params->opt->positionind)
		OP_S_CC_RD_RN_IMM12(JUSTPARAMS,"SUB",false,cond,Rd,15,imm12);
	else
		OP_S_CC_RD_ADDR(JUSTPARAMS,"ADR",false,cond,Rd,params->addr-ofs);
	return;
}

AND_imm_A1(cond,S,Rn,Rd,imm12,nonstandard)
{
	COMMON
	SUBS_PC_LR(JUSTPARAMS,S,Rd,Rn);
	OP_S_CC_RD_RN_IMM12(JUSTPARAMS,"AND",S,cond,Rd,Rn,imm12);
	return;
}

AND_reg_A1(cond,S,Rn,Rd,imm5,type,Rm,nonstandard)
{
	COMMON
	SUBS_PC_LR(JUSTPARAMS,S,Rd,Rn);
	OP_S_CC_RD_RN_RM_SHIFT(JUSTPARAMS,"AND",S,cond,Rd,Rn,Rm,type,imm5);
	return;
}

AND_rsr_A1(cond,S,Rn,Rd,Rs,type,Rm,nonstandard)
{
	COMMON
	_UNPREDICTABLE((Rd==15) || (Rn==15) || (Rm==15) || (Rs==15));
	OP_S_CC_RD_RN_RM_RS(JUSTPARAMS,"AND",S,cond,Rd,Rn,Rm,type,Rs);
	return;
}

ASR_imm_A1(cond,S,Rd,imm5,Rm,nonstandard)
{
	COMMON
	if(params->opt->ual)
		OP_S_CC_RD_RM_IMM(JUSTPARAMS,"ASR",S,cond,Rd,Rm,DecodeImmShift(2,imm5).amt);
	else
		OP_S_CC_RD_RM_SHIFT(JUSTPARAMS,"MOV",S,cond,Rd,Rm,2,imm5);
	return;
}

ASR_reg_A1(cond,S,Rd,Rm,Rn,nonstandard)
{
	COMMON
	_UNPREDICTABLE((Rd==15) || (Rn==15) || (Rm==15));
	if(params->opt->ual)
		OP_S_CC_RD_RN_RM(JUSTPARAMS,"ASR",S,cond,Rd,Rn,Rm);
	else
		OP_S_CC_RD_RM_RS(JUSTPARAMS,"MOV",S,cond,Rd,Rn,2,Rm);
	return;
}

B_A1(cond,imm24,nonstandard)
{
	COMMON
	int32_t ofs = sextend(imm24<<2,26);
	OP_CC_ADDR(JUSTPARAMS,"B",cond,ofs,8);
	return;
}

BFC_A1(cond,msb,Rd,lsb,nonstandard)
{
	COMMON
	ONLY2(ARMv6T2,ARMv7);
	_UNPREDICTABLE((Rd==15) || (msb < lsb));
	sprintf(params->buf,"BFC%s\t%s,#%d,#%d",condition(JUSTPARAMS,cond),REG(Rd),lsb,msb-lsb+1);
	return;
}

BFI_A1(cond,msb,Rd,lsb,Rn,nonstandard)
{
	COMMON
	ONLY2(ARMv6T2,ARMv7);
	_UNPREDICTABLE((Rd==15) || (msb < lsb));
	sprintf(params->buf,"BFI%s\t%s,%s,#%d,#%d",condition(JUSTPARAMS,cond),REG(Rd),REG(Rn),lsb,msb-lsb+1);
	return;
}

BIC_imm_A1(cond,S,Rn,Rd,imm12,nonstandard)
{
	COMMON
	SUBS_PC_LR(JUSTPARAMS,S,Rd,Rn);
	OP_S_CC_RD_RN_IMM12(JUSTPARAMS,"BIC",S,cond,Rd,Rn,imm12);
	return;
}

BIC_reg_A1(cond,S,Rn,Rd,imm5,type,Rm,nonstandard)
{
	COMMON
	SUBS_PC_LR(JUSTPARAMS,S,Rd,Rn);
	OP_S_CC_RD_RN_RM_SHIFT(JUSTPARAMS,"BIC",S,cond,Rd,Rn,Rm,type,imm5);
	return;
}

BIC_rsr_A1(cond,S,Rn,Rd,Rs,type,Rm,nonstandard)
{
	COMMON
	_UNPREDICTABLE((Rd==15) || (Rn==15) || (Rm==15) || (Rs==15));
	OP_S_CC_RD_RN_RM_RS(JUSTPARAMS,"BIC",S,cond,Rd,Rn,Rm,type,Rs);
	return;
}

BKPT_A1(cond,imm12:imm4,nonstandard)
{
	COMMON
	ONLY3(ARMv5Tstar,ARMv6Tstar,ARMv7);
	_UNPREDICTABLE(cond!=14);
	sprintf(params->buf,"BKPT%s\t%s%s%04X",condition(JUSTPARAMS,cond),(params->opt->ual?"#":""),HEX,imm12_imm4);
	return;
}

BL_BLX_imm_A1(cond,imm24,nonstandard)
{
	COMMON
	int32_t ofs = sextend(imm24<<2,26);
	OP_CC_ADDR(JUSTPARAMS,"BL",cond,ofs,8);
	return;
}

BL_BLX_imm_A2(H,imm24,nonstandard)
{
	COMMON
	ONLY3(ARMv5Tstar,ARMv6Tstar,ARMv7);
	int32_t ofs = sextend((imm24<<2)|(H<<1),26);
	OP_CC_ADDR(JUSTPARAMS,"BLX",14,ofs,8);
	return;
}

BLX_reg_A1(cond,Rm,nonstandard)
{
	COMMON
	ONLY3(ARMv5Tstar,ARMv6Tstar,ARMv7);
	_UNPREDICTABLE(Rm==15);
	sprintf(params->buf,"BLX%s\t%s",condition(JUSTPARAMS,cond),REG(Rm));
	return;
}

BX_A1(cond,Rm,nonstandard)
{
	COMMON
	sprintf(params->buf,"BX%s\t%s",condition(JUSTPARAMS,cond),REG(Rm));
	return;
}

BXJ_A1(cond,Rm,nonstandard)
{
	COMMON
	_UNPREDICTABLE(Rm==15);
	sprintf(params->buf,"BXJ%s\t%s",condition(JUSTPARAMS,cond),REG(Rm));
	return;
}

CDP_CDP2_A1(cond,opc1,CRn,CRd,coproc,opc2,CRm,nonstandard)
{
	COMMON
	const char *fmt = (params->opt->ual?"CDP%s\tp%d,%d,c%d,c%d,c%d":"CDP%s\tCP%d,%d,C%d,C%d,C%d");
	sprintf(params->buf,fmt,condition(JUSTPARAMS,cond),coproc,opc1,CRd,CRn,CRm);
	if(opc2)
		scatf(params->buf,",%d",opc2);
	return;
}

CDP_CDP2_A2(opc1,CRn,CRd,coproc,opc2,CRm,nonstandard)
{
	COMMON
	const char *fmt = (params->opt->ual?"CDP2\tp%d,%d,c%d,c%d,c%d":"CDP2\tCP%d,%d,C%d,C%d,C%d");
	sprintf(params->buf,fmt,coproc,opc1,CRd,CRn,CRm);
	if(opc2)
		scatf(params->buf,",%d",opc2);
	return;
}

CLREX_A1(nonstandard)
{
	COMMON
	sprintf(params->buf,"CLREX");
	return;
}

CLZ_A1(cond,Rd,Rm,nonstandard)
{
	COMMON
	ONLY3(ARMv5Tstar,ARMv6Tstar,ARMv7);
	_UNPREDICTABLE((Rd==15) || (Rm==15));
	OP_S_CC_RD_RM(JUSTPARAMS,"CLZ",false,cond,Rd,Rm);
	return;
}

CMN_imm_A1(cond,Rn,imm12,nonstandard)
{
	COMMONP
	OP_P_CC_RD_IMM12(JUSTPARAMS,"CMN",P,cond,Rn,imm12);
	return;
}

CMN_reg_A1(cond,Rn,imm5,type,Rm,nonstandard)
{
	COMMONP
	OP_P_CC_RD_RM_SHIFT(JUSTPARAMS,"CMN",P,cond,Rn,Rm,type,imm5);
	return;
}

CMN_rsr_A1(cond,Rn,Rs,type,Rm,nonstandard)
{
	COMMONP
	_UNPREDICTABLE((Rn==15) || (Rm==15) || (Rs==15));
	OP_P_CC_RD_RM_RS(JUSTPARAMS,"CMN",P,cond,Rn,Rm,type,Rs);
	return;
}

CMP_imm_A1(cond,Rn,imm12,nonstandard)
{
	COMMONP
	OP_P_CC_RD_IMM12(JUSTPARAMS,"CMP",P,cond,Rn,imm12);
	return;
}

CMP_reg_A1(cond,Rn,imm5,type,Rm,nonstandard)
{
	COMMONP
	OP_P_CC_RD_RM_SHIFT(JUSTPARAMS,"CMP",P,cond,Rn,Rm,type,imm5);
	return;
}

CMP_rsr_A1(cond,Rn,Rs,type,Rm,nonstandard)
{
	COMMONP
	_UNPREDICTABLE((Rn==15) || (Rm==15) || (Rs==15));
	OP_P_CC_RD_RM_RS(JUSTPARAMS,"CMP",P,cond,Rn,Rm,type,Rs);
	return;
}

DBG_A1(cond,option,nonstandard)
{
	COMMON
	ONLY1(ARMv7);
	NOP2(ARMv6K,ARMv6T2);
	sprintf(params->buf,"DBG%s\t#%d",condition(JUSTPARAMS,cond),option);
	return;
}

DMB_A1(option,nonstandard)
{
	COMMON
	ONLY1(ARMv7);
	if(!dmb_dsb_opt[option].valid)
		warning(JUSTPARAMS,WARN_BAD_DMB_DSB_ISB_OPTION);
	/* Special mention OSHLD/NSHLD/ISHLD/LD */
	if((option==1)||(option==5)||(option==9)||(option==13))
		ONLY1(ARMv8);
	sprintf(params->buf,"DMB\t%s",dmb_dsb_opt[option].str);
	return;
}

DSB_A1(option,nonstandard)
{
	COMMON
	ONLY1(ARMv7);
	if(!dmb_dsb_opt[option].valid)
		warning(JUSTPARAMS,WARN_BAD_DMB_DSB_ISB_OPTION);
	/* Special mention OSHLD/NSHLD/ISHLD/LD */
	if((option==1)||(option==5)||(option==9)||(option==13))
		ONLY1(ARMv8);
	sprintf(params->buf,"DSB\t%s",dmb_dsb_opt[option].str);
	return;
}

EOR_imm_A1(cond,S,Rn,Rd,imm12,nonstandard)
{
	COMMON
	SUBS_PC_LR(JUSTPARAMS,S,Rd,Rn);
	OP_S_CC_RD_RN_IMM12(JUSTPARAMS,"EOR",S,cond,Rd,Rn,imm12);
	return;
}

EOR_reg_A1(cond,S,Rn,Rd,imm5,type,Rm,nonstandard)
{
	COMMON
	SUBS_PC_LR(JUSTPARAMS,S,Rd,Rn);
	OP_S_CC_RD_RN_RM_SHIFT(JUSTPARAMS,"EOR",S,cond,Rd,Rn,Rm,type,imm5);
	return;
}

EOR_rsr_A1(cond,S,Rn,Rd,Rs,type,Rm,nonstandard)
{
	COMMON
	_UNPREDICTABLE((Rd==15) || (Rn==15) || (Rm==15) || (Rs==15));
	OP_S_CC_RD_RN_RM_RS(JUSTPARAMS,"EOR",S,cond,Rd,Rn,Rm,type,Rs);
	return;
}

ISB_A1(option,nonstandard)
{
	COMMON
	ONLY1(ARMv7);
	if(!isb_opt[option].valid)
		warning(JUSTPARAMS,WARN_BAD_DMB_DSB_ISB_OPTION);
	sprintf(params->buf,"ISB\t%s",isb_opt[option].str);
	return;
}

LDC_LDC2_imm_A1(cond,P,U,D,W,Rn,CRd,coproc,imm8,nonstandard)
{
	COMMON
	const char *fmt;
	UALIFY((D?"L":""),cond)
	if(params->opt->ual)
	{
		fmt = "LDC%s%s\tp%d,c%d,[%s";
	}
	else
	{
		fmt = "LDC%s%s\tCP%d,C%d,[%s";
	}
	sprintf(params->buf,fmt,post1,post2,coproc,CRd,REG(Rn));
	if(P || W)
	{
		doldrstrimm(JUSTPARAMS,P,U,W,imm8<<2);
	}
	else
	{
		/* U==1 */
		scatf(params->buf,"],{%d}",imm8);
	}
	return;
}

LDC_LDC2_imm_A2(P,U,D,W,Rn,CRd,coproc,imm8,nonstandard)
{
	COMMON
	ONLY3(ARMv5Tstar,ARMv6star,ARMv7);
	const char *fmt = (params->opt->ual?"LDC2%s\tp%d,c%d,[%s":"LDC2%s\tCP%d,C%d,[%s");
	sprintf(params->buf,fmt,(D?"L":""),coproc,CRd,REG(Rn));
	if(P || W)
	{
		doldrstrimm(JUSTPARAMS,P,U,W,imm8<<2);
	}
	else
	{
		/* U==1 */
		scatf(params->buf,"],{%d}",imm8);
	}
	return;
}

LDC_LDC2_lit_A1(cond,P,U,D,W,CRd,coproc,imm8,nonstandard)
{
	COMMON
	const char *fmt;
	UALIFY((D?"L":""),cond)
	if(params->opt->ual)
	{
		fmt = "LDC%s%s\tp%d,c%d,";
	}
	else
	{
		fmt = "LDC%s%s\tCP%d,C%d,";
	}
	sprintf(params->buf,fmt,post1,post2,coproc,CRd);
	if(P)
	{
		doldrstrlit(JUSTPARAMS,U,W,imm8<<2,true);
	}
	else if(W)
	{
		/* Should we just map this to 'unpredictable' and be done with it? */
		warning(JUSTPARAMS,WARN_UNPREDICTABLE_PC_WRITEBACK);
		scatf(params->buf,(U?"[%s],#%d":"[%s],#-%d"),REG(15),imm8<<2);
	}
	else
	{
		/* U==1 */
		scatf(params->buf,"[%s],{%d}",REG(15),imm8);
	}
	return;
}

LDC_LDC2_lit_A2(P,U,D,W,CRd,coproc,imm8,nonstandard)
{
	COMMON
	ONLY3(ARMv5Tstar,ARMv6star,ARMv7);
	const char *fmt = (params->opt->ual?"LDC2%s\tp%d,c%d,":"LDC2%s\tCP%d,C%d,");
	sprintf(params->buf,fmt,(D?"L":""),coproc,CRd);
	if(P)
	{
		doldrstrlit(JUSTPARAMS,U,W,imm8<<2,true);
	}
	else if(W)
	{
		/* Should we just map this to 'unpredictable' and be done with it? */
		warning(JUSTPARAMS,WARN_UNPREDICTABLE_PC_WRITEBACK);
		scatf(params->buf,(U?"[%s],#%d":"[%s],#-%d"),REG(15),imm8<<2);
	}
	else
	{
		/* U==1 */
		scatf(params->buf,"[%s],{%d}",REG(15),imm8);
	}
	return;
}

LDMIA_A1(cond,W,Rn,reglist,nonstandard)
{
	COMMON
	_UNPREDICTABLE((Rn==15)||(!reglist));
	_UNPREDICTABLE_ARCH_GE(W && (reglist & (1<<Rn)),7);
	if(reglist & (1<<13)) warning(JUSTPARAMS,WARN_LDM_SP);
	if((reglist & (3<<14)) == (3<<14)) warning(JUSTPARAMS,WARN_LDM_LR_PC);
	sprintf(params->buf,"LDM%s%s\t%s%s,{",condition(JUSTPARAMS,cond),(params->opt->ual?"":"IA"),REG(Rn),(W?"!":""));
	doreglist(JUSTPARAMS,reglist);
	strcat(params->buf,"}");
	return;
}

LDMDA_A1(cond,W,Rn,reglist,nonstandard)
{
	COMMON
	_UNPREDICTABLE((Rn==15)||(!reglist));
	_UNPREDICTABLE_ARCH_GE(W && (reglist & (1<<Rn)),7);
	if(reglist & (1<<13)) warning(JUSTPARAMS,WARN_LDM_SP);
	if((reglist & (3<<14)) == (3<<14)) warning(JUSTPARAMS,WARN_LDM_LR_PC);
	const char *fmt = (params->opt->ual?"LDMDA%s\t%s%s,{":"LDM%sDA\t%s%s,{");
	sprintf(params->buf,fmt,condition(JUSTPARAMS,cond),REG(Rn),(W?"!":""));
	doreglist(JUSTPARAMS,reglist);
	strcat(params->buf,"}");
	return;
}

LDMDB_A1(cond,W,Rn,reglist,nonstandard)
{
	COMMON
	_UNPREDICTABLE((Rn==15)||(!reglist));
	_UNPREDICTABLE_ARCH_GE(W && (reglist & (1<<Rn)),7);
	if(reglist & (1<<13)) warning(JUSTPARAMS,WARN_LDM_SP);
	if((reglist & (3<<14)) == (3<<14)) warning(JUSTPARAMS,WARN_LDM_LR_PC);
	const char *fmt = (params->opt->ual?"LDMDB%s\t%s%s,{":"LDM%sDB\t%s%s,{");
	sprintf(params->buf,fmt,condition(JUSTPARAMS,cond),REG(Rn),(W?"!":""));
	doreglist(JUSTPARAMS,reglist);
	strcat(params->buf,"}");
	return;
}

LDMIB_A1(cond,W,Rn,reglist,nonstandard)
{
	COMMON
	_UNPREDICTABLE((Rn==15)||(!reglist));
	_UNPREDICTABLE_ARCH_GE(W && (reglist & (1<<Rn)),7);
	if(reglist & (1<<13)) warning(JUSTPARAMS,WARN_LDM_SP);
	if((reglist & (3<<14)) == (3<<14)) warning(JUSTPARAMS,WARN_LDM_LR_PC);
	const char *fmt = (params->opt->ual?"LDMIB%s\t%s%s,{":"LDM%sIB\t%s%s,{");
	sprintf(params->buf,fmt,condition(JUSTPARAMS,cond),REG(Rn),(W?"!":""));
	doreglist(JUSTPARAMS,reglist);
	strcat(params->buf,"}");
	return;
}

LDR_imm_A1(cond,P,U,W,Rn,Rt,imm12,nonstandard)
{
	COMMON
	bool wback = (!P || W);
	_UNPREDICTABLE(wback && (Rn==Rt));
	sprintf(params->buf,"LDR%s\t%s,[%s",condition(JUSTPARAMS,cond),REG(Rt),REG(Rn));
	doldrstrimm(JUSTPARAMS,P,U,W,imm12);
	return;
}

LDR_lit_A1(cond,U,Rt,imm12,nonstandard)
{
	COMMON
	sprintf(params->buf,"LDR%s\t%s,",condition(JUSTPARAMS,cond),REG(Rt));
	doldrstrlit(JUSTPARAMS,U,0,imm12,false);
	return;
}

LDR_reg_A1(cond,P,U,W,Rn,Rt,imm5,type,Rm,nonstandard)
{
	COMMON
	bool wback = (!P || W);
	_UNPREDICTABLE((Rm==15) || (wback && ((Rn==15) || (Rn==Rt))));
	_UNPREDICTABLE_ARCH_LT(wback && (Rm==Rn),6);
	sprintf(params->buf,"LDR%s\t%s,[%s",condition(JUSTPARAMS,cond),REG(Rt),REG(Rn));
	if(!P)
		strcat(params->buf,"]");
	scatf(params->buf,",%s%s",(U?"":"-"),REG(Rm));
	doimmshift(JUSTPARAMS,type,imm5);
	if(P)
	{
		if(wback)
			strcat(params->buf,"]!");
		else
			strcat(params->buf,"]");
	}
	return;
}

LDRB_imm_A1(cond,P,U,W,Rn,Rt,imm12,nonstandard)
{
	COMMON
	bool wback = (!P || W);
	_UNPREDICTABLE((Rt==15) || (wback && (Rn==Rt)));
	const char *fmt = (params->opt->ual?"LDRB%s\t%s,[%s":"LDR%sB\t%s,[%s");
	sprintf(params->buf,fmt,condition(JUSTPARAMS,cond),REG(Rt),REG(Rn));
	doldrstrimm(JUSTPARAMS,P,U,W,imm12);
	return;
}

LDRB_lit_A1(cond,U,Rt,imm12,nonstandard)
{
	COMMON
	_UNPREDICTABLE(Rt==15);
	const char *fmt = (params->opt->ual?"LDRB%s\t%s,":"LDR%sB\t%s,");
	sprintf(params->buf,fmt,condition(JUSTPARAMS,cond),REG(Rt));
	doldrstrlit(JUSTPARAMS,U,0,imm12,false);
	return;
}

LDRB_reg_A1(cond,P,U,W,Rn,Rt,imm5,type,Rm,nonstandard)
{
	COMMON
	bool wback = (!P || W);
	_UNPREDICTABLE((Rt==15) || (Rm==15) || (wback && ((Rn==15) || (Rn==Rt))));
	_UNPREDICTABLE_ARCH_LT(wback && (Rm==Rn),6);
	const char *fmt = (params->opt->ual?"LDRB%s\t%s,[%s":"LDR%sB\t%s,[%s");
	sprintf(params->buf,fmt,condition(JUSTPARAMS,cond),REG(Rt),REG(Rn));
	if(!P)
		strcat(params->buf,"]");
	scatf(params->buf,",%s%s",(U?"":"-"),REG(Rm));
	doimmshift(JUSTPARAMS,type,imm5);
	if(P)
	{
		if(wback)
			strcat(params->buf,"]!");
		else
			strcat(params->buf,"]");
	}
	return;
}

LDRBT_A1(cond,U,Rn,Rt,imm12,nonstandard)
{
	COMMON
	_UNPREDICTABLE((Rt==15) || (Rn==15) || (Rn==Rt));
	const char *fmt = (params->opt->ual?"LDRBT%s\t%s,[%s],#%s%d":"LDR%sBT\t%s,[%s],#%s%d");
	sprintf(params->buf,fmt,condition(JUSTPARAMS,cond),REG(Rt),REG(Rn),(U?"":"-"),imm12);
	return;
}

LDRBT_A2(cond,U,Rn,Rt,imm5,type,Rm,nonstandard)
{
	COMMON
	_UNPREDICTABLE((Rt==15) || (Rn==15) || (Rn==Rt) || (Rm==15));
	_UNPREDICTABLE_ARCH_LT(Rm==Rn,6);
	const char *fmt = (params->opt->ual?"LDRBT%s\t%s,[%s],":"LDR%sBT\t%s,[%s],");
	sprintf(params->buf,fmt,condition(JUSTPARAMS,cond),REG(Rt),REG(Rn));
	scatf(params->buf,"%s%s",(U?"":"-"),REG(Rm));
	doimmshift(JUSTPARAMS,type,imm5);
	return;
}

LDRD_imm_A1(cond,P,U,W,Rn,Rt,imm4H:imm4L,nonstandard)
{
	COMMON
	ONLY3(ARMv5TEstar,ARMv6star,ARMv7);
	bool wback = (!P || W);
	_UNPREDICTABLE((Rt&1) || (!P && W) || (wback && ((Rn&0xe)==Rt)) || (Rt==14));
	if(params->opt->ual)
		sprintf(params->buf,"LDRD%s\t%s,%s,[%s",condition(JUSTPARAMS,cond),REG(Rt),REG((Rt+1)&0xf),REG(Rn));
	else
		sprintf(params->buf,"LDR%sD\t%s,[%s",condition(JUSTPARAMS,cond),REG(Rt),REG(Rn));
	doldrstrimm(JUSTPARAMS,P,U,W,imm4H_imm4L);
	return;
}

LDRD_lit_A1(cond,U,Rt,imm4H:imm4L,nonstandard)
{
	COMMON
	ONLY3(ARMv5TEstar,ARMv6star,ARMv7);
	_UNPREDICTABLE((Rt&1) || (Rt==14));
	if(params->opt->ual)
		sprintf(params->buf,"LDRD%s\t%s,%s,",condition(JUSTPARAMS,cond),REG(Rt),REG((Rt+1)&0xf));
	else
		sprintf(params->buf,"LDR%sD\t%s,",condition(JUSTPARAMS,cond),REG(Rt));
	doldrstrlit(JUSTPARAMS,U,0,imm4H_imm4L,false);
	return;
}

LDRD_reg_A1(cond,P,U,W,Rn,Rt,Rm,nonstandard)
{
	COMMON
	ONLY3(ARMv5TEstar,ARMv6star,ARMv7);
	bool wback = (!P || W);
	_UNPREDICTABLE((Rt&1) || (!P && W) || (Rt==14) || (Rm==15) || ((Rm&0xe)==Rt) || (wback && ((Rn==15) || ((Rn&0xe)==Rt))));
	_UNPREDICTABLE_ARCH_LT(wback && (Rm==Rn),6);
	const char *cc = condition(JUSTPARAMS,cond);
	if(params->opt->ual)
		sprintf(params->buf,"LDRD%s\t%s,%s,[%s",cc,REG(Rt),REG((Rt+1)&0xf),REG(Rn));
	else
		sprintf(params->buf,"LDR%sD\t%s,[%s",cc,REG(Rt),REG(Rn));
	if(!P)
		strcat(params->buf,"]");
	scatf(params->buf,",%s%s",(U?"":"-"),REG(Rm));
	if(P)
	{
		if(wback)
			strcat(params->buf,"]!");
		else
			strcat(params->buf,"]");
	}
	return;
}

LDREX_A1(cond,Rn,Rt,nonstandard)
{
	COMMON
	ONLY2(ARMv6star,ARMv7);
	_UNPREDICTABLE((Rt==15) || (Rn==15));
	sprintf(params->buf,"LDREX%s\t%s,[%s]",condition(JUSTPARAMS,cond),REG(Rt),REG(Rn));
	return;
}

LDREXB_A1(cond,Rn,Rt,nonstandard)
{
	COMMON
	ONLY2(ARMv6K,ARMv7);
	_UNPREDICTABLE((Rt==15) || (Rn==15));
	sprintf(params->buf,"LDREXB%s\t%s,[%s]",condition(JUSTPARAMS,cond),REG(Rt),REG(Rn));
	return;
}

LDREXD_A1(cond,Rn,Rt,nonstandard)
{
	COMMON
	ONLY2(ARMv6K,ARMv7);
	_UNPREDICTABLE((Rt&1) || (Rt==14) || (Rn==15));
	sprintf(params->buf,"LDREXD%s\t%s,%s,[%s]",condition(JUSTPARAMS,cond),REG(Rt),REG((Rt+1)&0xf),REG(Rn));
	return;
}

LDREXH_A1(cond,Rn,Rt,nonstandard)
{
	COMMON
	ONLY2(ARMv6K,ARMv7);
	_UNPREDICTABLE((Rt==15) || (Rn==15));
	sprintf(params->buf,"LDREXH%s\t%s,[%s]",condition(JUSTPARAMS,cond),REG(Rt),REG(Rn));
	return;
}

LDRH_imm_A1(cond,P,U,W,Rn,Rt,imm4H:imm4L,nonstandard)
{
	COMMON
	bool wback = (!P || W);
	_UNPREDICTABLE((Rt==15) || (wback && (Rn==Rt)));
	const char *fmt = (params->opt->ual?"LDRH%s\t%s,[%s":"LDR%sH\t%s,[%s");
	sprintf(params->buf,fmt,condition(JUSTPARAMS,cond),REG(Rt),REG(Rn));
	doldrstrimm(JUSTPARAMS,P,U,W,imm4H_imm4L);
	return;
}

LDRH_lit_A1(cond,U,Rt,imm4H:imm4L,nonstandard)
{
	COMMON
	_UNPREDICTABLE(Rt==15);
	const char *fmt = (params->opt->ual?"LDRH%s\t%s,":"LDR%sH\t%s,");
	sprintf(params->buf,fmt,condition(JUSTPARAMS,cond),REG(Rt));
	doldrstrlit(JUSTPARAMS,U,0,imm4H_imm4L,false);
	return;
}

LDRH_reg_A1(cond,P,U,W,Rn,Rt,Rm,nonstandard)
{
	COMMON
	bool wback = (!P || W);
	_UNPREDICTABLE((Rt==15) || (Rm==15) || (wback && ((Rn==15) || (Rn==Rt))));
	_UNPREDICTABLE_ARCH_LT(wback && (Rm==Rn),6);
	const char *fmt = (params->opt->ual?"LDRH%s\t%s,[%s":"LDR%sH\t%s,[%s");
	sprintf(params->buf,fmt,condition(JUSTPARAMS,cond),REG(Rt),REG(Rn));
	if(!P)
		strcat(params->buf,"]");
	scatf(params->buf,",%s%s",(U?"":"-"),REG(Rm));
	if(P)
	{
		if(wback)
			strcat(params->buf,"]!");
		else
			strcat(params->buf,"]");
	}
	return;
}

LDRHT_A1(cond,U,Rn,Rt,imm4H:imm4L,nonstandard)
{
	COMMON
	ONLY2(ARMv6T2,ARMv7);
	_UNPREDICTABLE((Rt==15) || (Rn==15) || (Rn==Rt));
	const char *fmt = (params->opt->ual?"LDRHT%s\t%s,[%s],#%s%d":"LDR%sHT\t%s,[%s],#%s%d");
	sprintf(params->buf,fmt,condition(JUSTPARAMS,cond),REG(Rt),REG(Rn),(U?"":"-"),imm4H_imm4L);
	return;
}

LDRHT_A2(cond,U,Rn,Rt,Rm,nonstandard)
{
	COMMON
	ONLY2(ARMv6T2,ARMv7);
	_UNPREDICTABLE((Rt==15) || (Rn==15) || (Rn==Rt) || (Rm==15));
	const char *fmt = (params->opt->ual?"LDRHT%s\t%s,[%s],%s%s":"LDR%sHT\t%s,[%s],%s%s");
	sprintf(params->buf,fmt,condition(JUSTPARAMS,cond),REG(Rt),REG(Rn),(U?"":"-"),REG(Rm));
	return;
}

LDRSB_imm_A1(cond,P,U,W,Rn,Rt,imm4H:imm4L,nonstandard)
{
	COMMON
	bool wback = (!P || W);
	_UNPREDICTABLE((Rt==15) || (wback && (Rn==Rt)));
	const char *fmt = (params->opt->ual?"LDRSB%s\t%s,[%s":"LDR%sSB\t%s,[%s");
	sprintf(params->buf,fmt,condition(JUSTPARAMS,cond),REG(Rt),REG(Rn));
	doldrstrimm(JUSTPARAMS,P,U,W,imm4H_imm4L);
	return;
}

LDRSB_lit_A1(cond,U,Rt,imm4H:imm4L,nonstandard)
{
	COMMON
	_UNPREDICTABLE(Rt==15);
	const char *fmt = (params->opt->ual?"LDRSB%s\t%s,":"LDR%sSB\t%s,");
	sprintf(params->buf,fmt,condition(JUSTPARAMS,cond),REG(Rt));
	doldrstrlit(JUSTPARAMS,U,0,imm4H_imm4L,false);
	return;
}

LDRSB_reg_A1(cond,P,U,W,Rn,Rt,Rm,nonstandard)
{
	COMMON
	bool wback = (!P || W);
	_UNPREDICTABLE((Rt==15) || (Rm==15) || (wback && ((Rn==15) || (Rn==Rt))));
	_UNPREDICTABLE_ARCH_LT(wback && (Rm==Rn),6);
	const char *fmt = (params->opt->ual?"LDRSB%s\t%s,[%s":"LDR%sSB\t%s,[%s");
	sprintf(params->buf,fmt,condition(JUSTPARAMS,cond),REG(Rt),REG(Rn));
	if(!P)
		strcat(params->buf,"]");
	scatf(params->buf,",%s%s",(U?"":"-"),REG(Rm));
	if(P)
	{
		if(wback)
			strcat(params->buf,"]!");
		else
			strcat(params->buf,"]");
	}
	return;
}

LDRSBT_A1(cond,U,Rn,Rt,imm4H:imm4L,nonstandard)
{
	COMMON
	ONLY2(ARMv6T2,ARMv7);
	_UNPREDICTABLE((Rt==15) || (Rn==15) || (Rn==Rt));
	const char *fmt = (params->opt->ual?"LDRSBT%s\t%s,[%s],#%s%d":"LDR%sSBT\t%s,[%s],#%s%d");
	sprintf(params->buf,fmt,condition(JUSTPARAMS,cond),REG(Rt),REG(Rn),(U?"":"-"),imm4H_imm4L);
	return;
}

LDRSBT_A2(cond,U,Rn,Rt,Rm,nonstandard)
{
	COMMON
	ONLY2(ARMv6T2,ARMv7);
	_UNPREDICTABLE((Rt==15) || (Rn==15) || (Rn==Rt) || (Rm==15));
	const char *fmt = (params->opt->ual?"LDRSBT%s\t%s,[%s],%s%s":"LDR%sSBT\t%s,[%s],%s%s");
	sprintf(params->buf,fmt,condition(JUSTPARAMS,cond),REG(Rt),REG(Rn),(U?"":"-"),REG(Rm));
	return;
}

LDRSH_imm_A1(cond,P,U,W,Rn,Rt,imm4H:imm4L,nonstandard)
{
	COMMON
	bool wback = (!P || W);
	_UNPREDICTABLE((Rt==15) || (wback && (Rn==Rt)));
	const char *fmt = (params->opt->ual?"LDRSH%s\t%s,[%s":"LDR%sSH\t%s,[%s");
	sprintf(params->buf,fmt,condition(JUSTPARAMS,cond),REG(Rt),REG(Rn));
	doldrstrimm(JUSTPARAMS,P,U,W,imm4H_imm4L);
	return;
}

LDRSH_lit_A1(cond,U,Rt,imm4H:imm4L,nonstandard)
{
	COMMON
	_UNPREDICTABLE(Rt==15);
	const char *fmt = (params->opt->ual?"LDRSH%s\t%s,":"LDR%sSH\t%s,");
	sprintf(params->buf,fmt,condition(JUSTPARAMS,cond),REG(Rt));
	doldrstrlit(JUSTPARAMS,U,0,imm4H_imm4L,false);
	return;
}

LDRSH_reg_A1(cond,P,U,W,Rn,Rt,Rm,nonstandard)
{
	COMMON
	bool wback = (!P || W);
	_UNPREDICTABLE((Rt==15) || (Rm==15) || (wback && ((Rn==15) || (Rn==Rt))));
	_UNPREDICTABLE_ARCH_LT(wback && (Rm==Rn),6);
	const char *fmt = (params->opt->ual?"LDRSH%s\t%s,[%s":"LDR%sSH\t%s,[%s");
	sprintf(params->buf,fmt,condition(JUSTPARAMS,cond),REG(Rt),REG(Rn));
	if(!P)
		strcat(params->buf,"]");
	scatf(params->buf,",%s%s",(U?"":"-"),REG(Rm));
	if(P)
	{
		if(wback)
			strcat(params->buf,"]!");
		else
			strcat(params->buf,"]");
	}
	return;
}

LDRSHT_A1(cond,U,Rn,Rt,imm4H:imm4L,nonstandard)
{
	COMMON
	ONLY2(ARMv6T2,ARMv7);
	_UNPREDICTABLE((Rt==15) || (Rn==15) || (Rn==Rt));
	const char *fmt = (params->opt->ual?"LDRSHT%s\t%s,[%s],#%s%d":"LDR%sSHT\t%s,[%s],#%s%d");
	sprintf(params->buf,fmt,condition(JUSTPARAMS,cond),REG(Rt),REG(Rn),(U?"":"-"),imm4H_imm4L);
	return;
}

LDRSHT_A2(cond,U,Rn,Rt,Rm,nonstandard)
{
	COMMON
	ONLY2(ARMv6T2,ARMv7);
	_UNPREDICTABLE((Rt==15) || (Rn==15) || (Rn==Rt) || (Rm==15));
	const char *fmt = (params->opt->ual?"LDRSHT%s\t%s,[%s],%s%s":"LDR%sSHT\t%s,[%s],%s%s");
	sprintf(params->buf,fmt,condition(JUSTPARAMS,cond),REG(Rt),REG(Rn),(U?"":"-"),REG(Rm));
	return;
}

LDRT_A1(cond,U,Rn,Rt,imm12,nonstandard)
{
	COMMON
	_UNPREDICTABLE((Rt==15) || (Rn==15) || (Rn==Rt));
	const char *fmt = (params->opt->ual?"LDRT%s\t%s,[%s],#%s%d":"LDR%sT\t%s,[%s],#%s%d");
	sprintf(params->buf,fmt,condition(JUSTPARAMS,cond),REG(Rt),REG(Rn),(U?"":"-"),imm12);
	return;
}

LDRT_A2(cond,U,Rn,Rt,imm5,type,Rm,nonstandard)
{
	COMMON
	_UNPREDICTABLE((Rt==15) || (Rn==15) || (Rn==Rt) || (Rm==15));
	_UNPREDICTABLE_ARCH_LT(Rm==Rn,6);
	const char *fmt = (params->opt->ual?"LDRT%s\t%s,[%s],%s%s":"LDR%sT\t%s,[%s],%s%s");
	sprintf(params->buf,fmt,condition(JUSTPARAMS,cond),REG(Rt),REG(Rn),(U?"":"-"),REG(Rm));
	doimmshift(JUSTPARAMS,type,imm5);
	return;
}

LSL_imm_A1(cond,S,Rd,imm5,Rm,nonstandard)
{
	COMMON
	if(params->opt->ual)
		OP_S_CC_RD_RM_IMM(JUSTPARAMS,"LSL",S,cond,Rd,Rm,DecodeImmShift(0,imm5).amt);
	else
		OP_S_CC_RD_RM_SHIFT(JUSTPARAMS,"MOV",S,cond,Rd,Rm,0,imm5);
	return;
}

LSL_reg_A1(cond,S,Rd,Rm,Rn,nonstandard)
{
	COMMON
	_UNPREDICTABLE((Rd==15) || (Rn==15) || (Rm==15));
	if(params->opt->ual)
		OP_S_CC_RD_RN_RM(JUSTPARAMS,"LSL",S,cond,Rd,Rn,Rm);
	else
		OP_S_CC_RD_RM_RS(JUSTPARAMS,"MOV",S,cond,Rd,Rn,0,Rm);
	return;
}

LSR_imm_A1(cond,S,Rd,imm5,Rm,nonstandard)
{
	COMMON
	if(params->opt->ual)
		OP_S_CC_RD_RM_IMM(JUSTPARAMS,"LSR",S,cond,Rd,Rm,DecodeImmShift(1,imm5).amt);
	else
		OP_S_CC_RD_RM_SHIFT(JUSTPARAMS,"MOV",S,cond,Rd,Rm,1,imm5);
	return;
}

LSR_reg_A1(cond,S,Rd,Rm,Rn,nonstandard)
{
	COMMON
	_UNPREDICTABLE((Rd==15) || (Rn==15) || (Rm==15));
	if(params->opt->ual)
		OP_S_CC_RD_RN_RM(JUSTPARAMS,"LSR",S,cond,Rd,Rn,Rm);
	else
		OP_S_CC_RD_RM_RS(JUSTPARAMS,"MOV",S,cond,Rd,Rn,1,Rm);
	return;
}

MCR_MCR2_A1(cond,opc1,CRn,Rt,coproc,opc2,CRm,nonstandard)
{
	COMMON
	_UNPREDICTABLE(Rt==15);
	const char *fmt = (params->opt->ual?"MCR%s\tp%d,%d,%s,c%d,c%d":"MCR%s\tCP%d,%d,%s,C%d,C%d");
	sprintf(params->buf,fmt,condition(JUSTPARAMS,cond),coproc,opc1,REG(Rt),CRn,CRm);
	if(opc2)
		scatf(params->buf,",%d",opc2);
	return;
}

MCR_MCR2_A2(opc1,CRn,Rt,coproc,opc2,CRm,nonstandard)
{
	COMMON
	ONLY3(ARMv5Tstar,ARMv6star,ARMv7);
	_UNPREDICTABLE(Rt==15);
	const char *fmt = (params->opt->ual?"MCR2\tp%d,%d,%s,c%d,c%d":"MCR2\tCP%d,%d,%s,C%d,C%d");
	sprintf(params->buf,fmt,coproc,opc1,REG(Rt),CRn,CRm);
	if(opc2)
		scatf(params->buf,",%d",opc2);
	return;
}

MCRR_MCRR2_A1(cond,Rt2,Rt,coproc,opc1,CRm,nonstandard)
{
	COMMON
	ONLY3(ARMv5TEstar,ARMv6star,ARMv7);
	_UNPREDICTABLE((Rt==15) || (Rt2==15));
	const char *fmt = (params->opt->ual?"MCRR%s\tp%d,%d,%s,%s,c%d":"MCRR%s\tCP%d,%d,%s,%s,C%d");
	sprintf(params->buf,fmt,condition(JUSTPARAMS,cond),coproc,opc1,REG(Rt),REG(Rt2),CRm);
	return;
}

MCRR_MCRR2_A2(Rt2,Rt,coproc,opc1,CRm,nonstandard)
{
	COMMON
	ONLY2(ARMv6star,ARMv7);
	_UNPREDICTABLE((Rt==15) || (Rt2==15));
	const char *fmt = (params->opt->ual?"MCRR2\tp%d,%d,%s,%s,c%d":"MCRR2\tCP%d,%d,%s,%s,C%d");
	sprintf(params->buf,fmt,coproc,opc1,REG(Rt),REG(Rt2),CRm);
	return;
}

MLA_A1(cond,S,Rd,Ra,Rm,Rn,nonstandard)
{
	COMMON
	_UNPREDICTABLE((Rd==15) || (Rn==15) || (Rm==15) || (Ra==15));
	_UNPREDICTABLE_ARCH_LT(Rd==Rn,6);
	OP_S_CC_RD_RN_RM_RA(JUSTPARAMS,"MLA",S,cond,Rd,Rn,Rm,Ra);
	return;
}

MLS_A1(cond,Rd,Ra,Rm,Rn,nonstandard)
{
	COMMON
	_UNPREDICTABLE((Rd==15) || (Rn==15) || (Rm==15) || (Ra==15));
	OP_S_CC_RD_RN_RM_RA(JUSTPARAMS,"MLS",false,cond,Rd,Rn,Rm,Ra);
	return;
}

MOV_imm_A1(cond,S,Rd,imm12,nonstandard)
{
	COMMON
	/* TODO - SUBS_PC_LR? */
	OP_S_CC_RD_IMM12(JUSTPARAMS,"MOV",S,cond,Rd,imm12);
	return;
}

MOV_imm_A2(cond,imm4:imm12,Rd,nonstandard)
{
	COMMON
	ONLY2(ARMv6T2,ARMv7);
	_UNPREDICTABLE(Rd==15);
	sprintf(params->buf,"MOVW%s\t%s,#%s%04X",condition(JUSTPARAMS,cond),REG(Rd),HEX,imm4_imm12);
	return;
}

MOV_reg_A1(cond,S,Rd,Rm,nonstandard)
{
	COMMON
	/* TODO - SUBS_PC_LR? */
	OP_S_CC_RD_RM(JUSTPARAMS,"MOV",S,cond,Rd,Rm);
	return;
}

MOVT_A1(cond,imm4:imm12,Rd,nonstandard)
{
	COMMON
	ONLY2(ARMv6T2,ARMv7);
	_UNPREDICTABLE(Rd==15);
	sprintf(params->buf,"MOVT%s\t%s,#%s%04X",condition(JUSTPARAMS,cond),REG(Rd),HEX,imm4_imm12);
	return;
}


MRC_MRC2_A1(cond,opc1,CRn,Rt,coproc,opc2,CRm,nonstandard)
{
	COMMON
	_UNPREDICTABLE(Rt==15);
	const char *fmt,*reg=REG(Rt);
	if(params->opt->ual)
	{
		fmt = "MRC%s\tp%d,%d,%s,c%d,c%d";
		if(Rt == 15)
			reg = "APSR_nzcv";
	}
	else
		fmt = "MRC%s\tCP%d,%d,%s,C%d,C%d";
	sprintf(params->buf,fmt,condition(JUSTPARAMS,cond),coproc,opc1,reg,CRn,CRm);
	if(opc2)
		scatf(params->buf,",%d",opc2);
	return;
}

MRC_MRC2_A2(opc1,CRn,Rt,coproc,opc2,CRm,nonstandard)
{
	COMMON
	ONLY3(ARMv5Tstar,ARMv6star,ARMv7);
	const char *fmt,*reg=REG(Rt);
	if(params->opt->ual)
	{
		fmt = "MRC2\tp%d,%d,%s,c%d,c%d";
		if(Rt == 15)
			reg = "APSR_nzcv";
	}
	else
		fmt = "MRC2\tCP%d,%d,%s,C%d,C%d";
	sprintf(params->buf,fmt,coproc,opc1,reg,CRn,CRm);
	if(opc2)
		scatf(params->buf,",%d",opc2);
	return;
}

MRRC_MRRC2_A1(cond,Rt2,Rt,coproc,opc1,CRm,nonstandard)
{
	COMMON
	ONLY3(ARMv5TEstar,ARMv6star,ARMv7);
	_UNPREDICTABLE((Rt==15) || (Rt2==15) || (Rt==Rt2));
	const char *fmt = (params->opt->ual?"MRRC%s\tp%d,%d,%s,%s,c%d":"MRRC%s\tCP%d,%d,%s,%s,C%d");
	sprintf(params->buf,fmt,condition(JUSTPARAMS,cond),coproc,opc1,REG(Rt),REG(Rt2),CRm);
	return;
}

MRRC_MRRC2_A2(Rt2,Rt,coproc,opc1,CRm,nonstandard)
{
	COMMON
	ONLY2(ARMv6star,ARMv7);
	_UNPREDICTABLE((Rt==15) || (Rt2==15) || (Rt==Rt2));
	const char *fmt = (params->opt->ual?"MRRC2\tp%d,%d,%s,%s,c%d":"MRRC2\tCP%d,%d,%s,%s,C%d");
	sprintf(params->buf,fmt,coproc,opc1,REG(Rt),REG(Rt2),CRm);
	return;
}

MUL_A1(cond,S,Rd,Rm,Rn,nonstandard)
{
	COMMON
	_UNPREDICTABLE((Rd==15) || (Rn==15) || (Rm==15));
	_UNPREDICTABLE_ARCH_LT(Rd==Rn,6);
	OP_S_CC_RD_RN_RM(JUSTPARAMS,"MUL",S,cond,Rd,Rn,Rm);
	return;
}

MVN_imm_A1(cond,S,Rd,imm12,nonstandard)
{
	COMMON
	/* TODO - SUBS_PC_LR? */
	OP_S_CC_RD_IMM12(JUSTPARAMS,"MVN",S,cond,Rd,imm12);
	return;
}

MVN_reg_A1(cond,S,Rd,imm5,type,Rm,nonstandard)
{
	COMMON
	/* TODO - SUBS_PC_LR? */
	OP_S_CC_RD_RM_SHIFT(JUSTPARAMS,"MVN",S,cond,Rd,Rm,type,imm5);
	return;
}

MVN_rsr_A1(cond,S,Rd,Rs,type,Rm,nonstandard)
{
	COMMON
	_UNPREDICTABLE((Rd==15) || (Rm==15) || (Rs==15));
	OP_S_CC_RD_RM_RS(JUSTPARAMS,"MVN",S,cond,Rd,Rm,type,Rs);
	return;
}

NOP_A1(cond,nonstandard)
{
	COMMON
	ONLY3(ARMv6K,ARMv6T2,ARMv7);
	sprintf(params->buf,"NOP%s",condition(JUSTPARAMS,cond));
	return;
}

ORR_imm_A1(cond,S,Rn,Rd,imm12,nonstandard)
{
	COMMON
	SUBS_PC_LR(JUSTPARAMS,S,Rd,Rn);
	OP_S_CC_RD_RN_IMM12(JUSTPARAMS,"ORR",S,cond,Rd,Rn,imm12);
	return;
}

ORR_reg_A1(cond,S,Rn,Rd,imm5,type,Rm,nonstandard)
{
	COMMON
	SUBS_PC_LR(JUSTPARAMS,S,Rd,Rn);
	OP_S_CC_RD_RN_RM_SHIFT(JUSTPARAMS,"ORR",S,cond,Rd,Rn,Rm,type,imm5);
	return;
}

ORR_rsr_A1(cond,S,Rn,Rd,Rs,type,Rm,nonstandard)
{
	COMMON
	_UNPREDICTABLE((Rd==15) || (Rn==15) || (Rm==15) || (Rs==15));
	OP_S_CC_RD_RN_RM_RS(JUSTPARAMS,"ORR",S,cond,Rd,Rn,Rm,type,Rs);
	return;
}

PKH_A1(cond,Rn,Rd,imm5,tb,Rm,nonstandard)
{
	COMMON
	ONLY2(ARMv6star,ARMv7);
	_UNPREDICTABLE((Rd==15) || (Rn==15) || (Rm==15));
	sprintf(params->buf,"PKH%s%s\t%s,%s,%s",(tb?"TB":"BT"),condition(JUSTPARAMS,cond),REG(Rd),REG(Rn),REG(Rm));
	doimmshift(JUSTPARAMS,tb<<1,imm5);
	return;
}

PLD_imm_A1a(U,Rn,imm12,nonstandard)
{
	COMMON
	ONLY3(ARMv5TEstar,ARMv6star,ARMv7);
	sprintf(params->buf,"PLD\t[%s,#%s%d]",REG(Rn),(U?"":"-"),imm12);
	return;
}

PLD_imm_A1b(U,Rn,imm12,nonstandard)
{
	COMMON
	ONLY1(ARMv7MP);
	sprintf(params->buf,"PLDW\t[%s,#%s%d]",REG(Rn),(U?"":"-"),imm12);
	return;
}

PLD_lit_A1(U,imm12,nonstandard)
{
	COMMON
	ONLY3(ARMv5TEstar,ARMv6star,ARMv7);
	sprintf(params->buf,"PLD\t");
	doldrstrlit(JUSTPARAMS,U,0,imm12,false);
	return;
}

PLD_reg_A1a(U,Rn,imm5,type,Rm,nonstandard)
{
	COMMON
	ONLY3(ARMv5TEstar,ARMv6star,ARMv7);
	_UNPREDICTABLE(Rm==15);
	sprintf(params->buf,"PLD\t[%s,%s%s",REG(Rn),(U?"":"-"),REG(Rm));
	doimmshift(JUSTPARAMS,type,imm5);
	strcat(params->buf,"]");
	return;
}

PLD_reg_A1b(U,Rn,imm5,type,Rm,nonstandard)
{
	COMMON
	ONLY1(ARMv7MP);
	_UNPREDICTABLE((Rm==15) || (Rn==15));
	sprintf(params->buf,"PLDW\t[%s,%s%s",REG(Rn),(U?"":"-"),REG(Rm));
	doimmshift(JUSTPARAMS,type,imm5);
	strcat(params->buf,"]");
	return;
}

PLI_imm_lit_A1(U,Rn,imm12,nonstandard)
{
	COMMON
	ONLY1(ARMv7);
	if(Rn!=15)
		sprintf(params->buf,"PLI\t[%s,#%s%d]",REG(Rn),(U?"":"-"),imm12);
	else
	{
		sprintf(params->buf,"PLI\t");
		doldrstrlit(JUSTPARAMS,U,0,imm12,false);
	}
	return;
}

PLI_reg_A1(U,Rn,imm5,type,Rm,nonstandard)
{
	COMMON
	ONLY1(ARMv7);
	_UNPREDICTABLE(Rm==15);
	sprintf(params->buf,"PLI\t[%s,%s%s",REG(Rn),(U?"":"-"),REG(Rm));
	doimmshift(JUSTPARAMS,type,imm5);
	strcat(params->buf,"]");
	return;
}

POP_A1(cond,reglist,nonstandard)
{
	COMMON
	_UNPREDICTABLE_ARCH_GE((reglist & (1<<13)),7);
	const char *cc = condition(JUSTPARAMS,cond);
	if(reglist & (1<<13)) warning(JUSTPARAMS,WARN_LDM_SP);
	if((reglist & (3<<14)) == (3<<14)) warning(JUSTPARAMS,WARN_LDM_LR_PC);
	if(params->opt->ual)
		sprintf(params->buf,"POP%s\t{",cc);
	else
		sprintf(params->buf,"LDM%sIA\t%s!,{",cc,REG(13));
	doreglist(JUSTPARAMS,reglist);
	strcat(params->buf,"}");
	return;
}

POP_A2(cond,Rt,nonstandard)
{
	COMMON
	_UNPREDICTABLE(Rt==13);
	const char *cc = condition(JUSTPARAMS,cond);
	if(Rt==13) warning(JUSTPARAMS,WARN_LDM_SP);
	if(params->opt->ual)
		sprintf(params->buf,"POP%s\t{%s}",cc,REG(Rt));
	else
		sprintf(params->buf,"LDR%s\t%s,[%s],#4",cc,REG(Rt),REG(13));
	return;
}

PUSH_A1(cond,reglist,nonstandard)
{
	COMMON
	const char *cc = condition(JUSTPARAMS,cond);
	if(reglist & (1<<13)) warning(JUSTPARAMS,WARN_STM_SP);
	if(reglist & (1<<15)) warning(JUSTPARAMS,WARN_STM_PC);
	if(params->opt->ual)
		sprintf(params->buf,"PUSH%s\t{",cc);
	else
		sprintf(params->buf,"STM%sDB\t%s!,{",cc,REG(13));
	doreglist(JUSTPARAMS,reglist);
	strcat(params->buf,"}");
	return;
}

PUSH_A2(cond,Rt,nonstandard)
{
	COMMON
	_UNPREDICTABLE(Rt==13);
	const char *cc = condition(JUSTPARAMS,cond);
	if(Rt==13) warning(JUSTPARAMS,WARN_STM_SP);
	if(Rt==15) warning(JUSTPARAMS,WARN_STM_PC);
	if(params->opt->ual)
		sprintf(params->buf,"PUSH%s\t{%s}",cc,REG(Rt));
	else
		sprintf(params->buf,"STR%s\t%s,[%s,#-4]!",cc,REG(Rt),REG(13));
	return;
}

QADD_A1(cond,Rn,Rd,Rm,nonstandard)
{
	COMMON
	ONLY3(ARMv5TEstar,ARMv6star,ARMv7);
	_UNPREDICTABLE((Rd==15) || (Rn==15) || (Rm==15));
	OP_S_CC_RD_RM_RN(JUSTPARAMS,"QADD",false,cond,Rd,Rm,Rn);
	return;
}

QADD16_A1(cond,Rn,Rd,Rm,nonstandard)
{
	COMMON
	ONLY2(ARMv6star,ARMv7);
	_UNPREDICTABLE((Rd==15) || (Rn==15) || (Rm==15));
	OP_S_CC_RD_RN_RM(JUSTPARAMS,"QADD16",false,cond,Rd,Rn,Rm);
	return;
}

QADD8_A1(cond,Rn,Rd,Rm,nonstandard)
{
	COMMON
	ONLY2(ARMv6star,ARMv7);
	_UNPREDICTABLE((Rd==15) || (Rn==15) || (Rm==15));
	OP_S_CC_RD_RN_RM(JUSTPARAMS,"QADD8",false,cond,Rd,Rn,Rm);
	return;
}

QASX_A1(cond,Rn,Rd,Rm,nonstandard)
{
	COMMON
	ONLY2(ARMv6star,ARMv7);
	_UNPREDICTABLE((Rd==15) || (Rn==15) || (Rm==15));
	OP_S_CC_RD_RN_RM(JUSTPARAMS,"QASX",false,cond,Rd,Rn,Rm);
	return;
}

QDADD_A1(cond,Rn,Rd,Rm,nonstandard)
{
	COMMON
	ONLY3(ARMv5TEstar,ARMv6star,ARMv7);
	_UNPREDICTABLE((Rd==15) || (Rn==15) || (Rm==15));
	OP_S_CC_RD_RM_RN(JUSTPARAMS,"QDADD",false,cond,Rd,Rm,Rn);
	return;
}

QDSUB_A1(cond,Rn,Rd,Rm,nonstandard)
{
	COMMON
	ONLY3(ARMv5TEstar,ARMv6star,ARMv7);
	_UNPREDICTABLE((Rd==15) || (Rn==15) || (Rm==15));
	OP_S_CC_RD_RM_RN(JUSTPARAMS,"QDSUB",false,cond,Rd,Rm,Rn);
	return;
}

QSAX_A1(cond,Rn,Rd,Rm,nonstandard)
{
	COMMON
	ONLY2(ARMv6star,ARMv7);
	_UNPREDICTABLE((Rd==15) || (Rn==15) || (Rm==15));
	OP_S_CC_RD_RN_RM(JUSTPARAMS,"QSAX",false,cond,Rd,Rn,Rm);
	return;
}

QSUB_A1(cond,Rn,Rd,Rm,nonstandard)
{
	COMMON
	ONLY3(ARMv5TEstar,ARMv6star,ARMv7);
	_UNPREDICTABLE((Rd==15) || (Rn==15) || (Rm==15));
	OP_S_CC_RD_RM_RN(JUSTPARAMS,"QSUB",false,cond,Rd,Rm,Rn);
	return;
}

QSUB16_A1(cond,Rn,Rd,Rm,nonstandard)
{
	COMMON
	ONLY2(ARMv6star,ARMv7);
	_UNPREDICTABLE((Rd==15) || (Rn==15) || (Rm==15));
	OP_S_CC_RD_RN_RM(JUSTPARAMS,"QSUB16",false,cond,Rd,Rn,Rm);
	return;
}

QSUB8_A1(cond,Rn,Rd,Rm,nonstandard)
{
	COMMON
	ONLY2(ARMv6star,ARMv7);
	_UNPREDICTABLE((Rd==15) || (Rn==15) || (Rm==15));
	OP_S_CC_RD_RN_RM(JUSTPARAMS,"QSUB8",false,cond,Rd,Rn,Rm);
	return;
}

RBIT_A1(cond,Rd,Rm,nonstandard)
{
	COMMON
	ONLY2(ARMv6T2,ARMv7);
	_UNPREDICTABLE((Rd==15) || (Rm==15));
	OP_S_CC_RD_RM(JUSTPARAMS,"RBIT",false,cond,Rd,Rm);
	return;
}

REV_A1(cond,Rd,Rm,nonstandard)
{
	COMMON
	ONLY2(ARMv6star,ARMv7);
	_UNPREDICTABLE((Rd==15) || (Rm==15));
	OP_S_CC_RD_RM(JUSTPARAMS,"REV",false,cond,Rd,Rm);
	return;
}

REV16_A1(cond,Rd,Rm,nonstandard)
{
	COMMON
	ONLY2(ARMv6star,ARMv7);
	_UNPREDICTABLE((Rd==15) || (Rm==15));
	OP_S_CC_RD_RM(JUSTPARAMS,"REV16",false,cond,Rd,Rm);
	return;
}

REVSH_A1(cond,Rd,Rm,nonstandard)
{
	COMMON
	ONLY2(ARMv6star,ARMv7);
	_UNPREDICTABLE((Rd==15) || (Rm==15));
	OP_S_CC_RD_RM(JUSTPARAMS,"REVSH",false,cond,Rd,Rm);
	return;
}

ROR_imm_A1(cond,S,Rd,imm5,Rm,nonstandard)
{
	COMMON
	if(params->opt->ual)
		OP_S_CC_RD_RM_IMM(JUSTPARAMS,"ROR",S,cond,Rd,Rm,DecodeImmShift(3,imm5).amt);
	else
		OP_S_CC_RD_RM_SHIFT(JUSTPARAMS,"MOV",S,cond,Rd,Rm,3,imm5);
	return;
}

ROR_reg_A1(cond,S,Rd,Rm,Rn,nonstandard)
{
	COMMON
	_UNPREDICTABLE((Rd==15) || (Rn==15) || (Rm==15));
	if(params->opt->ual)
		OP_S_CC_RD_RN_RM(JUSTPARAMS,"ROR",S,cond,Rd,Rn,Rm);
	else
		OP_S_CC_RD_RM_RS(JUSTPARAMS,"MOV",S,cond,Rd,Rn,3,Rm);
	return;
}

RRX_A1(cond,S,Rd,Rm,nonstandard)
{
	COMMON
	if(params->opt->ual)
		OP_S_CC_RD_RM(JUSTPARAMS,"RRX",S,cond,Rd,Rm);
	else
		OP_S_CC_RD_RM_SHIFT(JUSTPARAMS,"MOV",S,cond,Rd,Rm,3,0);
	return;
}

RSB_imm_A1(cond,S,Rn,Rd,imm12,nonstandard)
{
	COMMON
	SUBS_PC_LR(JUSTPARAMS,S,Rd,Rn);
	OP_S_CC_RD_RN_IMM12(JUSTPARAMS,"RSB",S,cond,Rd,Rn,imm12);
	return;
}

RSB_reg_A1(cond,S,Rn,Rd,imm5,type,Rm,nonstandard)
{
	COMMON
	SUBS_PC_LR(JUSTPARAMS,S,Rd,Rn);
	OP_S_CC_RD_RN_RM_SHIFT(JUSTPARAMS,"RSB",S,cond,Rd,Rn,Rm,type,imm5);
	return;
}

RSB_rsr_A1(cond,S,Rn,Rd,Rs,type,Rm,nonstandard)
{
	COMMON
	_UNPREDICTABLE((Rd==15) || (Rn==15) || (Rm==15) || (Rs==15));
	OP_S_CC_RD_RN_RM_RS(JUSTPARAMS,"RSB",S,cond,Rd,Rn,Rm,type,Rs);
	return;
}

RSC_imm_A1(cond,S,Rn,Rd,imm12,nonstandard)
{
	COMMON
	SUBS_PC_LR(JUSTPARAMS,S,Rd,Rn);
	OP_S_CC_RD_RN_IMM12(JUSTPARAMS,"RSC",S,cond,Rd,Rn,imm12);
	return;
}

RSC_reg_A1(cond,S,Rn,Rd,imm5,type,Rm,nonstandard)
{
	COMMON
	SUBS_PC_LR(JUSTPARAMS,S,Rd,Rn);
	OP_S_CC_RD_RN_RM_SHIFT(JUSTPARAMS,"RSC",S,cond,Rd,Rn,Rm,type,imm5);
	return;
}

RSC_rsr_A1(cond,S,Rn,Rd,Rs,type,Rm,nonstandard)
{
	COMMON
	_UNPREDICTABLE((Rd==15) || (Rn==15) || (Rm==15) || (Rs==15));
	OP_S_CC_RD_RN_RM_RS(JUSTPARAMS,"RSC",S,cond,Rd,Rn,Rm,type,Rs);
	return;
}

SADD16_A1(cond,Rn,Rd,Rm,nonstandard)
{
	COMMON
	ONLY2(ARMv6star,ARMv7);
	_UNPREDICTABLE((Rd==15) || (Rn==15) || (Rm==15));
	OP_S_CC_RD_RN_RM(JUSTPARAMS,"SADD16",false,cond,Rd,Rn,Rm);
	return;
}

SADD8_A1(cond,Rn,Rd,Rm,nonstandard)
{
	COMMON
	ONLY2(ARMv6star,ARMv7);
	_UNPREDICTABLE((Rd==15) || (Rn==15) || (Rm==15));
	OP_S_CC_RD_RN_RM(JUSTPARAMS,"SADD8",false,cond,Rd,Rn,Rm);
	return;
}

SASX_A1(cond,Rn,Rd,Rm,nonstandard)
{
	COMMON
	ONLY2(ARMv6star,ARMv7);
	_UNPREDICTABLE((Rd==15) || (Rn==15) || (Rm==15));
	OP_S_CC_RD_RN_RM(JUSTPARAMS,"SASX",false,cond,Rd,Rn,Rm);
	return;
}

SBC_imm_A1(cond,S,Rn,Rd,imm12,nonstandard)
{
	COMMON
	SUBS_PC_LR(JUSTPARAMS,S,Rd,Rn);
	OP_S_CC_RD_RN_IMM12(JUSTPARAMS,"SBC",S,cond,Rd,Rn,imm12);
	return;
}

SBC_reg_A1(cond,S,Rn,Rd,imm5,type,Rm,nonstandard)
{
	COMMON
	SUBS_PC_LR(JUSTPARAMS,S,Rd,Rn);
	OP_S_CC_RD_RN_RM_SHIFT(JUSTPARAMS,"SBC",S,cond,Rd,Rn,Rm,type,imm5);
	return;
}

SBC_rsr_A1(cond,S,Rn,Rd,Rs,type,Rm,nonstandard)
{
	COMMON
	_UNPREDICTABLE((Rd==15) || (Rn==15) || (Rm==15) || (Rs==15));
	OP_S_CC_RD_RN_RM_RS(JUSTPARAMS,"SBC",S,cond,Rd,Rn,Rm,type,Rs);
	return;
}

SBFX_A1(cond,widthm1,Rd,lsb,Rn,nonstandard)
{
	COMMON
	ONLY2(ARMv6T2,ARMv7);
	_UNPREDICTABLE((Rd==15) || (Rn==15) || (lsb+widthm1 >= 32));
	sprintf(params->buf,"SBFX%s\t%s,%s,#%d,#%d",condition(JUSTPARAMS,cond),REG(Rd),REG(Rn),lsb,widthm1+1);
	return;
}

SDIV_A1(cond,Rd,Rm,Rn,nonstandard)
{
	COMMON
	ONLY2(ARMv7VE,ARMv7opt);
	_UNPREDICTABLE((Rd==15) || (Rn == 15) || (Rm == 15));
	OP_S_CC_RD_RN_RM(JUSTPARAMS,"SDIV",false,cond,Rd,Rn,Rm);
	return;
}

SEL_A1(cond,Rn,Rd,Rm,nonstandard)
{
	COMMON
	ONLY2(ARMv6star,ARMv7);
	_UNPREDICTABLE((Rd==15) || (Rn==15) || (Rm==15));
	OP_S_CC_RD_RN_RM(JUSTPARAMS,"SEL",false,cond,Rd,Rn,Rm);
	return;
}

SETEND_A1(E,nonstandard)
{
	COMMON
	ONLY2(ARMv6star,ARMv7);
	sprintf(params->buf,"SETEND\t%s",(E?"BE":"LE"));
	return;
}

SEV_A1(cond,nonstandard)
{
	COMMON
	ONLY2(ARMv6K,ARMv7);
	NOP1(ARMv6T2);
	sprintf(params->buf,"SEV%s",condition(JUSTPARAMS,cond));
	return;
}

SHADD16_A1(cond,Rn,Rd,Rm,nonstandard)
{
	COMMON
	ONLY2(ARMv6star,ARMv7);
	_UNPREDICTABLE((Rd==15) || (Rn==15) || (Rm==15));
	OP_S_CC_RD_RN_RM(JUSTPARAMS,"SHADD16",false,cond,Rd,Rn,Rm);
	return;
}

SHADD8_A1(cond,Rn,Rd,Rm,nonstandard)
{
	COMMON
	ONLY2(ARMv6star,ARMv7);
	_UNPREDICTABLE((Rd==15) || (Rn==15) || (Rm==15));
	OP_S_CC_RD_RN_RM(JUSTPARAMS,"SHADD8",false,cond,Rd,Rn,Rm);
	return;
}

SHASX_A1(cond,Rn,Rd,Rm,nonstandard)
{
	COMMON
	ONLY2(ARMv6star,ARMv7);
	_UNPREDICTABLE((Rd==15) || (Rn==15) || (Rm==15));
	OP_S_CC_RD_RN_RM(JUSTPARAMS,"SHASX",false,cond,Rd,Rn,Rm);
	return;
}

SHSAX_A1(cond,Rn,Rd,Rm,nonstandard)
{
	COMMON
	ONLY2(ARMv6star,ARMv7);
	_UNPREDICTABLE((Rd==15) || (Rn==15) || (Rm==15));
	OP_S_CC_RD_RN_RM(JUSTPARAMS,"SHSAX",false,cond,Rd,Rn,Rm);
	return;
}

SHSUB16_A1(cond,Rn,Rd,Rm,nonstandard)
{
	COMMON
	ONLY2(ARMv6star,ARMv7);
	_UNPREDICTABLE((Rd==15) || (Rn==15) || (Rm==15));
	OP_S_CC_RD_RN_RM(JUSTPARAMS,"SHSUB16",false,cond,Rd,Rn,Rm);
	return;
}

SHSUB8_A1(cond,Rn,Rd,Rm,nonstandard)
{
	COMMON
	ONLY2(ARMv6star,ARMv7);
	_UNPREDICTABLE((Rd==15) || (Rn==15) || (Rm==15));
	OP_S_CC_RD_RN_RM(JUSTPARAMS,"SHSUB8",false,cond,Rd,Rn,Rm);
	return;
}

SMLAxx_A1(cond,Rd,Ra,Rm,M,N,Rn,nonstandard)
{
	COMMON
	ONLY3(ARMv5TEstar,ARMv6star,ARMv7);
	_UNPREDICTABLE((Rd==15) || (Rn==15) || (Rm==15) || (Ra==15));
	sprintf(params->buf,"SMLA%c%c%s\t%s,%s,%s,%s",(N?'T':'B'),(M?'T':'B'),condition(JUSTPARAMS,cond),REG(Rd),REG(Rn),REG(Rm),REG(Ra));
	return;
}

SMLAD_A1(cond,Rd,Ra,Rm,M,Rn,nonstandard)
{
	COMMON
	ONLY2(ARMv6star,ARMv7);
	_UNPREDICTABLE((Rd==15) || (Rn==15) || (Rm==15));
	sprintf(params->buf,"SMLAD%s%s\t%s,%s,%s,%s",(M?"X":""),condition(JUSTPARAMS,cond),REG(Rd),REG(Rn),REG(Rm),REG(Ra));
	return;
}

SMLAL_A1(cond,S,RdHi,RdLo,Rm,Rn,nonstandard)
{
	COMMON
	_UNPREDICTABLE((RdLo==15) || (RdHi==15) || (Rn==15) || (Rm==15) || (RdHi==RdLo));
	_UNPREDICTABLE_ARCH_LT((RdHi==Rn) || (RdLo==Rn),6);
	OP_S_CC_RD_RN_RM_RA(JUSTPARAMS,"SMLAL",S,cond,RdLo,RdHi,Rn,Rm);
	return;
}

SMLALxx_A1(cond,RdHi,RdLo,Rm,M,N,Rn,nonstandard)
{
	COMMON
	ONLY3(ARMv5TEstar,ARMv6star,ARMv7);
	_UNPREDICTABLE((RdLo==15) || (RdHi==15) || (Rn==15) || (Rm==15) || (RdHi==RdLo));
	sprintf(params->buf,"SMLAL%c%c%s\t%s,%s,%s,%s",(N?'T':'B'),(M?'T':'B'),condition(JUSTPARAMS,cond),REG(RdLo),REG(RdHi),REG(Rn),REG(Rm));
	return;
}

SMLALD_A1(cond,RdHi,RdLo,Rm,M,Rn,nonstandard)
{
	COMMON
	ONLY2(ARMv6star,ARMv7);
	_UNPREDICTABLE((RdLo==15) || (RdHi==15) || (Rn==15) || (Rm==15) || (RdHi==RdLo));
	sprintf(params->buf,"SMLALD%s%s\t%s,%s,%s,%s",(M?"X":""),condition(JUSTPARAMS,cond),REG(RdLo),REG(RdHi),REG(Rn),REG(Rm));
	return;
}

SMLAWx_A1(cond,Rd,Ra,Rm,M,Rn,nonstandard)
{
	COMMON
	ONLY3(ARMv5TEstar,ARMv6star,ARMv7);
	_UNPREDICTABLE((Rd==15) || (Rn==15) || (Rm==15) || (Ra==15));
	sprintf(params->buf,"SMLAW%s%s\t%s,%s,%s,%s",(M?"T":"B"),condition(JUSTPARAMS,cond),REG(Rd),REG(Rn),REG(Rm),REG(Ra));
	return;
}

SMLSD_A1(cond,Rd,Ra,Rm,M,Rn,nonstandard)
{
	COMMON
	ONLY2(ARMv6star,ARMv7);
	_UNPREDICTABLE((Rd==15) || (Rn==15) || (Rm==15));
	sprintf(params->buf,"SMLSD%s%s\t%s,%s,%s,%s",(M?"X":""),condition(JUSTPARAMS,cond),REG(Rd),REG(Rn),REG(Rm),REG(Ra));
	return;
}

SMLSLD_A1(cond,RdHi,RdLo,Rm,M,Rn,nonstandard)
{
	COMMON
	ONLY2(ARMv6star,ARMv7);
	_UNPREDICTABLE((RdLo==15) || (RdHi==15) || (Rn==15) || (Rm==15) || (RdHi==RdLo));
	sprintf(params->buf,"SMLSLD%s%s\t%s,%s,%s,%s",(M?"X":""),condition(JUSTPARAMS,cond),REG(RdLo),REG(RdHi),REG(Rn),REG(Rm));
	return;
}

SMMLA_A1(cond,Rd,Ra,Rm,R,Rn,nonstandard)
{
	COMMON
	ONLY2(ARMv6star,ARMv7);
	_UNPREDICTABLE((Rd==15) || (Rn==15) || (Rm==15));
	sprintf(params->buf,"SMMLA%s%s\t%s,%s,%s,%s",(R?"R":""),condition(JUSTPARAMS,cond),REG(Rd),REG(Rn),REG(Rm),REG(Ra));
	return;
}

SMMLS_A1(cond,Rd,Ra,Rm,R,Rn,nonstandard)
{
	COMMON
	ONLY2(ARMv6star,ARMv7);
	_UNPREDICTABLE((Rd==15) || (Rn==15) || (Rm==15) || (Ra==15));
	sprintf(params->buf,"SMMLS%s%s\t%s,%s,%s,%s",(R?"R":""),condition(JUSTPARAMS,cond),REG(Rd),REG(Rn),REG(Rm),REG(Ra));
	return;
}

SMMUL_A1(cond,Rd,Rm,R,Rn,nonstandard)
{
	COMMON
	ONLY2(ARMv6star,ARMv7);
	_UNPREDICTABLE((Rd==15) || (Rn==15) || (Rm==15));
	sprintf(params->buf,"SMMUL%s%s\t%s,%s,%s",(R?"R":""),condition(JUSTPARAMS,cond),REG(Rd),REG(Rn),REG(Rm));
	return;
}

SMUAD_A1(cond,Rd,Rm,M,Rn,nonstandard)
{
	COMMON
	ONLY2(ARMv6star,ARMv7);
	_UNPREDICTABLE((Rd==15) || (Rn==15) || (Rm==15));
	sprintf(params->buf,"SMUAD%s%s\t%s,%s,%s",(M?"X":""),condition(JUSTPARAMS,cond),REG(Rd),REG(Rn),REG(Rm));
	return;
}

SMULxx_A1(cond,Rd,Rm,M,N,Rn,nonstandard)
{
	COMMON
	ONLY3(ARMv5TEstar,ARMv6star,ARMv7);
	_UNPREDICTABLE((Rd==15) || (Rn==15) || (Rm==15));
	sprintf(params->buf,"SMUL%c%c%s\t%s,%s,%s",(N?'T':'B'),(M?'T':'B'),condition(JUSTPARAMS,cond),REG(Rd),REG(Rn),REG(Rm));
	return;
}

SMULL_A1(cond,S,RdHi,RdLo,Rm,Rn,nonstandard)
{
	COMMON
	_UNPREDICTABLE((RdLo==15) || (RdHi==15) || (Rn==15) || (Rm==15) || (RdHi==RdLo));
	_UNPREDICTABLE_ARCH_LT((RdHi==Rn) || (RdLo==Rn),6);
	OP_S_CC_RD_RN_RM_RA(JUSTPARAMS,"SMULL",S,cond,RdLo,RdHi,Rn,Rm);
	return;
}

SMULWx_A1(cond,Rd,Rm,M,Rn,nonstandard)
{
	COMMON
	ONLY3(ARMv5TEstar,ARMv6star,ARMv7);
	_UNPREDICTABLE((Rd==15) || (Rn==15) || (Rm==15));
	sprintf(params->buf,"SMULW%c%s\t%s,%s,%s",(M?'T':'B'),condition(JUSTPARAMS,cond),REG(Rd),REG(Rn),REG(Rm));
	return;
}

SMUSD_A1(cond,Rd,Rm,M,Rn,nonstandard)
{
	COMMON
	ONLY2(ARMv6star,ARMv7);
	_UNPREDICTABLE((Rd==15) || (Rn==15) || (Rm==15));
	sprintf(params->buf,"SMUSD%s%s\t%s,%s,%s",(M?"X":""),condition(JUSTPARAMS,cond),REG(Rd),REG(Rn),REG(Rm));
	return;
}

SSAT_A1(cond,sat_imm,Rd,imm5,sh,Rn,nonstandard)
{
	COMMON
	ONLY2(ARMv6star,ARMv7);
	_UNPREDICTABLE((Rd==15) || (Rn==15));
	sprintf(params->buf,"SSAT%s\t%s,#%d,%s",condition(JUSTPARAMS,cond),REG(Rd),sat_imm+1,REG(Rn));
	doimmshift(JUSTPARAMS,sh<<1,imm5);
	return;
}

SSAT16_A1(cond,sat_imm,Rd,Rn,nonstandard)
{
	COMMON
	ONLY2(ARMv6star,ARMv7);
	_UNPREDICTABLE((Rd==15) || (Rn==15));
	sprintf(params->buf,"SSAT16%s\t%s,#%d,%s",condition(JUSTPARAMS,cond),REG(Rd),sat_imm+1,REG(Rn));
	return;
}

SSAX_A1(cond,Rn,Rd,Rm,nonstandard)
{
	COMMON
	ONLY2(ARMv6star,ARMv7);
	_UNPREDICTABLE((Rd==15) || (Rn==15) || (Rm==15));
	OP_S_CC_RD_RN_RM(JUSTPARAMS,"SSAX",false,cond,Rd,Rn,Rm);
	return;
}

SSUB16_A1(cond,Rn,Rd,Rm,nonstandard)
{
	COMMON
	ONLY2(ARMv6star,ARMv7);
	_UNPREDICTABLE((Rd==15) || (Rn==15) || (Rm==15));
	OP_S_CC_RD_RN_RM(JUSTPARAMS,"SSUB16",false,cond,Rd,Rn,Rm);
	return;
}

SSUB8_A1(cond,Rn,Rd,Rm,nonstandard)
{
	COMMON
	ONLY2(ARMv6star,ARMv7);
	_UNPREDICTABLE((Rd==15) || (Rn==15) || (Rm==15));
	OP_S_CC_RD_RN_RM(JUSTPARAMS,"SSUB8",false,cond,Rd,Rn,Rm);
	return;
}

STC_STC2_A1(cond,P,U,D,W,Rn,CRd,coproc,imm8,nonstandard)
{
	COMMON
	_UNPREDICTABLE((Rn==15) && W);
	if(Rn==15) warning(JUSTPARAMS,WARN_STC_PC);
	const char *fmt;
	UALIFY((D?"L":""),cond)
	if(params->opt->ual)
	{
		fmt = "STC%s%s\tp%d,c%d,[%s";
	}
	else
	{
		fmt = "STC%s%s\tCP%d,C%d,[%s";
	}
	sprintf(params->buf,fmt,post1,post2,coproc,CRd,REG(Rn));
	/* TODO - Output PC-relative STC as STC <label>? */
	if(P || W)
		doldrstrimm(JUSTPARAMS,P,U,W,imm8<<2);
	else
	{
		/* U==1 */
		scatf(params->buf,"],{%d}",imm8);
	}
	return;
}

STC_STC2_A2(P,U,D,W,Rn,CRd,coproc,imm8,nonstandard)
{
	COMMON
	ONLY3(ARMv5Tstar,ARMv6star,ARMv7);
	_UNPREDICTABLE((Rn==15) && W);
	if(Rn==15) warning(JUSTPARAMS,WARN_STC_PC);
	const char *fmt = (params->opt->ual?"STC2%s\tp%d,c%d,[%s":"STC2%s\tCP%d,C%d,[%s");
	sprintf(params->buf,fmt,(D?"L":""),coproc,CRd,REG(Rn));
	/* TODO - Output PC-relative STC as STC <label>? */
	if(P || W)
		doldrstrimm(JUSTPARAMS,P,U,W,imm8<<2);
	else
	{
		/* U==1 */
		scatf(params->buf,"],{%d}",imm8);
	}
	return;
}

STMIA_A1(cond,W,Rn,reglist,nonstandard)
{
	COMMON
	_UNPREDICTABLE((Rn==15)||(!reglist));
	if(reglist & (1<<13)) warning(JUSTPARAMS,WARN_STM_SP);
	if(reglist & (1<<15)) warning(JUSTPARAMS,WARN_STM_PC);
	if(W && (reglist & (1<<Rn)) && (reglist & ((1<<Rn)-1))) warning(JUSTPARAMS,WARN_STM_WB);
	sprintf(params->buf,"STM%s%s\t%s%s,{",condition(JUSTPARAMS,cond),(params->opt->ual?"":"IA"),REG(Rn),(W?"!":""));
	doreglist(JUSTPARAMS,reglist);
	strcat(params->buf,"}");
	return;
}

STMDA_A1(cond,W,Rn,reglist,nonstandard)
{
	COMMON
	_UNPREDICTABLE((Rn==15)||(!reglist));
	if(reglist & (1<<13)) warning(JUSTPARAMS,WARN_STM_SP);
	if(reglist & (1<<15)) warning(JUSTPARAMS,WARN_STM_PC);
	if(W && (reglist & (1<<Rn)) && (reglist & ((1<<Rn)-1))) warning(JUSTPARAMS,WARN_STM_WB);
	const char *fmt = (params->opt->ual?"STMDA%s\t%s%s,{":"STM%sDA\t%s%s,{");
	sprintf(params->buf,fmt,condition(JUSTPARAMS,cond),REG(Rn),(W?"!":""));
	doreglist(JUSTPARAMS,reglist);
	strcat(params->buf,"}");
	return;
}

STMDB_A1(cond,W,Rn,reglist,nonstandard)
{
	COMMON
	_UNPREDICTABLE((Rn==15)||(!reglist));
	if(reglist & (1<<13)) warning(JUSTPARAMS,WARN_STM_SP);
	if(reglist & (1<<15)) warning(JUSTPARAMS,WARN_STM_PC);
	if(W && (reglist & (1<<Rn)) && (reglist & ((1<<Rn)-1))) warning(JUSTPARAMS,WARN_STM_WB);
	const char *fmt = (params->opt->ual?"STMDB%s\t%s%s,{":"STM%sDB\t%s%s,{");
	sprintf(params->buf,fmt,condition(JUSTPARAMS,cond),REG(Rn),(W?"!":""));
	doreglist(JUSTPARAMS,reglist);
	strcat(params->buf,"}");
	return;
}

STMIB_A1(cond,W,Rn,reglist,nonstandard)
{
	COMMON
	_UNPREDICTABLE((Rn==15)||(!reglist));
	if(reglist & (1<<13)) warning(JUSTPARAMS,WARN_STM_SP);
	if(reglist & (1<<15)) warning(JUSTPARAMS,WARN_STM_PC);
	if(W && (reglist & (1<<Rn)) && (reglist & ((1<<Rn)-1))) warning(JUSTPARAMS,WARN_STM_WB);
	const char *fmt = (params->opt->ual?"STMIB%s\t%s%s,{":"STM%sIB\t%s%s,{");
	sprintf(params->buf,fmt,condition(JUSTPARAMS,cond),REG(Rn),(W?"!":""));
	doreglist(JUSTPARAMS,reglist);
	strcat(params->buf,"}");
	return;
}

STR_imm_A1(cond,P,U,W,Rn,Rt,imm12,nonstandard)
{
	COMMON
	bool wback = (!P || W);
	_UNPREDICTABLE(wback && ((Rn==15) || (Rn==Rt)));
	if(Rn==15) warning(JUSTPARAMS,WARN_STR_PC);
	sprintf(params->buf,"STR%s\t%s,[%s",condition(JUSTPARAMS,cond),REG(Rt),REG(Rn));
	doldrstrimm(JUSTPARAMS,P,U,W,imm12);
	return;
}

STR_reg_A1(cond,P,U,W,Rn,Rt,imm5,type,Rm,nonstandard)
{
	COMMON
	bool wback = (!P || W);
	_UNPREDICTABLE((Rm==15) || (wback && ((Rn==15) || (Rn==Rt))));
	_UNPREDICTABLE_ARCH_LT(wback && (Rm==Rn),6);
	if((Rn==15) || (Rt==15)) warning(JUSTPARAMS,WARN_STR_PC);
	sprintf(params->buf,"STR%s\t%s,[%s",condition(JUSTPARAMS,cond),REG(Rt),REG(Rn));
	if(!P)
		strcat(params->buf,"]");
	scatf(params->buf,",%s%s",(U?"":"-"),REG(Rm));
	doimmshift(JUSTPARAMS,type,imm5);
	if(P)
	{
		if(wback)
			strcat(params->buf,"]!");
		else
			strcat(params->buf,"]");
	}
	return;
}

STRB_imm_A1(cond,P,U,W,Rn,Rt,imm12,nonstandard)
{
	COMMON
	bool wback = (!P || W);
	_UNPREDICTABLE(Rt==15);
	_UNPREDICTABLE(wback && ((Rn==15) || (Rn==Rt)));
	if(Rn==15) warning(JUSTPARAMS,WARN_STR_PC);
	const char *fmt = (params->opt->ual?"STRB%s\t%s,[%s":"STR%sB\t%s,[%s");
	sprintf(params->buf,fmt,condition(JUSTPARAMS,cond),REG(Rt),REG(Rn));
	doldrstrimm(JUSTPARAMS,P,U,W,imm12);
	return;
}

STRB_reg_A1(cond,P,U,W,Rn,Rt,imm5,type,Rm,nonstandard)
{
	COMMON
	bool wback = (!P || W);
	_UNPREDICTABLE((Rt==15) || (Rm==15) || (wback && ((Rn==15) || (Rn==Rt))));
	_UNPREDICTABLE_ARCH_LT(wback && (Rm==Rn),6);
	if(Rn==15) warning(JUSTPARAMS,WARN_STR_PC);
	const char *fmt = (params->opt->ual?"STRB%s\t%s,[%s":"STR%sB\t%s,[%s");
	sprintf(params->buf,fmt,condition(JUSTPARAMS,cond),REG(Rt),REG(Rn));
	if(!P)
		strcat(params->buf,"]");
	scatf(params->buf,",%s%s",(U?"":"-"),REG(Rm));
	doimmshift(JUSTPARAMS,type,imm5);
	if(P)
	{
		if(wback)
			strcat(params->buf,"]!");
		else
			strcat(params->buf,"]");
	}
	return;
}

STRBT_A1(cond,U,Rn,Rt,imm12,nonstandard)
{
	COMMON
	_UNPREDICTABLE((Rt==15) || (Rn==15) || (Rn==Rt));
	const char *fmt = (params->opt->ual?"STRBT%s\t%s,[%s],#%s%d":"STR%sBT\t%s,[%s],#%s%d");
	sprintf(params->buf,fmt,condition(JUSTPARAMS,cond),REG(Rt),REG(Rn),(U?"":"-"),imm12);
	return;
}

STRBT_A2(cond,U,Rn,Rt,imm5,type,Rm,nonstandard)
{
	COMMON
	_UNPREDICTABLE((Rt==15) || (Rn==15) || (Rn==Rt) || (Rm==15));
	_UNPREDICTABLE_ARCH_LT(Rm==Rn,6);
	const char *fmt = (params->opt->ual?"STRBT%s\t%s,[%s],":"STR%sBT\t%s,[%s],");
	sprintf(params->buf,fmt,condition(JUSTPARAMS,cond),REG(Rt),REG(Rn));
	scatf(params->buf,"%s%s",(U?"":"-"),REG(Rm));
	doimmshift(JUSTPARAMS,type,imm5);
	return;
}

STRD_imm_A1(cond,P,U,W,Rn,Rt,imm4H:imm4L,nonstandard)
{
	COMMON
	ONLY3(ARMv5TEstar,ARMv6star,ARMv7);
	const char *cc = condition(JUSTPARAMS,cond);
	bool wback = (!P || W);
	_UNPREDICTABLE((Rt&1) || (!P && W) || (wback && ((Rn==15) || ((Rn&0xe)==Rt))) || (Rt==14));
	if(Rn==15) warning(JUSTPARAMS,WARN_STR_PC);
	if(params->opt->ual)
		sprintf(params->buf,"STRD%s\t%s,%s,[%s",cc,REG(Rt),REG((Rt+1)&0xf),REG(Rn));
	else
		sprintf(params->buf,"STR%sD\t%s,[%s",cc,REG(Rt),REG(Rn));
	doldrstrimm(JUSTPARAMS,P,U,W,imm4H_imm4L);
	return;
}

STRD_reg_A1(cond,P,U,W,Rn,Rt,Rm,nonstandard)
{
	COMMON
	ONLY3(ARMv5TEstar,ARMv6star,ARMv7);
	const char *cc = condition(JUSTPARAMS,cond);
	bool wback = (!P || W);
	_UNPREDICTABLE((Rt&1) || (!P && W) || (Rt==14) || (Rm==15) || (wback && ((Rn==15) || ((Rn&0xe)==Rt))));
	_UNPREDICTABLE_ARCH_LT(wback && (Rm==Rn),6);
	if(Rn==15) warning(JUSTPARAMS,WARN_STR_PC);
	if(params->opt->ual)
		sprintf(params->buf,"STRD%s\t%s,%s,[%s",cc,REG(Rt),REG((Rt+1)&0xf),REG(Rn));
	else
		sprintf(params->buf,"STR%sD\t%s,[%s",cc,REG(Rt),REG(Rn));
	if(!P)
		strcat(params->buf,"]");
	scatf(params->buf,",%s%s",(U?"":"-"),REG(Rm));
	if(P)
	{
		if(wback)
			strcat(params->buf,"]!");
		else
			strcat(params->buf,"]");
	}
	return;
}

STREX_A1(cond,Rn,Rd,Rt,nonstandard)
{
	COMMON
	_UNPREDICTABLE((Rd==15) || (Rt==15) || (Rn==15));
	_UNPREDICTABLE((Rd==Rn) || (Rd==Rt));
	ONLY2(ARMv6star,ARMv7);
	sprintf(params->buf,"STREX%s\t%s,%s,[%s]",condition(JUSTPARAMS,cond),REG(Rd),REG(Rt),REG(Rn));
	return;
}

STREXB_A1(cond,Rn,Rd,Rt,nonstandard)
{
	COMMON
	_UNPREDICTABLE((Rd==15) || (Rt==15) || (Rn==15));
	_UNPREDICTABLE((Rd==Rn) || (Rd==Rt));
	ONLY2(ARMv6K,ARMv7);
	sprintf(params->buf,"STREXB%s\t%s,%s,[%s]",condition(JUSTPARAMS,cond),REG(Rd),REG(Rt),REG(Rn));
	return;
}

STREXD_A1(cond,Rn,Rd,Rt,nonstandard)
{
	COMMON
	_UNPREDICTABLE((Rd==15) || (Rt&1) || (Rt==14) || (Rn==15));
	_UNPREDICTABLE((Rd==Rn) || ((Rd&0xe)==Rt));
	ONLY2(ARMv6K,ARMv7);
	sprintf(params->buf,"STREXD%s\t%s,%s,%s,[%s]",condition(JUSTPARAMS,cond),REG(Rd),REG(Rt),REG((Rt+1)&0xf),REG(Rn));
	return;
}

STREXH_A1(cond,Rn,Rd,Rt,nonstandard)
{
	COMMON
	ONLY2(ARMv6K,ARMv7);
	_UNPREDICTABLE((Rd==15) || (Rt==15) || (Rn==15));
	_UNPREDICTABLE((Rd==Rn) || (Rd==Rt));
	sprintf(params->buf,"STREXH%s\t%s,%s,[%s]",condition(JUSTPARAMS,cond),REG(Rd),REG(Rt),REG(Rn));
	return;
}

STRH_imm_A1(cond,P,U,W,Rn,Rt,imm4H:imm4L,nonstandard)
{
	COMMON
	bool wback = (!P || W);
	_UNPREDICTABLE((Rt==15) || (wback && ((Rn==15) || (Rn==Rt))));
	if(Rn==15) warning(JUSTPARAMS,WARN_STR_PC);
	const char *fmt = (params->opt->ual?"STRH%s\t%s,[%s":"STR%sH\t%s,[%s");
	sprintf(params->buf,fmt,condition(JUSTPARAMS,cond),REG(Rt),REG(Rn));
	doldrstrimm(JUSTPARAMS,P,U,W,imm4H_imm4L);
	return;
}

STRH_reg_A1(cond,P,U,W,Rn,Rt,Rm,nonstandard)
{
	COMMON
	bool wback = (!P || W);
	_UNPREDICTABLE((Rt==15) || (Rm==15) || (wback && ((Rn==15) || (Rn==Rt))));
	_UNPREDICTABLE_ARCH_LT(wback && (Rm==Rn),6);
	if(Rn==15) warning(JUSTPARAMS,WARN_STR_PC);
	const char *fmt = (params->opt->ual?"STRH%s\t%s,[%s":"STR%sH\t%s,[%s");
	sprintf(params->buf,fmt,condition(JUSTPARAMS,cond),REG(Rt),REG(Rn));
	if(!P)
		strcat(params->buf,"]");
	scatf(params->buf,",%s%s",(U?"":"-"),REG(Rm));
	if(P)
	{
		if(wback)
			strcat(params->buf,"]!");
		else
			strcat(params->buf,"]");
	}
	return;
}

STRHT_A1(cond,U,Rn,Rt,imm4H:imm4L,nonstandard)
{
	COMMON
	ONLY2(ARMv6T2,ARMv7);
	_UNPREDICTABLE((Rt==15) || (Rn==15) || (Rn==Rt));
	const char *fmt = (params->opt->ual?"STRHT%s\t%s,[%s],#%s%d":"STR%sHT\t%s,[%s],#%s%d");
	sprintf(params->buf,fmt,condition(JUSTPARAMS,cond),REG(Rt),REG(Rn),(U?"":"-"),imm4H_imm4L);
	return;
}

STRHT_A2(cond,U,Rn,Rt,Rm,nonstandard)
{
	COMMON
	ONLY2(ARMv6T2,ARMv7);
	_UNPREDICTABLE((Rt==15) || (Rn==15) || (Rn==Rt) || (Rm==15));
	const char *fmt = (params->opt->ual?"STRHT%s\t%s,[%s],%s%s":"STR%sHT\t%s,[%s],%s%s");
	sprintf(params->buf,fmt,condition(JUSTPARAMS,cond),REG(Rt),REG(Rn),(U?"":"-"),REG(Rm));
	return;
}

STRT_A1(cond,U,Rn,Rt,imm12,nonstandard)
{
	COMMON
	_UNPREDICTABLE((Rn==15) || (Rn==Rt));
	if(Rt==15) warning(JUSTPARAMS,WARN_STR_PC);
	const char *fmt = (params->opt->ual?"STRT%s\t%s,[%s],#%s%d":"STR%sT\t%s,[%s],#%s%d");
	sprintf(params->buf,fmt,condition(JUSTPARAMS,cond),REG(Rt),REG(Rn),(U?"":"-"),imm12);
	return;
}

STRT_A2(cond,U,Rn,Rt,imm5,type,Rm,nonstandard)
{
	COMMON
	_UNPREDICTABLE((Rn==15) || (Rn==Rt) || (Rm==15));
	_UNPREDICTABLE_ARCH_LT(Rm==Rn,6);
	if(Rt==15) warning(JUSTPARAMS,WARN_STR_PC);
	const char *fmt = (params->opt->ual?"STRT%s\t%s,[%s],%s%s":"STR%sT\t%s,[%s],%s%s");
	sprintf(params->buf,fmt,condition(JUSTPARAMS,cond),REG(Rt),REG(Rn),(U?"":"-"),REG(Rm));
	doimmshift(JUSTPARAMS,type,imm5);
	return;
}

SUB_imm_A1(cond,S,Rn,Rd,imm12,nonstandard)
{
	COMMON
	SUBS_PC_LR(JUSTPARAMS,S,Rd,Rn);
	OP_S_CC_RD_RN_IMM12(JUSTPARAMS,"SUB",S,cond,Rd,Rn,imm12);
	return;
}

SUB_reg_A1(cond,S,Rn,Rd,imm5,type,Rm,nonstandard)
{
	COMMON
	SUBS_PC_LR(JUSTPARAMS,S,Rd,Rn);
	OP_S_CC_RD_RN_RM_SHIFT(JUSTPARAMS,"SUB",S,cond,Rd,Rn,Rm,type,imm5);
	return;
}

SUB_rsr_A1(cond,S,Rn,Rd,Rs,type,Rm,nonstandard)
{
	COMMON
	_UNPREDICTABLE((Rd==15) || (Rn==15) || (Rm==15) || (Rs==15));
	OP_S_CC_RD_RN_RM_RS(JUSTPARAMS,"SUB",S,cond,Rd,Rn,Rm,type,Rs);
	return;
}

SUB_sp_imm_A1(cond,S,Rd,imm12,nonstandard)
{
	COMMON
	/* UAL synonym for SUB, but we can just use the same code as SUB_imm_A1 */
	SUBS_PC_LR(JUSTPARAMS,S,Rd,13);
	OP_S_CC_RD_RN_IMM12(JUSTPARAMS,"SUB",S,cond,Rd,13,imm12);
	return;
}

SUB_sp_reg_A1(cond,S,Rd,imm5,type,Rm,nonstandard)
{
	COMMON
	/* UAL synonym for SUB, but we can just use the same code as SUB_reg_A1 */
	SUBS_PC_LR(JUSTPARAMS,S,Rd,13);
	OP_S_CC_RD_RN_RM_SHIFT(JUSTPARAMS,"SUB",S,cond,Rd,13,Rm,type,imm5);
	return;
}

SVC_A1(cond,imm24,nonstandard)
{
	COMMON
	const char *fmt = (params->opt->ual?"SVC%s\t":"SWI%s\t");
	sprintf(params->buf,fmt,condition(JUSTPARAMS,cond));
	if(params->opt->swihash)
		strcat(params->buf,"#");
	if(params->opt->swimode == SWIMODE_NUM)
		scatf(params->buf,"%s%06X",HEX,imm24);
	else if(params->opt->swimode == SWIMODE_QUOTED)
	{
		if((imm24&~(1<<17)&~0xff) == 0x100)
		{
			/* Special handling for OS_WriteI - just return number & comment */
			scatf(params->buf,"%s%X\tOS_WriteI+",HEX,imm24);
			if(disprint(imm24&0xff))
				scatf(params->buf,"%c",imm24&0xff);
			else
				scatf(params->buf,"%d",imm24&0xff);
		}
		else
		{
			strcat(params->buf,"\"");
			char *c = params->buf+strlen(params->buf);
			if(_swix(OS_SWINumberToString,_INR(0,2),imm24,c,sizeof(params->buf)-(c-params->buf+1)))
				scatf(params->buf,"%s%06X",HEX,imm24);
			else if(!strcmp(c,"User") || !strcmp(c,"XUser") || !strcmp(c,"OS_Undefined") || !strcmp(c,"XOS_Undefined"))
				sprintf(c-1,"%s%06X",HEX,imm24);
			else
				strcat(c,"\"");
		}
	}
	else
	{
		/* Same behaviour as original Debugger */
		char *c = params->buf+strlen(params->buf);
		if(_swix(OS_SWINumberToString,_INR(0,2),imm24,c,sizeof(params->buf)-(c-params->buf+1)))
			scatf(params->buf,"%s%06X",HEX,imm24);
		else if(!strcmp(c,"User") || !strcmp(c,"XUser") || !strcmp(c,"OS_Undefined") || !strcmp(c,"XOS_Undefined"))
			sprintf(c,"%s%06X",HEX,imm24);
	}
	return;
}

SWP_SWPB_A1(cond,B,Rn,Rt,Rt2,nonstandard)
{
	COMMON
	_UNPREDICTABLE((Rt==15) || (Rt2==15) || (Rn==15) || (Rn==Rt) || (Rn==Rt2));
	warning(JUSTPARAMS,WARN_SWP_SWPB);
	UALIFY((B?"B":""),cond)
	sprintf(params->buf,"SWP%s%s\t%s,%s,[%s]",post1,post2,REG(Rt),REG(Rt2),REG(Rn));
	return;
}

SXTAB_A1(cond,Rn,Rd,rotate,Rm,nonstandard)
{
	COMMON
	ONLY2(ARMv6star,ARMv7);
	_UNPREDICTABLE((Rd==15) || (Rm==15));
	OP_S_CC_RD_RN_RM_SHIFT(JUSTPARAMS,"SXTAB",false,cond,Rd,Rn,Rm,rotate?3:0,rotate<<3);
	return;
}

SXTAB16_A1(cond,Rn,Rd,rotate,Rm,nonstandard)
{
	COMMON
	ONLY2(ARMv6star,ARMv7);
	_UNPREDICTABLE((Rd==15) || (Rm==15));
	OP_S_CC_RD_RN_RM_SHIFT(JUSTPARAMS,"SXTAB16",false,cond,Rd,Rn,Rm,rotate?3:0,rotate<<3);
	return;
}

SXTAH_A1(cond,Rn,Rd,rotate,Rm,nonstandard)
{
	COMMON
	ONLY2(ARMv6star,ARMv7);
	_UNPREDICTABLE((Rd==15) || (Rm==15));
	OP_S_CC_RD_RN_RM_SHIFT(JUSTPARAMS,"SXTAH",false,cond,Rd,Rn,Rm,rotate?3:0,rotate<<3);
	return;
}

SXTB_A1(cond,Rd,rotate,Rm,nonstandard)
{
	COMMON
	ONLY2(ARMv6star,ARMv7);
	_UNPREDICTABLE((Rd==15) || (Rm==15));
	OP_S_CC_RD_RM_SHIFT(JUSTPARAMS,"SXTB",false,cond,Rd,Rm,rotate?3:0,rotate<<3);
	return;
}

SXTB16_A1(cond,Rd,rotate,Rm,nonstandard)
{
	COMMON
	ONLY2(ARMv6star,ARMv7);
	_UNPREDICTABLE((Rd==15) || (Rm==15));
	OP_S_CC_RD_RM_SHIFT(JUSTPARAMS,"SXTB16",false,cond,Rd,Rm,rotate?3:0,rotate<<3);
	return;
}

SXTH_A1(cond,Rd,rotate,Rm,nonstandard)
{
	COMMON
	ONLY2(ARMv6star,ARMv7);
	_UNPREDICTABLE((Rd==15) || (Rm==15));
	OP_S_CC_RD_RM_SHIFT(JUSTPARAMS,"SXTH",false,cond,Rd,Rm,rotate?3:0,rotate<<3);
	return;
}

TEQ_imm_A1(cond,Rn,imm12,nonstandard)
{
	COMMONP
	OP_P_CC_RD_IMM12(JUSTPARAMS,"TEQ",P,cond,Rn,imm12);
	return;
}

TEQ_reg_A1(cond,Rn,imm5,type,Rm,nonstandard)
{
	COMMONP
	OP_P_CC_RD_RM_SHIFT(JUSTPARAMS,"TEQ",P,cond,Rn,Rm,type,imm5);
	return;
}

TEQ_rsr_A1(cond,Rn,Rs,type,Rm,nonstandard)
{
	COMMONP
	_UNPREDICTABLE((Rn==15) || (Rm==15) || (Rs==15));
	OP_P_CC_RD_RM_RS(JUSTPARAMS,"TEQ",P,cond,Rn,Rm,type,Rs);
	return;
}

TST_imm_A1(cond,Rn,imm12,nonstandard)
{
	COMMONP
	OP_P_CC_RD_IMM12(JUSTPARAMS,"TST",P,cond,Rn,imm12);
	return;
}

TST_reg_A1(cond,Rn,imm5,type,Rm,nonstandard)
{
	COMMONP
	OP_P_CC_RD_RM_SHIFT(JUSTPARAMS,"TST",P,cond,Rn,Rm,type,imm5);
	return;
}

TST_rsr_A1(cond,Rn,Rs,type,Rm,nonstandard)
{
	COMMONP
	_UNPREDICTABLE((Rn==15) || (Rm==15) || (Rs==15));
	OP_P_CC_RD_RM_RS(JUSTPARAMS,"TST",P,cond,Rn,Rm,type,Rs);
	return;
}

UADD16_A1(cond,Rn,Rd,Rm,nonstandard)
{
	COMMON
	ONLY2(ARMv6star,ARMv7);
	_UNPREDICTABLE((Rd==15) || (Rn==15) || (Rm==15));
	OP_S_CC_RD_RN_RM(JUSTPARAMS,"UADD16",false,cond,Rd,Rn,Rm);
	return;
}

UADD8_A1(cond,Rn,Rd,Rm,nonstandard)
{
	COMMON
	ONLY2(ARMv6star,ARMv7);
	_UNPREDICTABLE((Rd==15) || (Rn==15) || (Rm==15));
	OP_S_CC_RD_RN_RM(JUSTPARAMS,"UADD8",false,cond,Rd,Rn,Rm);
	return;
}

UASX_A1(cond,Rn,Rd,Rm,nonstandard)
{
	COMMON
	ONLY2(ARMv6star,ARMv7);
	_UNPREDICTABLE((Rd==15) || (Rn==15) || (Rm==15));
	OP_S_CC_RD_RN_RM(JUSTPARAMS,"UASX",false,cond,Rd,Rn,Rm);
	return;
}

UBFX_A1(cond,widthm1,Rd,lsb,Rn,nonstandard)
{
	COMMON
	ONLY2(ARMv6T2,ARMv7);
	_UNPREDICTABLE((Rd==15) || (Rn==15) || (lsb+widthm1 >= 32));
	sprintf(params->buf,"UBFX%s\t%s,%s,#%d,#%d",condition(JUSTPARAMS,cond),REG(Rd),REG(Rn),lsb,widthm1+1);
	return;
}

UDF_A1(imm12:imm4,nonstandard)
{
	COMMON
	sprintf(params->buf,"UDF\t#%s%04X\t%s",HEX,imm12_imm4,MSG(MSG_PERMAUNDEFINED));
	return;
}

UDIV_A1(cond,Rd,Rm,Rn,nonstandard)
{
	COMMON
	ONLY2(ARMv7VE,ARMv7opt);
	_UNPREDICTABLE((Rd==15) || (Rn == 15) || (Rm == 15));
	OP_S_CC_RD_RN_RM(JUSTPARAMS,"UDIV",false,cond,Rd,Rn,Rm);
	return;
}

UHADD16_A1(cond,Rn,Rd,Rm,nonstandard)
{
	COMMON
	ONLY2(ARMv6star,ARMv7);
	_UNPREDICTABLE((Rd==15) || (Rn==15) || (Rm==15));
	OP_S_CC_RD_RN_RM(JUSTPARAMS,"UHADD16",false,cond,Rd,Rn,Rm);
	return;
}

UHADD8_A1(cond,Rn,Rd,Rm,nonstandard)
{
	COMMON
	ONLY2(ARMv6star,ARMv7);
	_UNPREDICTABLE((Rd==15) || (Rn==15) || (Rm==15));
	OP_S_CC_RD_RN_RM(JUSTPARAMS,"UHADD8",false,cond,Rd,Rn,Rm);
	return;
}

UHASX_A1(cond,Rn,Rd,Rm,nonstandard)
{
	COMMON
	ONLY2(ARMv6star,ARMv7);
	_UNPREDICTABLE((Rd==15) || (Rn==15) || (Rm==15));
	OP_S_CC_RD_RN_RM(JUSTPARAMS,"UHASX",false,cond,Rd,Rn,Rm);
	return;
}

UHSAX_A1(cond,Rn,Rd,Rm,nonstandard)
{
	COMMON
	ONLY2(ARMv6star,ARMv7);
	_UNPREDICTABLE((Rd==15) || (Rn==15) || (Rm==15));
	OP_S_CC_RD_RN_RM(JUSTPARAMS,"UHSAX",false,cond,Rd,Rn,Rm);
	return;
}

UHSUB16_A1(cond,Rn,Rd,Rm,nonstandard)
{
	COMMON
	ONLY2(ARMv6star,ARMv7);
	_UNPREDICTABLE((Rd==15) || (Rn==15) || (Rm==15));
	OP_S_CC_RD_RN_RM(JUSTPARAMS,"UHSUB16",false,cond,Rd,Rn,Rm);
	return;
}

UHSUB8_A1(cond,Rn,Rd,Rm,nonstandard)
{
	COMMON
	ONLY2(ARMv6star,ARMv7);
	_UNPREDICTABLE((Rd==15) || (Rn==15) || (Rm==15));
	OP_S_CC_RD_RN_RM(JUSTPARAMS,"UHSUB8",false,cond,Rd,Rn,Rm);
	return;
}

UMAAL_A1(cond,RdHi,RdLo,Rm,Rn,nonstandard)
{
	COMMON
	ONLY2(ARMv6star,ARMv7);
	_UNPREDICTABLE((RdLo==15) || (RdHi==15) || (Rn==15) || (Rm==15) || (RdHi==RdLo));
	OP_S_CC_RD_RN_RM_RA(JUSTPARAMS,"UMAAL",false,cond,RdLo,RdHi,Rn,Rm);
	return;
}

UMLAL_A1(cond,S,RdHi,RdLo,Rm,Rn,nonstandard)
{
	COMMON
	_UNPREDICTABLE((RdLo==15) || (RdHi==15) || (Rn==15) || (Rm==15) || (RdHi==RdLo));
	_UNPREDICTABLE_ARCH_LT((RdHi==Rn) || (RdLo==Rn),6);
	OP_S_CC_RD_RN_RM_RA(JUSTPARAMS,"UMLAL",S,cond,RdLo,RdHi,Rn,Rm);
	return;
}

UMULL_A1(cond,S,RdHi,RdLo,Rm,Rn,nonstandard)
{
	COMMON
	_UNPREDICTABLE((RdLo==15) || (RdHi==15) || (Rn==15) || (Rm==15) || (RdHi==RdLo));
	_UNPREDICTABLE_ARCH_LT((RdHi==Rn) || (RdLo==Rn),6);
	OP_S_CC_RD_RN_RM_RA(JUSTPARAMS,"UMULL",S,cond,RdLo,RdHi,Rn,Rm);
	return;
}

UQADD16_A1(cond,Rn,Rd,Rm,nonstandard)
{
	COMMON
	ONLY2(ARMv6star,ARMv7);
	_UNPREDICTABLE((Rd==15) || (Rn==15) || (Rm==15));
	OP_S_CC_RD_RN_RM(JUSTPARAMS,"UQADD16",false,cond,Rd,Rn,Rm);
	return;
}

UQADD8_A1(cond,Rn,Rd,Rm,nonstandard)
{
	COMMON
	ONLY2(ARMv6star,ARMv7);
	_UNPREDICTABLE((Rd==15) || (Rn==15) || (Rm==15));
	OP_S_CC_RD_RN_RM(JUSTPARAMS,"UQADD8",false,cond,Rd,Rn,Rm);
	return;
}

UQASX_A1(cond,Rn,Rd,Rm,nonstandard)
{
	COMMON
	ONLY2(ARMv6star,ARMv7);
	_UNPREDICTABLE((Rd==15) || (Rn==15) || (Rm==15));
	OP_S_CC_RD_RN_RM(JUSTPARAMS,"UQASX",false,cond,Rd,Rn,Rm);
	return;
}

UQSAX_A1(cond,Rn,Rd,Rm,nonstandard)
{
	COMMON
	ONLY2(ARMv6star,ARMv7);
	_UNPREDICTABLE((Rd==15) || (Rn==15) || (Rm==15));
	OP_S_CC_RD_RN_RM(JUSTPARAMS,"UQSAX",false,cond,Rd,Rn,Rm);
	return;
}

UQSUB16_A1(cond,Rn,Rd,Rm,nonstandard)
{
	COMMON
	ONLY2(ARMv6star,ARMv7);
	_UNPREDICTABLE((Rd==15) || (Rn==15) || (Rm==15));
	OP_S_CC_RD_RN_RM(JUSTPARAMS,"UQSUB16",false,cond,Rd,Rn,Rm);
	return;
}

UQSUB8_A1(cond,Rn,Rd,Rm,nonstandard)
{
	COMMON
	ONLY2(ARMv6star,ARMv7);
	_UNPREDICTABLE((Rd==15) || (Rn==15) || (Rm==15));
	OP_S_CC_RD_RN_RM(JUSTPARAMS,"UQSUB8",false,cond,Rd,Rn,Rm);
	return;
}

USAD16_A1(cond,Rn,Rd,Rm,nonstandard)
{
	COMMON
	ONLY2(ARMv6star,ARMv7);
	_UNPREDICTABLE((Rd==15) || (Rn==15) || (Rm==15));
	OP_S_CC_RD_RN_RM(JUSTPARAMS,"USAD16",false,cond,Rd,Rn,Rm);
	return;
}

USAD8_A1(cond,Rn,Rd,Rm,nonstandard)
{
	COMMON
	ONLY2(ARMv6star,ARMv7);
	_UNPREDICTABLE((Rd==15) || (Rn==15) || (Rm==15));
	OP_S_CC_RD_RN_RM(JUSTPARAMS,"USAD8",false,cond,Rd,Rn,Rm);
	return;
}

USADA8_A1(cond,Rn,Rd,Ra,Rm,nonstandard)
{
	COMMON
	ONLY2(ARMv6star,ARMv7);
	_UNPREDICTABLE((Rd==15) || (Rn==15) || (Rm==15));
	OP_S_CC_RD_RN_RM_RA(JUSTPARAMS,"USADA8",false,cond,Rd,Rn,Rm,Ra);
	return;
}

USAT_A1(cond,sat_imm,Rd,imm5,sh,Rn,nonstandard)
{
	COMMON
	ONLY2(ARMv6star,ARMv7);
	_UNPREDICTABLE((Rd==15) || (Rn==15));
	sprintf(params->buf,"USAT%s\t%s,#%d,%s",condition(JUSTPARAMS,cond),REG(Rd),sat_imm,REG(Rn));
	doimmshift(JUSTPARAMS,sh<<1,imm5);
	return;
}

USAT16_A1(cond,sat_imm,Rd,Rn,nonstandard)
{
	COMMON
	ONLY2(ARMv6star,ARMv7);
	_UNPREDICTABLE((Rd==15) || (Rn==15));
	sprintf(params->buf,"USAT16%s\t%s,#%d,%s",condition(JUSTPARAMS,cond),REG(Rd),sat_imm,REG(Rn));
	return;
}

USAX_A1(cond,Rn,Rd,Rm,nonstandard)
{
	COMMON
	ONLY2(ARMv6star,ARMv7);
	_UNPREDICTABLE((Rd==15) || (Rn==15) || (Rm==15));
	OP_S_CC_RD_RN_RM(JUSTPARAMS,"USAX",false,cond,Rd,Rn,Rm);
	return;
}

USUB16_A1(cond,Rn,Rd,Rm,nonstandard)
{
	COMMON
	ONLY2(ARMv6star,ARMv7);
	_UNPREDICTABLE((Rd==15) || (Rn==15) || (Rm==15));
	OP_S_CC_RD_RN_RM(JUSTPARAMS,"USUB16",false,cond,Rd,Rn,Rm);
	return;
}

USUB8_A1(cond,Rn,Rd,Rm,nonstandard)
{
	COMMON
	ONLY2(ARMv6star,ARMv7);
	_UNPREDICTABLE((Rd==15) || (Rn==15) || (Rm==15));
	OP_S_CC_RD_RN_RM(JUSTPARAMS,"USUB8",false,cond,Rd,Rn,Rm);
	return;
}

UXTAB_A1(cond,Rn,Rd,rotate,Rm,nonstandard)
{
	COMMON
	ONLY2(ARMv6star,ARMv7);
	_UNPREDICTABLE((Rd==15) || (Rm==15));
	OP_S_CC_RD_RN_RM_SHIFT(JUSTPARAMS,"UXTAB",false,cond,Rd,Rn,Rm,rotate?3:0,rotate<<3);
	return;
}

UXTAB16_A1(cond,Rn,Rd,rotate,Rm,nonstandard)
{
	COMMON
	ONLY2(ARMv6star,ARMv7);
	_UNPREDICTABLE((Rd==15) || (Rm==15));
	OP_S_CC_RD_RN_RM_SHIFT(JUSTPARAMS,"UXTAB16",false,cond,Rd,Rn,Rm,rotate?3:0,rotate<<3);
	return;
}

UXTAH_A1(cond,Rn,Rd,rotate,Rm,nonstandard)
{
	COMMON
	ONLY2(ARMv6star,ARMv7);
	_UNPREDICTABLE((Rd==15) || (Rm==15));
	OP_S_CC_RD_RN_RM_SHIFT(JUSTPARAMS,"UXTAH",false,cond,Rd,Rn,Rm,rotate?3:0,rotate<<3);
	return;
}

UXTB_A1(cond,Rd,rotate,Rm,nonstandard)
{
	COMMON
	ONLY2(ARMv6star,ARMv7);
	_UNPREDICTABLE((Rd==15) || (Rm==15));
	OP_S_CC_RD_RM_SHIFT(JUSTPARAMS,"UXTB",false,cond,Rd,Rm,rotate?3:0,rotate<<3);
	return;
}

UXTB16_A1(cond,Rd,rotate,Rm,nonstandard)
{
	COMMON
	ONLY2(ARMv6star,ARMv7);
	_UNPREDICTABLE((Rd==15) || (Rm==15));
	OP_S_CC_RD_RM_SHIFT(JUSTPARAMS,"UXTB16",false,cond,Rd,Rm,rotate?3:0,rotate<<3);
	return;
}

UXTH_A1(cond,Rd,rotate,Rm,nonstandard)
{
	COMMON
	ONLY2(ARMv6star,ARMv7);
	_UNPREDICTABLE((Rd==15) || (Rm==15));
	OP_S_CC_RD_RM_SHIFT(JUSTPARAMS,"UXTH",false,cond,Rd,Rm,rotate?3:0,rotate<<3);
	return;
}

WFE_A1(cond,nonstandard)
{
	COMMON
	ONLY2(ARMv6K,ARMv7);
	NOP1(ARMv6T2);
	sprintf(params->buf,"WFE%s",condition(JUSTPARAMS,cond));
	return;
}

WFI_A1(cond,nonstandard)
{
	COMMON
	ONLY2(ARMv6K,ARMv7);
	NOP1(ARMv6T2);
	sprintf(params->buf,"WFI%s",condition(JUSTPARAMS,cond));
	return;
}

YIELD_A1(cond,nonstandard)
{
	COMMON
	ONLY2(ARMv6K,ARMv7);
	NOP1(ARMv6T2);
	sprintf(params->buf,"YIELD%s",condition(JUSTPARAMS,cond));
	return;
}

CPS_A1(imod,M,A,I,F,mode,nonstandard)
{
	COMMON
	ONLY2(ARMv6star,ARMv7);
	if((imod == 2) || (imod == 3))
	{
		sprintf(params->buf,"CPSI%c\t%s%s%s",(imod==2?'E':'D'),(A?"a":""),(I?"i":""),(F?"f":""));
		if(M)
			scatf(params->buf,",#%d",mode); /* TODO - Use mode name instead? */
		else if(mode)
			warning(JUSTPARAMS,WARN_CPS_NONSTANDARD);
		if(!A && !I && !F)
			warning(JUSTPARAMS,WARN_CPS_NONSTANDARD);
	}
	else
	{
		if(A || I || F)
			warning(JUSTPARAMS,WARN_CPS_NONSTANDARD);
		_UNPREDICTABLE((!imod && !M) || (imod==1));
		if(M)
			sprintf(params->buf,"CPS\t#%d",mode);
	}
	/* TODO - Warn about unknown modes */
	return;
}

ERET_A1(cond,nonstandard)
{
	COMMON
	ONLY1(ARMv7VE);
	sprintf(params->buf,"ERET%s",condition(JUSTPARAMS,cond));
	return;
}

HVC_A1(cond,imm12:imm4,nonstandard)
{
	COMMON
	ONLY1(ARMv7VE);
	_UNPREDICTABLE(cond!=14);
	sprintf(params->buf,"HVC%s\t#%s%04X",condition(JUSTPARAMS,cond),HEX,imm12_imm4);
	return;
}

LDM_exception_A1(cond,P,U,W,Rn,reglist,nonstandard)
{
	COMMON
	_UNPREDICTABLE(Rn==15);
	_UNPREDICTABLE_ARCH_GE(W && (reglist & (1<<Rn)),7);
	const char *fmt = "LDM%s%s\t%s%s,{";
	UALIFY(ldmmode(P,U),cond)
	sprintf(params->buf,fmt,post1,post2,REG(Rn),(W?"!":""));
	doreglist(JUSTPARAMS,reglist | 0x8000);
	strcat(params->buf,"}^");
	return;
}

LDM_user_A1(cond,P,U,Rn,reglist,nonstandard)
{
	COMMON
	_UNPREDICTABLE((Rn==15) || !reglist);
	const char *fmt = "LDM%s%s\t%s,{";
	UALIFY(ldmmode(P,U),cond)
	sprintf(params->buf,fmt,post1,post2,REG(Rn));
	doreglist(JUSTPARAMS,reglist);
	strcat(params->buf,"}^");
	return;
}

MRS_banked_A1(cond,R,m1,Rd,m,nonstandard)
{
	COMMON
	ONLY1(ARMv7VE);
	_UNPREDICTABLE(Rd==15);
	sprintf(params->buf,"MRS%s\t%s,",condition(JUSTPARAMS,cond),REG(Rd));
	dobankedmsr(JUSTPARAMS,(m<<4)|m1,R);
	return;
}

MRS_A1(cond,R,Rd,nonstandard)
{
	COMMON
	_UNPREDICTABLE(Rd==15);
	sprintf(params->buf,"MRS%s\t%s,%cPSR",condition(JUSTPARAMS,cond),REG(Rd),(R?'S':'C')); /* TODO - APSR? */
	return;
}

MSR_banked_A1(cond,R,m1,Rn,m,nonstandard)
{
	COMMON
	ONLY1(ARMv7VE);
	_UNPREDICTABLE(Rn==15);
	sprintf(params->buf,"MSR%s\t",condition(JUSTPARAMS,cond));
	dobankedmsr(JUSTPARAMS,(m<<4)|m1,R);
	scatf(params->buf,",%s",REG(Rn));
	return;
}

MSR_imm_A1(cond,R,mask,imm12,nonstandard)
{
	COMMON
	_UNPREDICTABLE(!mask);
	sprintf(params->buf,"MSR%s\t%cPSR_%s%s%s%s,#",condition(JUSTPARAMS,cond),(R?'S':'C'),((mask&0x1)?"c":""),((mask&0x2)?"x":""),((mask&0x4)?"s":""),((mask&0x8)?"f":"")); /* TODO - APSR? */
	doimm12(JUSTPARAMS,imm12);
	return;
}

MSR_reg_A1(cond,R,mask,Rn,nonstandard)
{
	COMMON
	_UNPREDICTABLE(!mask || (Rn==15));
	sprintf(params->buf,"MSR%s\t%cPSR_%s%s%s%s,%s",condition(JUSTPARAMS,cond),(R?'S':'C'),((mask&0x1)?"c":""),((mask&0x2)?"x":""),((mask&0x4)?"s":""),((mask&0x8)?"f":""),REG(Rn)); /* TODO - APSR? */
	return;
}

RFE_A1(P,U,W,Rn,nonstandard)
{
	COMMON
	ONLY2(ARMv6star,ARMv7);
	_UNPREDICTABLE(Rn==15);
	sprintf(params->buf,"RFE%s\t%s%s",ldmmode(P,U),REG(Rn),(W?"!":""));
	return;
}

SMC_A1(cond,imm4,nonstandard)
{
	COMMON
	ONLY1(SecExt);
	sprintf(params->buf,"SM%c%s\t#%s%X",(params->opt->ual?'C':'I'),condition(JUSTPARAMS,cond),HEX,imm4);
	return;
}

SRS_A1(P,U,W,mode,nonstandard)
{
	COMMON
	ONLY2(ARMv6star,ARMv7);
	sprintf(params->buf,"SRS%s\t%s%s,#%d",ldmmode(P,U),REG(13),(W?"!":""),mode);
	return;
}

STM_user_A1(cond,P,U,Rn,reglist,nonstandard)
{
	COMMON
	_UNPREDICTABLE((Rn==15) || !reglist);
	const char *fmt = "STM%s%s\t%s,{";
	UALIFY(ldmmode(P,U),cond)
	sprintf(params->buf,fmt,post1,post2,REG(Rn));
	doreglist(JUSTPARAMS,reglist);
	strcat(params->buf,"}^");
	return;
}

# TODO - Mark these as unpredictable/undefined VFP/NEON instructions
UNDEFINED_MCR_MCR2_A1 as if MCR_MCR2_A1
UNDEFINED_MCRR_MCRR2_A1 as if MCRR_MCRR2_A1
UNDEFINED_MRC_MRC2_A1 as if MRC_MRC2_A1
UNDEFINED_MRRC_MRRC2_A1 as if MRRC_MRRC2_A1
UNDEFINED_CDP_CDP2_A1 as if CDP_CDP2_A1
UNDEFINED_LDC_LDC2_imm_A1 as if LDC_LDC2_imm_A1
UNDEFINED_LDC_LDC2_lit_A1 as if LDC_LDC2_lit_A1
UNDEFINED_STC_STC2_A1 as if STC_STC2_A1
