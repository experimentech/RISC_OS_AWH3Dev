# This source code in this file is licensed to You by Castle Technology
# Limited ("Castle") and its licensors on contractual terms and conditions
# ("Licence") which entitle you freely to modify and/or to distribute this
# source code subject to Your compliance with the terms of the Licence.
# 
# This source code has been made available to You without any warranties
# whatsoever. Consequently, Your use, modification and distribution of this
# source code is entirely at Your own risk and neither Castle, its licensors
# nor any other person who has contributed to this source code shall be
# liable to You for any loss or damage which You may suffer as a result of
# Your use, modification or distribution of this source code.
# 
# Full details of Your rights and obligations are set out in the Licence.
# You should have received a copy of the Licence with this source code file.
# If You have not received a copy, the text of the Licence is available
# online at www.castle-technology.co.uk/riscosbaselicence.htm
# 

# Actions for XScale DSP coprocessor disassembly

# TODO - Mark this as an unpredictable DSP instruction
UNPREDICTABLE_DSP as if MCR_MCR2_A1

MIA(cond,Rs,acc,Rm,nonstandard)
{
	COMMON
	ONLY1(XScaleDSP);
	_UNPREDICTABLE((Rs==15) || (Rm==15));
	sprintf(params->buf,"MIA%s\tacc%d,%s,%s",condition(JUSTPARAMS,cond),acc,REG(Rm),REG(Rs));
	return;
}

MIAPH(cond,Rs,acc,Rm,nonstandard)
{
	COMMON
	ONLY1(XScaleDSP);
	_UNPREDICTABLE((Rs==15) || (Rm==15));
	sprintf(params->buf,"MIAPH%s\tacc%d,%s,%s",condition(JUSTPARAMS,cond),acc,REG(Rm),REG(Rs));
	return;
}

MIAxy(cond,x,y,Rs,acc,Rm,nonstandard)
{
	COMMON
	ONLY1(XScaleDSP);
	_UNPREDICTABLE((Rs==15) || (Rm==15));
	sprintf(params->buf,"MIA%c%c%s\tacc%d,%s,%s",(x?'T':'B'),(y?'T':'B'),condition(JUSTPARAMS,cond),acc,REG(Rm),REG(Rs));
	return;
}

MAR(cond,RdHi,RdLo,acc,nonstandard)
{
	COMMON
	ONLY1(XScaleDSP);
	_UNPREDICTABLE((RdHi==15) || (RdLo==15));
	sprintf(params->buf,"MAR%s\tacc%d,%s,%s",condition(JUSTPARAMS,cond),acc,REG(RdLo),REG(RdHi));
	return;
}

MRA(cond,RdHi,RdLo,acc,nonstandard)
{
	COMMON
	ONLY1(XScaleDSP);
	_UNPREDICTABLE((RdHi==15) || (RdLo==15));
	sprintf(params->buf,"MRA%s\t%s,%s,acc%d",condition(JUSTPARAMS,cond),REG(RdLo),REG(RdHi),acc);
	return;
}
