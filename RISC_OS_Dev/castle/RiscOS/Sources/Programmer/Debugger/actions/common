# This source code in this file is licensed to You by Castle Technology
# Limited ("Castle") and its licensors on contractual terms and conditions
# ("Licence") which entitle you freely to modify and/or to distribute this
# source code subject to Your compliance with the terms of the Licence.
# 
# This source code has been made available to You without any warranties
# whatsoever. Consequently, Your use, modification and distribution of this
# source code is entirely at Your own risk and neither Castle, its licensors
# nor any other person who has contributed to this source code shall be
# liable to You for any loss or damage which You may suffer as a result of
# Your use, modification or distribution of this source code.
# 
# Full details of Your rights and obligations are set out in the Licence.
# You should have received a copy of the Licence with this source code file.
# If You have not received a copy, the text of the Licence is available
# online at www.castle-technology.co.uk/riscosbaselicence.htm
# 

# Common actions for ARM disassembly

UNDEFINED()
{
	const uint32_t nonstandard = 0; /* Prevent duplicate instances due to needless dependencies on 'nonstandard' */
	COMMON
	doundefined(PARAMS);
	return;
}

UNPREDICTABLE()
{
	const uint32_t nonstandard = 0; /* Prevent duplicate instances due to needless dependencies on 'nonstandard' */
	COMMON
	if(params->opt->dci)
		sprintf(params->buf,"DCI\t%s%08X\t%s",HEX,OPCODE,MSG(MSG_UNPREDICTABLEINSTRUCTION));
	else
		sprintf(params->buf,"%s",MSG(MSG_UNPREDICTABLEINSTRUCTION));
	return;
}

UNALLOCATED_HINT()
{
	const uint32_t nonstandard = 0; /* Prevent duplicate instances due to needless dependencies on 'nonstandard' */
	COMMON
	if(params->opt->dci)
		sprintf(params->buf,"DCI\t%s%08X\t%s",HEX,OPCODE,MSG(MSG_UNALLOCATEDHINT));
	else
		sprintf(params->buf,"%s",MSG(MSG_UNALLOCATEDHINT));
	return;
}

PERMA_UNDEFINED()
{
	const uint32_t nonstandard = 0; /* Prevent duplicate instances due to needless dependencies on 'nonstandard' */
	COMMON
	if(params->opt->dci)
		sprintf(params->buf,"DCI\t%s%08X\t%s",HEX,OPCODE,MSG(MSG_PERMAUNDEFINED));
	else
		sprintf(params->buf,"%s",MSG(MSG_PERMAUNDEFINED));
	return;
}

UNALLOCATED_MEM_HINT()
{
	const uint32_t nonstandard = 0; /* Prevent duplicate instances due to needless dependencies on 'nonstandard' */
	COMMON
	if(params->opt->dci)
		sprintf(params->buf,"DCI\t%s%08X\t%s",HEX,OPCODE,MSG(MSG_UNALLOCATEDMEMHINT));
	else
		sprintf(params->buf,"%s",MSG(MSG_UNALLOCATEDMEMHINT));
	return;
}
