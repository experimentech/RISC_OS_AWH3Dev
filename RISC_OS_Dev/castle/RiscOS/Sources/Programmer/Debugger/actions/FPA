# This source code in this file is licensed to You by Castle Technology
# Limited ("Castle") and its licensors on contractual terms and conditions
# ("Licence") which entitle you freely to modify and/or to distribute this
# source code subject to Your compliance with the terms of the Licence.
# 
# This source code has been made available to You without any warranties
# whatsoever. Consequently, Your use, modification and distribution of this
# source code is entirely at Your own risk and neither Castle, its licensors
# nor any other person who has contributed to this source code shall be
# liable to You for any loss or damage which You may suffer as a result of
# Your use, modification or distribution of this source code.
# 
# Full details of Your rights and obligations are set out in the Licence.
# You should have received a copy of the Licence with this source code file.
# If You have not received a copy, the text of the Licence is available
# online at www.castle-technology.co.uk/riscosbaselicence.htm
# 

# Actions for FPA disassembly

LDF_STF(cond,P,UD,T1,Wb,LS,Rn,T0,Fd,offset,nonstandard)
{
	COMMON
	ONLY1(FPA);
	sprintf(params->buf,"%s%s%c\tF%d,",(LS?"LDF":"STF"),condition(JUSTPARAMS,cond),fpaprecision(T0,T1),Fd);
	if((Rn == 15) && P)
	{
		doldrstrlit(JUSTPARAMS,UD,Wb,offset<<2,true);
	}
	else
	{
		scatf(params->buf,"[%s",REG(Rn));
		doldrstrimm(JUSTPARAMS,P,UD,Wb,offset<<2);
		if((Rn == 15) && !P)
			warning(JUSTPARAMS,WARN_PC_POSTINDEXED);
	}
	return;
}

LFM_SFM(cond,P,UD,N1:N0,Wb,LS,Rn,Fd,offset,nonstandard)
{
	COMMON
	ONLY1(FPA);
	const char *cc = condition(JUSTPARAMS,cond);
	uint32_t count = N1_N0;
	if(!count)
		count = 4;
	/* Default to form1 if a nonstandard offset is used, or unusual P/UD combination */
	if((params->opt->lfmsfmmode == LFMSFM_FORM1)
	  || (Wb && (offset != count*12))
	  || (!Wb && offset)
	  || !(P ^ UD))
	{
		sprintf(params->buf,"%s%s\tF%d,%d,",(LS?"LFM":"SFM"),cc,Fd,count);
		if((Rn == 15) && P)
		{
			doldrstrlit(JUSTPARAMS,UD,Wb,offset<<2,false);
		}
		else
		{
			scatf(params->buf,"[%s",REG(Rn));
			doldrstrimm(JUSTPARAMS,P,UD,Wb,offset<<2);
		}
	}
	else if(params->opt->lfmsfmmode == LFMSFM_FORM2)
	{
		sprintf(params->buf,"%s%s%s\tF%d,%d,[%s]%s",(LS?"LFM":"SFM"),cc,ldmmode(P,UD),Fd,count,REG(Rn),(Wb?"!":""));
	}
	else
	{
		sprintf(params->buf,"%s%s%s\t%s%s,{F%d",(LS?"LFM":"SFM"),cc,ldmmode(P,UD),REG(Rn),(Wb?"!":""),Fd);
		if(count == 1)
			scatf(params->buf,"}");
		else
		{
			uint32_t Fd2 = Fd+count-1;
			if(Fd2 > 7)
				Fd2 = 7;
			scatf(params->buf,"%cF%d",((Fd2-Fd)>1?'-':','),Fd2);
			Fd2 = (Fd+count-1) & 7;
			if(Fd2 < Fd)
				scatf(params->buf,(Fd2?",F0%cF%d}":",F0}"),(Fd2>1?'-':','),Fd2);
			else
				scatf(params->buf,"}");
		}
	}
	if((Rn == 15) && !P)
		warning(JUSTPARAMS,WARN_PC_POSTINDEXED);
	return;
}

ADF(cond,e:f,Fn,Fd,gh,i,Fm,nonstandard)
{
	COMMON
	ONLY1(FPA);
	FPA_CC_FD_FN_FMIMM(JUSTPARAMS,"ADF",cond,e_f,gh,Fd,Fn,i,Fm);
	return;
}

MUF(cond,e:f,Fn,Fd,gh,i,Fm,nonstandard)
{
	COMMON
	ONLY1(FPA);
	FPA_CC_FD_FN_FMIMM(JUSTPARAMS,"MUF",cond,e_f,gh,Fd,Fn,i,Fm);
	return;
}

SUF(cond,e:f,Fn,Fd,gh,i,Fm,nonstandard)
{
	COMMON
	ONLY1(FPA);
	FPA_CC_FD_FN_FMIMM(JUSTPARAMS,"SUF",cond,e_f,gh,Fd,Fn,i,Fm);
	return;
}

RSF(cond,e:f,Fn,Fd,gh,i,Fm,nonstandard)
{
	COMMON
	ONLY1(FPA);
	FPA_CC_FD_FN_FMIMM(JUSTPARAMS,"RSF",cond,e_f,gh,Fd,Fn,i,Fm);
	return;
}

DVF(cond,e:f,Fn,Fd,gh,i,Fm,nonstandard)
{
	COMMON
	ONLY1(FPA);
	FPA_CC_FD_FN_FMIMM(JUSTPARAMS,"DVF",cond,e_f,gh,Fd,Fn,i,Fm);
	return;
}

RDF(cond,e:f,Fn,Fd,gh,i,Fm,nonstandard)
{
	COMMON
	ONLY1(FPA);
	FPA_CC_FD_FN_FMIMM(JUSTPARAMS,"RDF",cond,e_f,gh,Fd,Fn,i,Fm);
	return;
}

POW(cond,e:f,Fn,Fd,gh,i,Fm,nonstandard)
{
	COMMON
	ONLY1(FPA);
	FPA_CC_FD_FN_FMIMM(JUSTPARAMS,"POW",cond,e_f,gh,Fd,Fn,i,Fm);
	return;
}

RPW(cond,e:f,Fn,Fd,gh,i,Fm,nonstandard)
{
	COMMON
	ONLY1(FPA);
	FPA_CC_FD_FN_FMIMM(JUSTPARAMS,"RPW",cond,e_f,gh,Fd,Fn,i,Fm);
	return;
}

RMF(cond,e:f,Fn,Fd,gh,i,Fm,nonstandard)
{
	COMMON
	ONLY1(FPA);
	FPA_CC_FD_FN_FMIMM(JUSTPARAMS,"RMF",cond,e_f,gh,Fd,Fn,i,Fm);
	return;
}

FML(cond,e:f,Fn,Fd,gh,i,Fm,nonstandard)
{
	COMMON
	ONLY1(FPA);
	FPA_CC_FD_FN_FMIMM(JUSTPARAMS,"FML",cond,e_f,gh,Fd,Fn,i,Fm);
	return;
}

FDV(cond,e:f,Fn,Fd,gh,i,Fm,nonstandard)
{
	COMMON
	ONLY1(FPA);
	FPA_CC_FD_FN_FMIMM(JUSTPARAMS,"FDV",cond,e_f,gh,Fd,Fn,i,Fm);
	return;
}

FRD(cond,e:f,Fn,Fd,gh,i,Fm,nonstandard)
{
	COMMON
	ONLY1(FPA);
	FPA_CC_FD_FN_FMIMM(JUSTPARAMS,"FRD",cond,e_f,gh,Fd,Fn,i,Fm);
	return;
}

POL(cond,e:f,Fn,Fd,gh,i,Fm,nonstandard)
{
	COMMON
	ONLY1(FPA);
	FPA_CC_FD_FN_FMIMM(JUSTPARAMS,"POL",cond,e_f,gh,Fd,Fn,i,Fm);
	return;
}

MVF(cond,e:f,Fd,gh,i,Fm,nonstandard)
{
	COMMON
	ONLY1(FPA);
	FPA_CC_FD_FMIMM(JUSTPARAMS,"MVF",cond,e_f,gh,Fd,i,Fm);
	return;
}

MNF(cond,e:f,Fd,gh,i,Fm,nonstandard)
{
	COMMON
	ONLY1(FPA);
	FPA_CC_FD_FMIMM(JUSTPARAMS,"MNF",cond,e_f,gh,Fd,i,Fm);
	return;
}

ABS(cond,e:f,Fd,gh,i,Fm,nonstandard)
{
	COMMON
	ONLY1(FPA);
	FPA_CC_FD_FMIMM(JUSTPARAMS,"ABS",cond,e_f,gh,Fd,i,Fm);
	return;
}

RND(cond,e:f,Fd,gh,i,Fm,nonstandard)
{
	COMMON
	ONLY1(FPA);
	FPA_CC_FD_FMIMM(JUSTPARAMS,"RND",cond,e_f,gh,Fd,i,Fm);
	return;
}

SQT(cond,e:f,Fd,gh,i,Fm,nonstandard)
{
	COMMON
	ONLY1(FPA);
	FPA_CC_FD_FMIMM(JUSTPARAMS,"SQT",cond,e_f,gh,Fd,i,Fm);
	return;
}

LOG(cond,e:f,Fd,gh,i,Fm,nonstandard)
{
	COMMON
	ONLY1(FPA);
	FPA_CC_FD_FMIMM(JUSTPARAMS,"LOG",cond,e_f,gh,Fd,i,Fm);
	return;
}

LGN(cond,e:f,Fd,gh,i,Fm,nonstandard)
{
	COMMON
	ONLY1(FPA);
	FPA_CC_FD_FMIMM(JUSTPARAMS,"LGN",cond,e_f,gh,Fd,i,Fm);
	return;
}

EXP(cond,e:f,Fd,gh,i,Fm,nonstandard)
{
	COMMON
	ONLY1(FPA);
	FPA_CC_FD_FMIMM(JUSTPARAMS,"EXP",cond,e_f,gh,Fd,i,Fm);
	return;
}

SIN(cond,e:f,Fd,gh,i,Fm,nonstandard)
{
	COMMON
	ONLY1(FPA);
	FPA_CC_FD_FMIMM(JUSTPARAMS,"SIN",cond,e_f,gh,Fd,i,Fm);
	return;
}

COS(cond,e:f,Fd,gh,i,Fm,nonstandard)
{
	COMMON
	ONLY1(FPA);
	FPA_CC_FD_FMIMM(JUSTPARAMS,"COS",cond,e_f,gh,Fd,i,Fm);
	return;
}

TAN(cond,e:f,Fd,gh,i,Fm,nonstandard)
{
	COMMON
	ONLY1(FPA);
	FPA_CC_FD_FMIMM(JUSTPARAMS,"TAN",cond,e_f,gh,Fd,i,Fm);
	return;
}

ASN(cond,e:f,Fd,gh,i,Fm,nonstandard)
{
	COMMON
	ONLY1(FPA);
	FPA_CC_FD_FMIMM(JUSTPARAMS,"ASN",cond,e_f,gh,Fd,i,Fm);
	return;
}

ACS(cond,e:f,Fd,gh,i,Fm,nonstandard)
{
	COMMON
	ONLY1(FPA);
	FPA_CC_FD_FMIMM(JUSTPARAMS,"ACS",cond,e_f,gh,Fd,i,Fm);
	return;
}

ATN(cond,e:f,Fd,gh,i,Fm,nonstandard)
{
	COMMON
	ONLY1(FPA);
	FPA_CC_FD_FMIMM(JUSTPARAMS,"ATN",cond,e_f,gh,Fd,i,Fm);
	return;
}

URD(cond,e:f,Fd,gh,i,Fm,nonstandard)
{
	COMMON
	ONLY1(FPA);
	FPA_CC_FD_FMIMM(JUSTPARAMS,"URD",cond,e_f,gh,Fd,i,Fm);
	return;
}

NRM(cond,e:f,Fd,gh,i,Fm,nonstandard)
{
	COMMON
	ONLY1(FPA);
	FPA_CC_FD_FMIMM(JUSTPARAMS,"NRM",cond,e_f,gh,Fd,i,Fm);
	return;
}

FLT(cond,e,Fn,Rd,f,gh,nonstandard)
{
	COMMON
	ONLY1(FPA);
	sprintf(params->buf,"FLT%s%c%s\tF%d,%s",condition(JUSTPARAMS,cond),fpaprecision(f,e),fpa_round[gh],Fn,REG(Rd));
	return;
}

FIX(cond,Rd,gh,Fm,nonstandard)
{
	COMMON
	ONLY1(FPA);
	sprintf(params->buf,"FIX%s%s\t%s,F%d",condition(JUSTPARAMS,cond),fpa_round[gh],REG(Rd),Fm);
	return;
}

WFS(cond,Rd,nonstandard)
{
	COMMON
	ONLY1(FPA);
	sprintf(params->buf,"WFS%s\t%s",condition(JUSTPARAMS,cond),REG(Rd));
	return;
}

RFS(cond,Rd,nonstandard)
{
	COMMON
	ONLY1(FPA);
	sprintf(params->buf,"RFS%s\t%s",condition(JUSTPARAMS,cond),REG(Rd));
	return;
}

WFC(cond,Rd,nonstandard)
{
	COMMON
	ONLY1(FPA);
	sprintf(params->buf,"WFC%s\t%s",condition(JUSTPARAMS,cond),REG(Rd));
	return;
}

RFC(cond,Rd,nonstandard)
{
	COMMON
	ONLY1(FPA);
	sprintf(params->buf,"RFC%s\t%s",condition(JUSTPARAMS,cond),REG(Rd));
	return;
}

CMF(cond,Fn,i,Fm,nonstandard)
{
	COMMON
	ONLY1(FPA);
	sprintf(params->buf,"CMF%s\tF%d,",condition(JUSTPARAMS,cond),Fn);
	if(i)
		strcat(params->buf,fpa_imm[Fm]);
	else
		scatf(params->buf,"F%d",Fm);
	return;
}

CNF(cond,Fn,i,Fm,nonstandard)
{
	COMMON
	ONLY1(FPA);
	sprintf(params->buf,"CNF%s\tF%d,",condition(JUSTPARAMS,cond),Fn);
	if(i)
		strcat(params->buf,fpa_imm[Fm]);
	else
		scatf(params->buf,"F%d",Fm);
	return;
}

CMFE(cond,Fn,i,Fm,nonstandard)
{
	COMMON
	ONLY1(FPA);
	sprintf(params->buf,"CMFE%s\tF%d,",condition(JUSTPARAMS,cond),Fn);
	if(i)
		strcat(params->buf,fpa_imm[Fm]);
	else
		scatf(params->buf,"F%d",Fm);
	return;
}

CNFE(cond,Fn,i,Fm,nonstandard)
{
	COMMON
	ONLY1(FPA);
	sprintf(params->buf,"CNFE%s\tF%d,",condition(JUSTPARAMS,cond),Fn);
	if(i)
		strcat(params->buf,fpa_imm[Fm]);
	else
		scatf(params->buf,"F%d",Fm);
	return;
}
