# This source code in this file is licensed to You by Castle Technology
# Limited ("Castle") and its licensors on contractual terms and conditions
# ("Licence") which entitle you freely to modify and/or to distribute this
# source code subject to Your compliance with the terms of the Licence.
# 
# This source code has been made available to You without any warranties
# whatsoever. Consequently, Your use, modification and distribution of this
# source code is entirely at Your own risk and neither Castle, its licensors
# nor any other person who has contributed to this source code shall be
# liable to You for any loss or damage which You may suffer as a result of
# Your use, modification or distribution of this source code.
# 
# Full details of Your rights and obligations are set out in the Licence.
# You should have received a copy of the Licence with this source code file.
# If You have not received a copy, the text of the Licence is available
# online at www.castle-technology.co.uk/riscosbaselicence.htm
# 

# Actions for ARMv8 disassembly

CRC_A1(cond,sz,Rn,Rd,C,Rm,nonstandard)
{
	COMMON
	static const char sizes[] = "BHWD";
	ONLY1(ARMv8);
	_UNPREDICTABLE((Rd==15) || (Rn==15) || (Rm==15) || (sz==3) || (cond!=14));
	sprintf(params->buf,"CRC32%s%c\t%s,%s,%s",C?"C":"",sizes[sz],REG(Rd),REG(Rn),REG(Rm));
	return;
}

SEVL_A1(cond,nonstandard)
{
	COMMON
	ONLY1(ARMv8);
	sprintf(params->buf,"SEVL%s",condition(JUSTPARAMS,cond));
	return;
}

HLT_A1(cond,imm12:imm4,nonstandard)
{
	COMMON
	ONLY1(ARMv8);
	_UNPREDICTABLE(cond!=14);
	sprintf(params->buf,"HLT%s\t%s%s%04X",condition(JUSTPARAMS,cond),(params->opt->ual?"#":""),HEX,imm12_imm4);
	return;
}

LDAEXB_A1(cond,Rn,Rt,nonstandard)
{
	COMMON
	ONLY1(ARMv8);
	_UNPREDICTABLE((Rt==15) || (Rn==15));
	sprintf(params->buf,"LDAEXB%s\t%s,[%s]",condition(JUSTPARAMS,cond),REG(Rt),REG(Rn));
	return;
}

LDAEXH_A1(cond,Rn,Rt,nonstandard)
{
	COMMON
	ONLY1(ARMv8);
	_UNPREDICTABLE((Rt==15) || (Rn==15));
	sprintf(params->buf,"LDAEXH%s\t%s,[%s]",condition(JUSTPARAMS,cond),REG(Rt),REG(Rn));
	return;
}

LDAEX_A1(cond,Rn,Rt,nonstandard)
{
	COMMON
	ONLY1(ARMv8);
	_UNPREDICTABLE((Rt==15) || (Rn==15));
	sprintf(params->buf,"LDAEX%s\t%s,[%s]",condition(JUSTPARAMS,cond),REG(Rt),REG(Rn));
	return;
}

LDAEXD_A1(cond,Rn,Rt,nonstandard)
{
	COMMON
	ONLY1(ARMv8);
	_UNPREDICTABLE((Rt&1) || (Rt==14) || (Rn==15));
	sprintf(params->buf,"LDAEXD%s\t%s,%s,[%s]",condition(JUSTPARAMS,cond),REG(Rt),REG((Rt+1)&0xf),REG(Rn));
	return;
}

STLEXB_A1(cond,Rn,Rd,Rt,nonstandard)
{
	COMMON
	_UNPREDICTABLE((Rd==15) || (Rt==15) || (Rn==15));
	_UNPREDICTABLE((Rd==Rn) || (Rd==Rt));
	ONLY1(ARMv8);
	sprintf(params->buf,"STLEXB%s\t%s,%s,[%s]",condition(JUSTPARAMS,cond),REG(Rd),REG(Rt),REG(Rn));
	return;
}

STLEXH_A1(cond,Rn,Rd,Rt,nonstandard)
{
	COMMON
	ONLY1(ARMv8);
	_UNPREDICTABLE((Rd==15) || (Rt==15) || (Rn==15));
	_UNPREDICTABLE((Rd==Rn) || (Rd==Rt));
	sprintf(params->buf,"STLEXH%s\t%s,%s,[%s]",condition(JUSTPARAMS,cond),REG(Rd),REG(Rt),REG(Rn));
	return;
}

STLEX_A1(cond,Rn,Rd,Rt,nonstandard)
{
	COMMON
	_UNPREDICTABLE((Rd==15) || (Rt==15) || (Rn==15));
	_UNPREDICTABLE((Rd==Rn) || (Rd==Rt));
	ONLY1(ARMv8);
	sprintf(params->buf,"STLEX%s\t%s,%s,[%s]",condition(JUSTPARAMS,cond),REG(Rd),REG(Rt),REG(Rn));
	return;
}

STLEXD_A1(cond,Rn,Rd,Rt,nonstandard)
{
	COMMON
	_UNPREDICTABLE((Rd==15) || (Rt&1) || (Rt==14) || (Rn==15));
	_UNPREDICTABLE((Rd==Rn) || ((Rd&0xe)==Rt));
	ONLY1(ARMv8);
	sprintf(params->buf,"STLEXD%s\t%s,%s,%s,[%s]",condition(JUSTPARAMS,cond),REG(Rd),REG(Rt),REG((Rt+1)&0xf),REG(Rn));
	return;
}

LDA_A1(cond,sz,Rn,Rt,nonstandard)
{
	COMMON
	ONLY1(ARMv8);
	_UNPREDICTABLE((Rt==15) || (Rn==15));
	sprintf(params->buf,"LDA%s%s\t%s,[%s]",condition(JUSTPARAMS,cond),(sz==0)?"":(sz==2)?"B":"H",REG(Rt),REG(Rn));
	return;
}

STL_A1(cond,sz,Rn,Rt,nonstandard)
{
	COMMON
	ONLY1(ARMv8);
	_UNPREDICTABLE((Rt==15) || (Rn==15));
	sprintf(params->buf,"STL%s%s\t%s,[%s]",condition(JUSTPARAMS,cond),(sz==0)?"":(sz==2)?"B":"H",REG(Rt),REG(Rn));
	return;
}
