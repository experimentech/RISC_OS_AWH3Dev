/* This source code in this file is licensed to You by Castle Technology
 * Limited ("Castle") and its licensors on contractual terms and conditions
 * ("Licence") which entitle you freely to modify and/or to distribute this
 * source code subject to Your compliance with the terms of the Licence.
 * 
 * This source code has been made available to You without any warranties
 * whatsoever. Consequently, Your use, modification and distribution of this
 * source code is entirely at Your own risk and neither Castle, its licensors
 * nor any other person who has contributed to this source code shall be
 * liable to You for any loss or damage which You may suffer as a result of
 * Your use, modification or distribution of this source code.
 * 
 * Full details of Your rights and obligations are set out in the Licence.
 * You should have received a copy of the Licence with this source code file.
 * If You have not received a copy, the text of the Licence is available
 * online at www.castle-technology.co.uk/riscosbaselicence.htm
 */
/*
 *  AsmUtils (modulefp.h)
 *
 * Copyright (C) Pace Micro Technology plc. 1999
 *
 */
#ifndef asmutils_modulefp_h_inluded
#define asmutils_modulefp_h_inluded

#ifdef __cplusplus
extern "C" {
#endif

/*
 * This function should be called before doing any floating point operations
 * in a module. It cannot be called from interrupt routines. Note that if
 * the caller was on the verge of generating a floating point exception (e.g.
 * divide by zero), then the exception will be generated by your own
 * floating point code instead. Since raising your own exceptions would be
 * very ugly, all exceptions are disabled in the FPSR setup.
 *
 * Remember that the routine which calls this function may not then start
 * using floating point code itself, it must invoke another APCS routine
 * to do that. You must have a 32-bit FPEmulator module (there is no 'Z' in
 * the help string).
 */

typedef struct modulefp_buf
{
  unsigned int fpsr;
  unsigned int regs[12];

} modulefp_buf;

extern void modulefp_enable(modulefp_buf * regs);

/*
 * Once finished with floatng point code, you MUST call this function to
 * restore the previous state of the system.
 */

extern void modulefp_disable(modulefp_buf * regs);

#ifdef __cplusplus
}
#endif
#endif
