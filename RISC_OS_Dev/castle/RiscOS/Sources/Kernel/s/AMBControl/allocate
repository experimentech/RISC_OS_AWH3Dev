; This source code in this file is licensed to You by Castle Technology
; Limited ("Castle") and its licensors on contractual terms and conditions
; ("Licence") which entitle you freely to modify and/or to distribute this
; source code subject to Your compliance with the terms of the Licence.
; 
; This source code has been made available to You without any warranties
; whatsoever. Consequently, Your use, modification and distribution of this
; source code is entirely at Your own risk and neither Castle, its licensors
; nor any other person who has contributed to this source code shall be
; liable to You for any loss or damage which You may suffer as a result of
; Your use, modification or distribution of this source code.
; 
; Full details of Your rights and obligations are set out in the Licence.
; You should have received a copy of the Licence with this source code file.
; If You have not received a copy, the text of the Licence is available
; online at www.castle-technology.co.uk/riscosbaselicence.htm
; 
; > s.allocate

; handle allocate reason code

; entry:
;     R0 = 0 (reason code 0)
;     R1 = number of pages
;
; exit:
;     R1 = no. of pages actually allocated
;     R2 = handle for allocation, 0 if pages were requested but none could be claimed

allocate
        Push    "R0,R3,R4,LR"

      [ AMB_Debug
        DebugReg r1, "allocate "
      ]

        LDR     R3,=AbsMaxAppSize-ApplicationStart
        MOV     R3,R3,LSR #Log2PageSize   ;R3 = absolute max app pages

        CMP     R1,R3
        MOVGT   R1,R3

;get handle for node
        LDR     R0,AMBNodeHandles
        LDR     R4,[R0]
        CMP     R4,#0            ;any handles available?
        BNE     %FT01

  ; give up
        Pull    "R0,R3,R4,LR"
        ADR     R0,err_nomorehandles
        B       SLVK_SetV

01
;get memory for node - from system heap
        MOV     R3,#AMBNode_HdrSize
        BL      AMB_BlockClaim
        BVS     alloc_done

;remember handle in node
        STR     R4,[R2,#AMBNode_handle]

;init fields of new node
        LDR     R4,=AMBMagicNodeID
        STR     R4,[R2,#AMBNode_id]        ;magic id
        MOV     R4,#0
        STR     R4,[R2,#AMBNode_DANode+DANode_PMPSize] ;number of pages = 0 (so far)
        LDR     R4,=ZeroPage+AppSpaceDANode
        LDR     R4,[R4,#DANode_Flags]      ;Get the page flags from the DA.
        LDR     LR,=DynAreaFlags_AccessMask
        AND     R4,R4,LR
        ORR     R4,R4,#DynAreaFlags_PMP
        ORR     R4,R4,#DynAreaFlags_NeedsSpecificPages
        STR     R4,[R2,#AMBNode_DANode+DANode_Flags]
;fill in other DANode bits
        MOV     R4,#0
        STR     R4,[R2,#AMBNode_DANode+DANode_Link]
        STR     R4,[R2,#AMBNode_DANode+DANode_Size]
        STR     R4,[R2,#AMBNode_DANode+DANode_SubLink]
        STR     R4,[R2,#AMBNode_DANode+DANode_SparseHWM]
        STR     R4,[R2,#AMBNode_DANode+DANode_SortLink]
        STR     R4,[R2,#AMBNode_DANode+DANode_PMP]
        STR     R4,[R2,#AMBNode_DANode+DANode_PMPMaxSize]
        STR     R2,[R2,#AMBNode_DANode+DANode_Workspace]
        ADR     R4,AMBDAHandler
        STR     R4,[R2,#AMBNode_DANode+DANode_Handler]
        ADR     R4,AMBDAName
        STR     R4,[R2,#AMBNode_DANode+DANode_Title]
        LDR     R4,=AbsMaxAppSize-ApplicationStart
        STR     R4,[R2,#AMBNode_DANode+DANode_MaxSize]
        MOV     R4,#ChangeDyn_AplSpace
        STR     R4,[R2,#AMBNode_DANode+DANode_Number]
        MOV     R4,#ApplicationStart
        STR     R4,[R2,#AMBNode_DANode+DANode_Base]

;do the actual MMU page allocation (grow from 0), for R1 pages, using node R2
        BL      growpages              
        BVS     alloc_done

        CMP     R1,#0                    ;EQ status if we were asked for 0 pages
        LDR     R1,[R2,#AMBNode_DANode+DANode_PMPSize] ;actual no. of pages we achieved
        BEQ     alloc_ok                 ;if asked for 0, regard as ok

        CMP     R1,#0
        BEQ     alloc_zeropages          ;achieving 0 pages is not ok

;ok, so remove handle from free list
alloc_ok
        LDR     R0,AMBNodeHandles
        LDR     R4,[R2,#AMBNode_handle]
        LDR     R3,[R0,R4,LSL #2]  ;next free handle
        STR     R3,[R0]            ;store as new first free handle
        STR     R2,[R0,R4,LSL #2]  ;and remember node address in handle array

;R2 -> new node - put it on front of list
        ADR     R3,AMBAnchorNode        ; R3 -> ank_node
        LDR     R4,[R3,#AMBNode_next]   ; R4 -> old_node (old front)
        STR     R4,[R2,#AMBNode_next]   ; new_next := old_node
        STR     R2,[R3,#AMBNode_next]   ; ank_next := new_node
        STR     R3,[R2,#AMBNode_prev]   ; new_prev := ank_node
        STR     R2,[R4,#AMBNode_prev]   ; old_prev := new_node

        LDR     R4,AMBNtasks
        ADD     R4,R4,#1
        STR     R4,AMBNtasks

        STR     R2,AMBMappedInNode       ;allocated node is also mapped in
        LDR     R2,[R2,#AMBNode_handle]  ;change address to handle
        CLRV

alloc_done
      [ AMB_Debug
        DebugReg r1,"<alloc "
        DebugReg r2
      ]
        STRVS   R0,[SP]
        Pull    "R0,R3,R4,LR"
        B       SLVK_TestV

;free page table space and return 0 handle
alloc_zeropages
        BL      AMB_BlockFree
        MOV     R1,#0
        MOV     R2,#0
        B       alloc_done

AMBDAName
        = "AMBControl DANode", 0
        ALIGN

        LTORG

    END
