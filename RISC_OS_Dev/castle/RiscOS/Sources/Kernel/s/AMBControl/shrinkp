; This source code in this file is licensed to You by Castle Technology
; Limited ("Castle") and its licensors on contractual terms and conditions
; ("Licence") which entitle you freely to modify and/or to distribute this
; source code subject to Your compliance with the terms of the Licence.
; 
; This source code has been made available to You without any warranties
; whatsoever. Consequently, Your use, modification and distribution of this
; source code is entirely at Your own risk and neither Castle, its licensors
; nor any other person who has contributed to this source code shall be
; liable to You for any loss or damage which You may suffer as a result of
; Your use, modification or distribution of this source code.
; 
; Full details of Your rights and obligations are set out in the Licence.
; You should have received a copy of the Licence with this source code file.
; If You have not received a copy, the text of the Licence is available
; online at www.castle-technology.co.uk/riscosbaselicence.htm
; 
; > s.shrinkp


;shrink slot by taking pages (from AppSpace); add them to FreePool


; entry:
;     R1 = new number of pages for slot (less than current value)
;     R2 -> AMB Node

shrinkpages     ROUT
        Entry   "R0-R7,R10-R11"

        MOV     R6,R1                   ;save entry R1
        LDR     R5,[R2,#AMBNode_DANode+DANode_PMPSize]
        CMP     R5,R6
        EXIT    EQ                      ;done if no. of pages unchanged

        ADD     R10,R2,#AMBNode_DANode

        LDR     LR,AMBMappedInNode
        CMP     LR,R2
        BNE     %FT10

        ; Map out pages
        Push    "R5,R12"
        SUB     R5,R5,R1
        MOV     R7,#0
        BL      AMB_SetMemMapEntries_MapOut_Lazy
        Pull    "R5,R12"

10
        ; Release pages from PMP
        Push    "R2"
        SUB     SP,SP,#64*12            ;Temp page list
        MOV     R7,#-1                  ; Release page from PMP
15
        MOV     R3,#0
        MOV     LR,#0
        MOV     R2,SP
20
        SUB     R5,R5,#1
        STMIA   R2!,{R5,R7,LR}          ;Fill page list with decreasing PMP page indices, so last page added by growpages is first to be removed by shrinkpages (keeps free pool in optimal order for DMA)
        ADD     R3,R3,#1
        CMP     R5,R1
        CMPNE   R3,#64
        BNE     %BT20
        Push    "R10,R12"
        ADD     R2,SP,#8
        BL      DynArea_PMP_PhysOp_WithNode
        Pull    "R10,R12"
        ; Release shouldn't fail, so ignore any errors
        CMP     R5,R1
        BNE     %BT15
        ADD     SP,SP,#64*12
        Pull    "R2"

        ; Shrink max size of PMP
        Push    "R2,R12"
        LDR     R1,[R10,#DANode_PMPMaxSize]
        LDR     R2,[R10,#DANode_PMPSize]
        SUB     R2,R2,R1
        BL      DynArea_PMP_Resize_WithNode
        Pull    "R2,R12"

        ; Update AplWorkSize, MemLimit if this is the current AMBNode
        LDR     R5,AMBMappedInNode
        CMP     R5,R2
        BNE     %FT90
        LDR     R5,[R2,#AMBNode_DANode+DANode_PMPSize]
        MOV     R2,#ApplicationStart
        ADD     R5,R2,R5,LSL #Log2PageSize
        LDR     R2,=ZeroPage
        STR     R5,[R2,#AplWorkSize]
        STR     R5,[R2,#MemLimit]

90
        CLRV
        EXIT


    END
