; This source code in this file is licensed to You by Castle Technology
; Limited ("Castle") and its licensors on contractual terms and conditions
; ("Licence") which entitle you freely to modify and/or to distribute this
; source code subject to Your compliance with the terms of the Licence.
; 
; This source code has been made available to You without any warranties
; whatsoever. Consequently, Your use, modification and distribution of this
; source code is entirely at Your own risk and neither Castle, its licensors
; nor any other person who has contributed to this source code shall be
; liable to You for any loss or damage which You may suffer as a result of
; Your use, modification or distribution of this source code.
; 
; Full details of Your rights and obligations are set out in the Licence.
; You should have received a copy of the Licence with this source code file.
; If You have not received a copy, the text of the Licence is available
; online at www.castle-technology.co.uk/riscosbaselicence.htm
; 
; s.growshrink

; change number of pages in slot (grow/shrink)

; entry:
;     R0 = 2 (reason code 2)
;     R1 = new number of pages required
;     R2 = handle
;
; exit:
;     R1 = new number of pages actually achieved
;     R2 = 0 if AMB handle freed (else preserved)
;     R3 = old number of pages

growshrink

        Push    "R0,R2,R4,R5,LR"

      [ AMB_Debug
        DebugReg r1, "growshrink "
        DebugReg r2
      ]

        MOV     R5,#AbsMaxAppSize
        SUB     R5,R5,#ApplicationStart
        MOV     R5,R5,LSR #Log2PageSize   ;R5 = absolute max app pages
        CMP     R1,R5
        MOVGT   R1,R5

      [ ValidateAMBHandles
        ;validate handle
        LDR     R0,AMBNhandles
        CMP     R2,R0
        BGT     badsghandle
        CMP     R2,#1
        BLT     badsghandle
      ]

        LDR     R0,AMBNodeHandles   ; R0 -> handles array
        LDR     R2,[R0,R2,LSL #2]   ; R2 -> node

      [ ValidateAMBHandles
        ;check we have a proper id for node
        LDR     R3,=AMBMagicNodeID
        LDR     LR,[R2,#AMBNode_id]
        CMP     LR,R3
        BNE     badsghandle
      ]

        LDR     R3,[R2,#AMBNode_DANode+DANode_PMPSize]
        CMP     R1,R3
        BEQ     gs_done                ; done if no change

        SUB     R1,R1,R3
        ADD     R2,R2,#AMBNode_DANode
      [ {FALSE} ; Currently batcalls on PMPs will treat the PMP as if it were a regular DA (necessary for the PMP page claim implementation) - so just call our DA handler directly
        MOV     R0,#ChangeDyn_Batcall
        MOV     R1,R1,LSL #Log2PageSize
        SWI     XOS_ChangeDynamicArea  ; Make batcall so we can specify our node
      |
        Push    "R12"
        MOV     R0,#DAHandler_ResizePMP
        ASSERT  DANode_Handler = DANode_Workspace + 4
        ADD     R12,R2,#DANode_Workspace
        MOV     LR,PC
        LDMIA   R12,{R12,PC}
        Pull    "R12"
      ]
      [ AMB_Debug
        BVC     %FT50
        LDR     r0, [r0]
        DebugReg r0, "growshrink CDA err "
50
;        DebugReg r1, "growshrink CDA result "
      ]
        LDR     R1,[R2,#DANode_PMPSize]
        CMP     R1,#0                  ; if shrunk to zero
        LDR     R2,[R2,#AMBNode_handle-AMBNode_DANode]
        BNE     gs_done
        MOV     R0,#1
        SWI     XOS_AMBControl         ; then completely free the node
        MOV     R2,#0
        STR     R2,[SP,#4]               ;poke freed handle to saved R2
gs_done
      [ AMB_Debug
        DebugReg r1, "<growshrink "
        DebugReg r2
        DebugReg r3
      ]
        Pull    "R0,R2,R4,R5,LR"
        B       SLVK

        LTORG


      [ ValidateAMBHandles
badsghandle
        Pull    "R0,R2,R4,R5,LR"
        B       badhandle
      ]


    END
