; This source code in this file is licensed to You by Castle Technology
; Limited ("Castle") and its licensors on contractual terms and conditions
; ("Licence") which entitle you freely to modify and/or to distribute this
; source code subject to Your compliance with the terms of the Licence.
; 
; This source code has been made available to You without any warranties
; whatsoever. Consequently, Your use, modification and distribution of this
; source code is entirely at Your own risk and neither Castle, its licensors
; nor any other person who has contributed to this source code shall be
; liable to You for any loss or damage which You may suffer as a result of
; Your use, modification or distribution of this source code.
; 
; Full details of Your rights and obligations are set out in the Licence.
; You should have received a copy of the Licence with this source code file.
; If You have not received a copy, the text of the Licence is available
; online at www.castle-technology.co.uk/riscosbaselicence.htm
; 

        GET     Hdr:ListOpts
        GET     Hdr:Macros
        GET     Hdr:System
        GET     Hdr:CMOS
        GET     Hdr:OsBytes
        GET     Hdr:FSNumbers
        GET     Hdr:NewErrors
                
        TTL     SetStation

        AREA    |SetStation$$Code|, CODE, READONLY, PIC

Legacy_IOCControlSoftCopy * &106        ; Zero page peek

; SetStation
Utility_Code
        SUB     SP,SP,#&30              ; Workaround bug in Arthur 1.20
        LDRB    R0,[R1]
        TEQ     R0,#0                   ; Any args?
        BEQ     %FT20
        MOV     R0,#&0A
        SWI     XOS_ReadUnsigned
        MOVVS   PC,R14
10
        LDRB    R0,[R1],#1
        CMP     R0,#&20                 ; Trim trailing spaces
        BEQ     %BT10
        BCC     %FT30
20
        ADR     R0,ErrorBlock_Syntax
        ORRS    PC,R14,#V_bit
30
        MOVS    R6,R2                   ; Can't be station 0
        BEQ     %FT40
        CMP     R6,#&FF                 ; Can't be station 255
        BCC     %FT50
40
        ADR     R0,ErrorBlock_BadStation
        ORRS    PC,R14,#V_bit
50
        MOV     R7,R14
        MOV     R0,#OsByte_ReadCMOS
        MOV     R1,#NetStnCMOS
        SWI     XOS_Byte
        MOVVS   PC,R7

        TEQ     R2,R6                   ; Station number is already that value anyway
        BICEQS  PC,R7,#V_bit

        MOV     R9,R2
        MOV     R0,#OsByte_ReadCMOS
        MOV     R1,#CheckSumCMOS
        SWI     XOS_Byte
        MOVVS   PC,R7

        MOV     R10,R2
        SUB     R10,R10,R9
        ADD     R10,R10,R2              ; Fix up the checksum

        MOV     R5,#&40                 ; Physical address of NetStnCMOS
        MOV     R4,R6
        BL      LowLevelWrite

        MOV     R5,#&3F                 ; Physical address of CheckSumCMOS
        MOV     R6,R10
        BL      LowLevelWrite

        MOV     R0,#OsByte_ReadCMOS
        MOV     R1,#NetStnCMOS
        SWI     XOS_Byte
        MOVVS   PC,R7
        TEQ     R4,R2                   ; Read back OK?
        BICEQS  PC,R7,#V_bit
        ADR     R0,ErrorBlock_SetStationFails
        ORRS    PC,R7,#V_bit

        DCB     "SetStation", 9, "2.00/0008 (25 Jan 1988) assembled at 16:32:24.", 0
        ALIGN

; Error blocks
ErrorBlock_Syntax
        DCD     ErrorNumber_Syntax
        DCB     "Syntax: *SetStation <new station number>", 0
        ALIGN
ErrorBlock_SetStationFails
        DCD     ErrorNumber_SetStationFails
        DCB     "Fails to update configuration memory", 0
        ALIGN
ErrorBlock_BadStation
        DCD     ErrorNumber_BadStation
        DCB     "Bad station number", 0
        ALIGN

; Bit bashed IIC
LowLevelWrite
        MOV     R8,R14
        SWI     XOS_EnterOS

        BL      LowLevelStart

        MOV     R0,#&A0
        BL      Clock8Bits
        BL      LowLevelAck
        MOV     R0,R5
        BL      Clock8Bits
        BL      LowLevelAck
        MOV     R0,R6
        BL      Clock8Bits
        BL      LowLevelAck

        BL      LowLevelStop

        TEQP    PC,#0
        MOVNV   R0,R0
        MOV     PC,R8

SetClockAndData
        Push    "R0-R2,R14"
        MOV     R0,#OsByte_Wait
        SWI     XOS_Byte                ; Slow down
        LDMIA   SP,{R0,R1}
        ADD     R0,R0,R1,LSL #1
        MOV     R2,#0
        LDRB    R1,[R2,#Legacy_IOCControlSoftCopy]
        BIC     R1,R1,#3
        ORR     R0,R1,R0
        ORR     R0,R0,#&C0
        STRB    R0,[R2,#Legacy_IOCControlSoftCopy]
        MOV     R2,#IOC
        STRB    R0,[R2,#IOCControl]     ; Update IIC lines
        Pull    "R0-R2,PC"

ClockOneBit
        Push    "R1,R14"
        MOV     R1,#0
        BL      SetClockAndData
        MOV     R1,#1
        BL      SetClockAndData
        MOV     R1,#0
        BL      SetClockAndData
        Pull    "R1,PC"

LowLevelStart
        Push    "R0,R1,R14"
        MOV     R0,#1
        MOV     R1,#1
        BL      SetClockAndData
        MOV     R0,#0
        MOV     R1,#1
        BL      SetClockAndData
        MOV     R0,#0
        MOV     R1,#0
        BL      SetClockAndData
        Pull    "R0,R1,PC"

LowLevelAck
        Push    "R0,R1,R14"
        MOV     R0,#1
        MOV     R1,#1
        BL      SetClockAndData
        MOV     R0,#1
        MOV     R1,#0
        BL      SetClockAndData
        Pull    "R0,R1,PC"

LowLevelStop
        Push    "R0,R1,R14"
        MOV     R0,#0
        MOV     R1,#1
        BL      SetClockAndData
        MOV     R0,#1
        MOV     R1,#1
        BL      SetClockAndData
        Pull    "R0,R1,PC"

Clock8Bits ROUT
        Push    "R0-R2,R14"
        MOV     R2,R0
        MOV     R1,#&80
10
        TST     R2,R1
        MOVEQ   R0,#0
        MOVNE   R0,#1
        BL      ClockOneBit
        MOVS    R1,R1,LSR #1
        BNE     %BT10                   ; Sent 8 bits?
        Pull    "R0-R2,PC"

        END
