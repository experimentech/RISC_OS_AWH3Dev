/* This source code in this file is licensed to You by Castle Technology
 * Limited ("Castle") and its licensors on contractual terms and conditions
 * ("Licence") which entitle you freely to modify and/or to distribute this
 * source code subject to Your compliance with the terms of the Licence.
 * 
 * This source code has been made available to You without any warranties
 * whatsoever. Consequently, Your use, modification and distribution of this
 * source code is entirely at Your own risk and neither Castle, its licensors
 * nor any other person who has contributed to this source code shall be
 * liable to You for any loss or damage which You may suffer as a result of
 * Your use, modification or distribution of this source code.
 * 
 * Full details of Your rights and obligations are set out in the Licence.
 * You should have received a copy of the Licence with this source code file.
 * If You have not received a copy, the text of the Licence is available
 * online at www.castle-technology.co.uk/riscosbaselicence.htm
 */
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <stdarg.h>
#include <ctype.h>
#include <time.h>

typedef struct
{
  int dir_size;
  /* And lots of other stuff */
} DIR_info;

#define FALSE    0
#define TRUE     (!FALSE)
#define MIN(a,b) ((a)>(b)?(b):(a))

static int my_dprintf(const char *dunno, const char *fmt, ...)
{
#define dprintf(a) my_dprintf a
  int ret;
  va_list args;

  va_start(args, fmt);
  ret = vprintf(fmt, args);
  va_end(args);
  return ret;
}

static void *findDIRentry(char *name, DIR_info *cdir, int size, int *restart)
{
  if ((rand() & 0xF) == 0) return NULL; /* 1:16 odds of a success */
  return "Try again";
}

static int shorten_part(const char *longfname, char *buff, size_t limit)
{
  size_t i, j;
  int    identity = TRUE;

  for (i = 0, j = 0; j < limit; i++)
  {
    if ((longfname[i] == '.') || (longfname[i] == '\0'))
    {
      /* Reached the end of the base name */
      break;
    }
    if (strchr("+,;=[]", longfname[i]) != NULL)
    {
      /* Substitute forbidden short name characters */
      buff[j++] = '_';
      identity = FALSE;
      continue;
    }
    if (longfname[i] == ' ')
    {
      /* Swallow spaces */
      identity = FALSE;
      continue;
    }
    buff[j++] = toupper(longfname[i]);
  }
  buff[j] = '\0';

  return !identity;
}

int shorten_lfn(char *longfname, char *shortname, DIR_info *cdir)
{
  size_t i;
  int    retval, nondot, tilde;
  char  *extension;
  char   basebuff[8+1];
  char   extbuff[1+3+1];
  char   compbuff[8+1+3+1];

  /* Build the base name up to 8 long starting at the first non dot */
  for (i = 0; longfname[i] == '.'; i++)
  {
  }
  nondot = i;
  tilde = shorten_part(&longfname[i], basebuff, 8);
 
  /* Locate the outermost extension and truncate to 3 letters */
  extension = strrchr(longfname, '.');
  if ((extension == NULL) || (&extension[1] == &longfname[nondot]))
  {
    /* No extension, or found dot was at the start before the base name */
    extension = "";
  }
  shorten_part(&extension[1], &extbuff[1], 3);
  extbuff[0] = '.';
  dprintf(("", "shorten_lfn '%s' => base '%s' & ext '%s'\n", longfname, basebuff, extbuff));

  /* If a tilde was needed, inject it */
  if (tilde)
  {
    int  index, length;
    char fmt[] = "%0.?s~%u%s";

    if (strlen(basebuff) <= 2)
    {
      /* Bit short, add a few digits */
      sprintf(compbuff, "%04X", time(NULL));
      strcat(basebuff, compbuff);
    }
    length = MIN(strlen(basebuff), 6);
    fmt[3] = '0' + length;
    for (i = 1; i <= 99; i++)
    {
      if ((i == 10) && (length == 6)) fmt[3]--; /* Budge an extra digit */
      sprintf(compbuff, fmt, basebuff, i, extbuff);
      index = 0;
      if (findDIRentry(compbuff, cdir, cdir->dir_size, &index) == NULL)
      {
        /* No match, so we can use that tilde suffix */
        break;
      }
    }
    dprintf(("", "            tilde needed, clear to use '%s'\n", compbuff));
  }
  else
  {
    strcpy(compbuff, basebuff);
    strcat(compbuff, extbuff);
    dprintf(("", "            composite '%s'\n", compbuff));
  }

  /* See if the short candidate is the same as the long one */
  retval = strcmp(longfname, compbuff);
  if (retval == 0)
  {
    dprintf(("", "            long will do as short\n"));
  }

  /* Rejig the short name into its dotless form ready to put into a dir entry */
  *strchr(compbuff, '.') = '\0';
  sprintf(shortname, "%-8.8s%-3s", compbuff, &extbuff[1]);
  dprintf(("", "            dir entry '%s'\n", shortname));

  return retval;
}

int main(void)
{
  char shortname[14];

  shorten_lfn("This is a really long filename.123.456.789", shortname, NULL);
  shorten_lfn("RISCOS.IMG", shortname, NULL);
  shorten_lfn("MuchLess.xls", shortname, NULL);
  shorten_lfn("One+One.TWO.Cleary", shortname, NULL);
  shorten_lfn("A file.d,c", shortname, NULL);
  shorten_lfn("A file.d c", shortname, NULL);
  shorten_lfn("BaseOnly", shortname, NULL);
  shorten_lfn("[K", shortname, NULL);
  shorten_lfn(".....bashrc", shortname, NULL);
  shorten_lfn(".CODE.....H", shortname, NULL);
  shorten_lfn("A long filename.txt", shortname, NULL);

  return 0;
}
