; This source code in this file is licensed to You by Castle Technology
; Limited ("Castle") and its licensors on contractual terms and conditions
; ("Licence") which entitle you freely to modify and/or to distribute this
; source code subject to Your compliance with the terms of the Licence.
; 
; This source code has been made available to You without any warranties
; whatsoever. Consequently, Your use, modification and distribution of this
; source code is entirely at Your own risk and neither Castle, its licensors
; nor any other person who has contributed to this source code shall be
; liable to You for any loss or damage which You may suffer as a result of
; Your use, modification or distribution of this source code.
; 
; Full details of Your rights and obligations are set out in the Licence.
; You should have received a copy of the Licence with this source code file.
; If You have not received a copy, the text of the Licence is available
; online at www.castle-technology.co.uk/riscosbaselicence.htm
; 

; Public interface (ie interface to DMAManager) of DMA HAL devices

        GET     hdr:HALDevice

OldOpt  SETA    {OPT}
        OPT     OptNoList+OptNoP1List

 [ :LNOT: :DEF: Included_Hdr_DMADevice
                       GBLL Included_Hdr_DMADevice
Included_Hdr_DMADevice SETL {TRUE}

; Device for each DMA controller

                                ^       0
                                #       HALDeviceSize
HALDevice_DMACFeatures          #       4
HALDevice_DMACEnumerate         #       4
HALDevice_DMACAllocate          #       4
HALDevice_DMACDeallocate        #       4
HALDevice_DMAC_Size             *       :INDEX: @
; Extra data for API 0.1
HALDevice_DMACTestIRQ2          #       4
HALDevice_DMAC_Size_0_1         *       :INDEX: @

; Device for each physical DMA channel (buffer type)

                                ^       0
                                #       HALDeviceSize
HALDevice_DMAFeatures           #       4
HALDevice_DMAController         #       4
HALDevice_DMAAbort              #       4
HALDevice_DMASetOptions         #       4
HALDevice_DMASetCurrentTransfer #       4
HALDevice_DMASetNextTransfer    #       4
HALDevice_DMATransferState      #       4
HALDevice_DMAIRQClear           #       4
HALDevice_DMAStatus             #       4
HALDevice_DMASetCurrentTransfer2 #      4
HALDevice_DMASetNextTransfer2   #       4
HALDevice_DMATransferState2     #       4
HALDevice_DMA_Size              *       :INDEX: @

DMAFeaturesFlag_DualAddress             *       1 :SHL: 0       ; reserved for indicating memory-to-memory channels etc
DMAFeaturesFlag_NotCircular             *       1 :SHL: 1       ; (list type only)
DMAFeaturesFlag_NotInfinite             *       1 :SHL: 2       ; (list type only)
DMAFeaturesFlag_NoSyncIRQs              *       1 :SHL: 3       ; (list type only)
DMAFeaturesFlag_NoInitIRQ               *       1 :SHL: 4       ; doesn't generate an IRQ if 'Activate' is called with no pending transfers (API 1.0+)
DMAFeaturesFlag_DoubleBuffered          *       1 :SHL: 5       ; implements SetNextTransfer, used in conjunction with NoInitIRQ

DMASetOptionsFlag_Write                 *       1 :SHL: 0
DMASetOptionsShift_Width                *       1
DMASetOptionsMask_Width                 *       31 :SHL: DMASetOptionsShift_Width
DMASetOptionsShift_Speed                *       6
DMASetOptionsMask_Speed                 *       7 :SHL: DMASetOptionsShift_Speed
DMASetOptionsShift_PostDelay            *       9
DMASetOptionsMask_PostDelay             *       15 :SHL: DMASetOptionsShift_PostDelay
DMASetOptionsFlag_NoBursts              *       1 :SHL: 13
DMASetOptionsFlag_NoClockSync           *       1 :SHL: 14
DMASetOptionsFlag_Circular              *       1 :SHL: 15      ; (list type only)

DMASetTransferFlag_Stop                 *       1 :SHL: 0       ; raise TC after this transfer

DMAStatusFlag_NoUnstarted               *       1 :SHL: 0       ; there are no transfers programmed but not yet started
DMAStatusFlag_Overrun                   *       1 :SHL: 1       ; this channel has not yet been used, or is over/underrunning
DMAStatusFlag_EarlyOverrun              *       1 :SHL: 2       ; this channel over/underran during the last interrupt routine

; Device for each physical DMA channel (list type)

                                ^       HALDevice_DMASetCurrentTransfer ; same names up to here
HALDevice_DMASetListTransfer    #       4
HALDevice_DMAListTransferProgress #     4
HALDevice_DMAListTransferStatus #       4
HALDevice_DMACurtailListTransfer #      4
HALDevice_DMAL_Size             *       :INDEX: @

                                ^       0
DMAFeaturesBlock_Flags          #       4                       ; bit fields per DMAFeaturesFlag above
DMAFeaturesBlock_BlockSize      #       4
DMAFeaturesBlock_BlockAlign     #       4
DMAFeaturesBlock_BlockBound     #       4
DMAFeaturesBlock_MaxTransfers   #       4
DMAFeaturesBlock_TransferLimit  #       4
DMAFeaturesBlock_TransferBound  #       4
DMAFeaturesBlockSize            *       :INDEX: @

DMAListTransferStatusFlag_MemoryError   *       1 :SHL: 0
DMAListTransferStatusFlag_DeviceError   *       1 :SHL: 1

 ]

        OPT     OldOpt
        END
