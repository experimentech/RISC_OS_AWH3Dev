; This source code in this file is licensed to You by Castle Technology
; Limited ("Castle") and its licensors on contractual terms and conditions
; ("Licence") which entitle you freely to modify and/or to distribute this
; source code subject to Your compliance with the terms of the Licence.
; 
; This source code has been made available to You without any warranties
; whatsoever. Consequently, Your use, modification and distribution of this
; source code is entirely at Your own risk and neither Castle, its licensors
; nor any other person who has contributed to this source code shall be
; liable to You for any loss or damage which You may suffer as a result of
; Your use, modification or distribution of this source code.
; 
; Full details of Your rights and obligations are set out in the Licence.
; You should have received a copy of the Licence with this source code file.
; If You have not received a copy, the text of the Licence is available
; online at www.castle-technology.co.uk/riscosbaselicence.htm
; 
;; -> macros
;; =============================================
;; Macros should be kept in ALPHABETICAL order !
;; =============================================
;;
;;   CDFSDriverError
;;   CLV
;;   Debug
;;   Debug0
;;   DebugDisplay
;;   DebugWaitForAKey
;;

;************************************
; This allows nice errors from CDFS driver
;************************************
        MACRO
$label  CDFSDriverError $name, $message
$name DCD CDFSDriverErrorNumber
       = "$message"
       = 0
CDFSDriverErrorNumber SETA CDFSDriverErrorNumber + 1
 ALIGN
        MEND

; **********************************************************
; This will print a message if 'debug' = ON.
; **********************************************************
        MACRO
$label  Debug $string,$nl
$label  [ debug=ON
        Push r14
         [ hostvdu=ON
        SWI XHostFS_HostVdu
         ]
        SWI XOS_WriteS
        = "$string"
         [ "$nl"="NL"
        = 13,10
         ]
        = 0
        ALIGN
         [ hostvdu=ON
        SWI XHostFS_TubeVdu
         ]
        Pull r14
        ]
        MEND

; **********************************************************
; This will perform a XOS_Write0 if 'debug' = ON.
; **********************************************************
        MACRO
$label  Debug0 $string,$nl
$label  [ debug=ON
        Push r14
         [ hostvdu=ON
        SWI XHostFS_HostVdu
         ]
        SWI XOS_Write0
         [ "$nl"="NL"
        SWI XOS_NewLine
         ]
         [ hostvdu=ON
        SWI XHostFS_TubeVdu
         ]
        Pull r14
        ]
        MEND

; **********************************************************
; This will perform a Display if 'debug' = ON.
; **********************************************************
        MACRO
$label  DebugDisplay $string,$nl
$label  [ debug=ON
        Push r14
         [ hostvdu=ON
        SWI XHostFS_HostVdu
         ]
        Display $string,$nl
         [ hostvdu=ON
        SWI XHostFS_TubeVdu
         ]
        Pull r14
        ]
        MEND

; **********************************************************
; This will perform a wait-for-key if 'debug' = ON.
; **********************************************************
        MACRO
$label  DebugWaitForAKey
$label  [ debug=ON
        Push "r0-r2,r14"
        MOV R0, #OsByte_ScanKeyboardFrom16
01
        SWI XOS_Byte
        CMP R1, #&FF
        BEQ %BT01
        Pull "r0-r2,r14"
        ]
        MEND

        MACRO
$label  SWIExitVC $cond
$label [ "$cond"<>"AL" :LAND: "$cond"<>""
        DCI     &1A000002 :EOR: Cond_$cond ; branch over on opposite condition
      ]
        CMP     pc, pc
        Pull    "r0-r11, pc", EQ
        Pull    "r0-r11, pc",, ^
        MEND

        MACRO
$label  SWIExitVS $cond
$label [ "$cond"<>"AL" :LAND: "$cond"<>""
        DCI     &1A000004 :EOR: Cond_$cond ; branch over on opposite condition
      ]
        TEQ     PC, PC
        MSREQ   CPSR_f, #Z_bit :OR: V_bit
        Pull    "r0-r11, pc", EQ
        Pull    "r0-r11, r14"
        ORRS    pc, r14, #V_bit
        MEND

        MACRO
$label  VCLEAR $cond
$label  CMP$cond R0, #0
        MEND

        MACRO
$label  VSET $cond
$label [ "$cond"<>"AL" :LAND: "$cond"<>""
        DCI     &1A000001 :EOR: Cond_$cond ; branch over on opposite condition
      ]
        CMP     R0, #&80000000
        CMNVC   R0, #&80000000
        MEND

        END
