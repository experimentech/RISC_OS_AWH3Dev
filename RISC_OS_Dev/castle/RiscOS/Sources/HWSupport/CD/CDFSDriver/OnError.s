; This source code in this file is licensed to You by Castle Technology
; Limited ("Castle") and its licensors on contractual terms and conditions
; ("Licence") which entitle you freely to modify and/or to distribute this
; source code subject to Your compliance with the terms of the Licence.
; 
; This source code has been made available to You without any warranties
; whatsoever. Consequently, Your use, modification and distribution of this
; source code is entirely at Your own risk and neither Castle, its licensors
; nor any other person who has contributed to this source code shall be
; liable to You for any loss or damage which You may suffer as a result of
; Your use, modification or distribution of this source code.
; 
; Full details of Your rights and obligations are set out in the Licence.
; You should have received a copy of the Licence with this source code file.
; If You have not received a copy, the text of the Licence is available
; online at www.castle-technology.co.uk/riscosbaselicence.htm
; 
; -> OnError















; This deals with certain types of errors, doing retries if necessary
















; By MEW of Eesox.  8th May 1993


message_file_name
        DCB     "Resources:$.Resources.CDFSDriver.CDFSDriver.Messages",0
        ALIGN

;-----------------------------------------------------------------------------------------------
error_handler_manyregs ROUT
;
; on entry:
;          r0  -> error block
;          r1, r2 may contain additional error information
;          r3, r4 must be passed back (unless retrying)
;          r12 -> workspace
;          r13 -> full descending stack with r0-r11 and r14 stacked
; on exit:
;          this routine will retry or exit back to the User
;-----------------------------------------------------------------------------------------------

        MOV     r11, #2                 ; Signal that r1-r4 have important values.
        B       error_common

;-----------------------------------------------------------------------------------------------
error_handler_lookup ROUT
;
; on entry:
;          r0  -> error block to be looked up
;          r12 -> workspace
;          r13 -> full descending stack with r0 and r14 stacked
; on exit:
;          this routine will retry or exit back to the User
;
; The message file is only used for errors so we can just open it and then close it again when
; we need to look up an error (ie. performance is not an issue).
;-----------------------------------------------------------------------------------------------

        MOV     r11, #1                 ; Signal that error is to be looked up.
        B       error_common

;-----------------------------------------------------------------------------------------------
error_handler ROUT
;
; on entry:
;          r0  -> error block
;          r12 -> workspace
;          r13 -> full descending stack with r0-r11 and r14 stacked
; on exit:
;          this routine will retry or exit back to the User
;-----------------------------------------------------------------------------------------------

        MOV     r11, #0                 ; Signal that error is not to be looked up.
error_common
        LDR     r5, [ r0 ]

;--------------------------------------
; Does the error signal a disc change ?
;--------------------------------------
        LDR     r6, =UnitAttention
        TEQ     r5, r6
        LDRNE   r6, =CheckCondition
        TEQNE   r5, r6
        BEQ     change_of_disc

;------------------------------------------
; Convert the error to a CDFSDriver error ?
;------------------------------------------
        ADR     r6, error_conversion_start
        MOV     r9, #(error_conversion_end - error_conversion_start) / 8
01
        LDMIA   r6!, { r7, r8 }
        TEQ     r7, r5
        SUBNES  r9, r9, #1
        BNE     %BT01

        TEQ     r7, r5                  ; If converting this error then point r0 and drop through to lookup.
        ADREQ   r0, error_conversion_start
        ADDEQ   r0, r0, r8

        TEQNE   r11, #1                 ; Not converting so check whether the error needs to be looked up.
        BNE     return_error

        Push    r0                      ; Save error we need to look up.
        ADR     r0, buffer              ; Use temp for MessageTrans file descriptor.
        ADR     r1, message_file_name
        MOV     r2, #0
        SWI     XMessageTrans_OpenFile
        Pull    r1, VS                  ; If SWI returns error then flatten stack and report it.
        BVS     error_handler

        MOV     r1, r0                  ; r1->file desc, r2=0 from above
        Pull    r0                      ; Get back error block we need to look up.
        SWI     XMessageTrans_ErrorLookup

        MOV     r2, r0                  ; Save error just looked up (or generated by SWI).
        MOV     r0, r1                  ; r0->file desc.
        SWI     XMessageTrans_CloseFile
        MOV     r0, r2
        ; Drop into...

;-----------------------------
; Return the error to the user
;-----------------------------
return_error
 LDR      r5, [ r0 ]
 STR      r5, LastErrorNumber
 STR      r0, [ r13 ]
 TEQ      r11, #2          ; many-result-reg exit?
 SWIExitVS NE

 VSET
 ADD      r13, r13, #5 * 4 ; leave r0-r4 as they are
 Pull     "r5-r11, pc"


;-----------------------------
change_of_disc
;-----------------------------

 LDR      r10, [ r13, # 11 * 4 ]

; Check the number of retries currently performed
 MOV      r10, r10, LSR #30
 ADD      r10, r10, #1
 CMP      r10, #3
 BGE      return_error

 Pull     "r0-r11, r14"
 ADD      r11, r11, #1:SHL:30
 Push     "r0-r11, r14"

; set the disc changed flag
; MUST USE THE CALLERS R7 !!
; ADR      r7, control_block
 SWI      XCD_DiscHasChanged

; retry the previous SWI CD_
 Pull     "r0-r11, r14"
 VCLEAR   ; must ensure CPSR V is clear for compatibility with kernel
 B        SWIentry_after_wp


;-----------------------------
error_conversion_start

 DCD ErrorNumber_SCSI_Timeout
 DCD NoDrive    - error_conversion_start

 DCD CheckCondition      ; &20180
 DCD NoCaddy    - error_conversion_start

 DCD &201d0              ; &201d0
 DCD NoCaddy    - error_conversion_start

 DCD Busy                ; &20181
 DCD NoCaddy    - error_conversion_start

 DCD NotReady            ; &201C2
 DCD NoCaddy    - error_conversion_start

 DCD MediumError
 DCD FaultyDisc - error_conversion_start

error_conversion_end




;-----------------------------------------------------------------------------------------------
;-----------------------------------------------------------------------------------------------
;-----------------------------------------------------------------------------------------------
;-----------------------------------------------------------------------------------------------

 END
