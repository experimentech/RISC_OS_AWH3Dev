; This source code in this file is licensed to You by Castle Technology
; Limited ("Castle") and its licensors on contractual terms and conditions
; ("Licence") which entitle you freely to modify and/or to distribute this
; source code subject to Your compliance with the terms of the Licence.
; 
; This source code has been made available to You without any warranties
; whatsoever. Consequently, Your use, modification and distribution of this
; source code is entirely at Your own risk and neither Castle, its licensors
; nor any other person who has contributed to this source code shall be
; liable to You for any loss or damage which You may suffer as a result of
; Your use, modification or distribution of this source code.
; 
; Full details of Your rights and obligations are set out in the Licence.
; You should have received a copy of the Licence with this source code file.
; If You have not received a copy, the text of the Licence is available
; online at www.castle-technology.co.uk/riscosbaselicence.htm
; 
        SUBT    Exported Portable constants

OldOpt  SETA    {OPT}
        OPT     OptNoList+OptNoP1List

; ***********************************
; ***    C h a n g e   L i s t    ***
; ***********************************

; Date       Name  Description
; ----       ----  -----------
; 25-Apr-91  TMD   File created
; 18-Nov-91  TMD   Added Portable_Control and associated bits
; 06-Dec-91  CDP   Added SWIs ReadBMUVariable, WriteBMUVariable, CommandBMU
;                  and definitions of BMU flags, variables and commands
; 11-Dec-91  TMD   Merged SerialEnable and SerialBufferEnable into one bit (bit 3)
;                  Removed parallel bit
; 29-Jan-92  CDP   Added PortableBMUC_SetAutostart.
; 02-Apr-92  CDP   Added PortableBMUV_ChargeRate.
;                  Renamed PortableBMUV_NominalLife, _MeasuredLife, _UsedLife
;                  to _UsableCapacity, _Reserved, _ChargeEstimate.
; 15-Feb-94  RCM   Added SWIs ReadFeatures, Idle and Stop for MORRIS based machines.
; 17-May-94  AMcC  Changed to using the preferred SWI base and name symbols
; 19-May-94  AMcC  Save & Restore listing options (OldOpt, OPT)
; 21-Jul-94  RCM   Added PortableControl_ParallelEnable
; 04-Aug-94  RCM   Added PortableControl_PCMCIAEnable
;                  Added PortableControl_IDEEnable
; 12-Aug-94  RCM   Added PortableBMUF_Threshold_3
; 28-Apr-98  amg   Added SWI SMBusOp and PortableFeature_SMBusOp for IMS


SWIClass        SETS    PortableSWI_Name

        ^       PortableSWI_Base

        AddSWI  Speed                   ; &42FC0
        AddSWI  Control                 ; &42FC1
        AddSWI  ReadBMUVariable         ; &42FC2
        AddSWI  WriteBMUVariable        ; &42FC3
        AddSWI  CommandBMU              ; &42FC4
        AddSWI  ReadFeatures            ; &42FC5
        AddSWI  Idle                    ; &42FC6
        AddSWI  Stop                    ; &42FC7
        AddSWI  Status                  ; &42FC8
        AddSWI  Contrast                ; &42FC9
        AddSWI  Refresh                 ; &42FCA
        AddSWI  Halt                    ; &42FCB
        AddSWI  SleepTime               ; &42FCC
        AddSWI  SMBusOp                 ; &42FCD
        AddSWI  Speed2                  ; &42FCE
        AddSWI  WakeTime                ; &42FCF
        AddSWI  EnumerateBMU            ; &42FD0
        AddSWI  ReadBMUVariables        ; &42FD1
        AddSWI  ReadSensor              ; &42FD2


; Sub-reason codes (in r2) for Service_Portable

ServicePortable_PowerDown       *       0       ; Power about to be removed from some ports
ServicePortable_PowerUp         *       1       ; Power has been reapplied to some ports
ServicePortable_TidyUp          *       2       ; Issued by Econet if it can't powerdown due to outstanding RxCBs
ServicePortable_Freeze          *       3       ; Issued on entry to SWI Portable_Stop
ServicePortable_Unfreeze        *       4       ; Issued on exit from SWI Portable_Stop
ServicePortable_FreezeRequest   *       5       ; Preceedes ServicePortable_Freeze


PortableControl_EconetEnable    *       1 :SHL: 0
PortableControl_LCDEnable       *       1 :SHL: 1
PortableControl_VideoEnable     *       1 :SHL: 2
PortableControl_SerialEnable    *       1 :SHL: 3       ; enable serial buffers and oscillator

PortableControl_DualEnable      *       1 :SHL: 4
PortableControl_ClockBits       *       3 :SHL: 5       ; control which clock is fed to VIDC
PortableControl_ExtClock        *       0 :SHL: 5       ; use external clock (from IOEB)
PortableControl_Crys2Clock      *       1 :SHL: 5       ; use crystal clock divided by 2
PortableControl_CrysClock       *       2 :SHL: 5       ; use crystal clock
PortableControl_InvertClock     *       1 :SHL: 7

PortableControl_BacklightEnable *       1 :SHL: 8

PortableControl_ExtraLines      *       1 :SHL: 9
PortableControl_ExtraLines1     *       0 :SHL: 9
PortableControl_ExtraLines2     *       1 :SHL: 9

PortableControl_DRAMs           *       1 :SHL: 10
PortableControl_DRAMs1          *       0 :SHL: 10
PortableControl_DRAMs2          *       1 :SHL: 10

PortableControl_SoundEnable     *       1 :SHL: 11      ; enable filters and amplifiers (new for Stork)
PortableControl_PCMCIAEnable    *       1 :SHL: 12      ; enable PCMCIA hardware (new for Stork)
PortableControl_ParallelEnable  *       1 :SHL: 13      ; enable parallel port (new for Stork)
PortableControl_FDCEnable       *       1 :SHL: 14      ; enable FDC oscillator
PortableControl_IDEEnable       *       1 :SHL: 15      ; enable IDE hard disc (new for Stork)

PortableControl_LCDInvert       *       1 :SHL: 16
PortableControl_IntTBallEnable  *       1 :SHL: 17      ;internal trackerball enabled } mutually
PortableControl_ExtMouseEnable  *       1 :SHL: 18      ;external mouse port enabled  } exclusive
PortableControl_ExtPowerEnable  *       1 :SHL: 19      ;power to external keyboard and mouse

; BMU device flags (EnumerateBMU)

PortableBMUDF_System               * 1 << 0 ; Battery powers the main system
PortableBMUDF_RTC                  * 1 << 1 ; Battery powers the RTC
PortableBMUDF_NVRAM                * 1 << 2 ; Battery powers the NVRAM
PortableBMUDF_Removable            * 1 << 3 ; Removable/optional battery

; BMU status flags (ReadBMUVariable, ReadBMUVariables)

PortableBMUF_Charging           *       1 << 8 ;New for PortableHAL
PortableBMUF_ChargerPresent     *       1 << 7
PortableBMUF_BatteryPresent     *       1 << 6
PortableBMUF_ChargeKnown        *       1 << 5
PortableBMUF_ChargeFault        *       1 << 4
PortableBMUF_Threshold_1        *       1 << 3                  ;Battery low  - warn user
PortableBMUF_Threshold_2        *       1 << 2                  ;Battery flat - shutdown now
PortableBMUF_LidOpen            *       1 << 1
PortableBMUF_Threshold_3        *       1 << 0  ;New for Stork  ;Battery charged

; More sensible names for thresholds
PortableBMUF_BatteryFlat * PortableBMUF_Threshold_2
PortableBMUF_BatteryLow  * PortableBMUF_Threshold_1
PortableBMUF_BatteryFull * PortableBMUF_Threshold_3

; BMU commands
                                ^       1
PortableBMU_Min_Command         #       0
PortableBMUC_RemovePower        #       1
PortableBMUC_SetPartCharge      #       1
PortableBMUC_SetFullCharge      #       1
PortableBMUC_SetAutostart       #       1
PortableBMUC_DisconnectCharger  #       1       ;New for Stork
PortableBMUC_ConnectCharger     #       1       ;New for Stork
PortableBMUC_DisablePMInts      #       1       ;New for Stork  ; Disable } reporting of battery
PortableBMUC_EnablePMInts       #       1       ;New for Stork  ; Enable  } state by interrupt

PortableBMU_Num_Commands        #       0


; BMU variables
; Note comments pertain to PortableHAL usage, other portables have different usages and/or units
                                ^       0
PortableBMU_Min_Variable        #       0
PortableBMUV_VersionNumber      #       1 ; 0
PortableBMUV_NominalCapacity    #       1 ; 1 - Design capacity of a new battery pack, mAh
PortableBMUV_MeasuredCapacity   #       1 ; 2
PortableBMUV_UsedCapacity       #       1 ; 3
PortableBMUV_UsableCapacity     #       1 ; 4 - Actual/estimated capacity when full (takes into account wear & tear), mAh
PortableBMUV_Reserved           #       1 ; 5
PortableBMUV_ChargeEstimate     #       1 ; 6
PortableBMUV_Voltage            #       1 ; 7 - Instantaneous voltage, mV
PortableBMUV_Current            #       1 ; 8 - Instantaneous current, mA
PortableBMUV_Temperature        #       1 ; 9 - 0.1K
PortableBMUV_Flags              #       1 ;10
PortableBMUV_ChargeRate         #       1 ;11
;
; Stork variables
;
PortableBMUVar_ChargeCurrent    #       1 ;12
PortableBMUVar_DischargeCurrent #       1 ;13
PortableBMUVar_Voltage          #       1 ;14
PortableBMUVar_Temperature1     #       1 ;15
PortableBMUVar_Temperature2     #       1 ;16
PortableBMUVar_ChargeLevel      #       1 ;17
PortableBMUVar_StatusFlags      #       1 ;18
PortableBMUVar_InputSignals     #       1 ;19
PortableBMUVar_BatteryCapacity  #       1 ;20
;
; VirtualRPC variables
;
PortableBMUV_BatteryTimeRemaining #     1 ;21 - Time until power loss, seconds
PortableBMUV_MaxBatteryTime       #     1 ;22
;
; PortableHAL variables
;
PortableBMUV_BatteryPercentRemaining      # 1 ;23 - 0-100
PortableBMUV_ChargeTimeRemaining          # 1 ;24 - Time until charge completion, seconds
PortableBMUV_ChargeCycles                 # 1 ;25 - Charge/discharge cycle count
PortableBMUV_SmoothedVoltage              # 1 ;26 - mV
PortableBMUV_SmoothedCurrent              # 1 ;27 - mA
PortableBMUV_NominalAvailableCapacity     # 1 ;28 - Current charge, mAh
PortableBMUV_CompensatedAvailableCapacity # 1 ;29 - " " after compensating for temperature, voltage, etc. mAh
;
PortableBMU_Num_Variables       #       0

PortableFeature_Speed           *       1 :SHL: 0
PortableFeature_Idle            *       1 :SHL: 4
PortableFeature_Stop            *       1 :SHL: 5
PortableFeature_SMBusOp         *       1 :SHL: 6 ; used by IMS

PortableStatus_DocStationConnected *    1 :SHL: 0
PortableStatus_PrinterFloppy    *       1 :SHL: 1
PortableStatus_LCDOn            *       1 :SHL: 3

; ReadBMUVariables request/response struct

                                ^       0
PortableReadBMUVars_VarNo       #       4 ; In: Variable number (PortableBMUV_...)
PortableReadBMUVars_Result      #       4 ; Out: Result code (PortableBMUR_...)
PortableReadBMUVars_Value       #       4 ; Out: Variable value
PortableReadBMUVars_Size        #       0 ; Struct size

; BMU operation result codes

PortableBMUR_Success        *  0 ; Result of operation was OK
PortableBMUR_Error          *  1 ; Generic error
PortableBMUR_Busy           *  2 ; BMU busy, try again later
PortableBMUR_Unsupported    *  3 ; Operation unsupported
PortableBMUR_Unknown        *  4 ; Operation supported, but variable value unknown (e.g. battery not fitted)

; ReadSensor known sensors
                                ^ 0
PortableReadSensor_Temperature  # 1       ; 0.1K
                                ^ 0
PortableRS_Temperature_CPUDie   # 1
PortableRS_Temperature_BMU      # 1
PortableRS_Temperature_HardDisc # 1
PortableRS_Temperature_GPUDie   # 1
PortableRS_Temperature_DRAM     # 1
PortableRS_Temperature_Max      # 0

        OPT     OldOpt
        END
