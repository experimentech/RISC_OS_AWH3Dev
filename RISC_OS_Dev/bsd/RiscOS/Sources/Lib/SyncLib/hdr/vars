;
; Copyright (c) 2012, Ben Avison
; All rights reserved.
;
; Redistribution and use in source and binary forms, with or without
; modification, are permitted provided that the following conditions are met:
;     * Redistributions of source code must retain the above copyright
;       notice, this list of conditions and the following disclaimer.
;     * Redistributions in binary form must reproduce the above copyright
;       notice, this list of conditions and the following disclaimer in the
;       documentation and/or other materials provided with the distribution.
;     * Neither the name of the copyright holder nor the names of their
;       contributors may be used to endorse or promote products derived from
;       this software without specific prior written permission.
;
; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
; ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
; WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
; DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER BE LIABLE FOR ANY
; DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
; (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
; ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
; (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
; SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
;

; These are a bit like the long-established LDRVar and STRVar macros,
; but with the following differences:
; * uses literal pools rather than requiring you to explicitly declare
;   variables using LocalVar and related macros
; * only does relocation if zM is true (set by shared makefiles)
; * load macro supports loading the PC, although this does require that you
;   supply the otherwise optional w1 argument
; * the condition code is specified as a postfix to the macro (objasm 4 feature)
;
; Normally, in the non-zM case, the variable will be reachable in a single
; instruction, but this depends upon the variable being within 4K of the
; instruction. If this is not the case, you can set the "far" argument.


      [ :LNOT: :DEF: zM
        GBLL    zM
zM      SETL    {FALSE}
      ]


; Get the contents of a static variable.

        MACRO
$label  Load$cc $reg, $base, $var, $w1, $far
        LCLS    work
      [ "$w1" = ""
work    SETS    "$reg"
      |
work    SETS    "$w1"
      ]
        ASSERT  $work <> $base
        ASSERT  $work <> 15
      [ zM
$label  LDR$cc  $work, =$var
        LDR$cc  $reg, [$base, $work]
      |
       [ "$far" = "far"
$label  LDR$cc  $work, =$var
        LDR$cc  $reg, [$work]
       |
$label  LDR$cc  $reg, $var
       ]
      ]
        MEND


; Set the contents of a static variable.

        MACRO
$label  Store$cc $reg, $base, $var, $w1, $far
        ASSERT  $w1 <> $base
        ASSERT  $w1 <> $reg
        ASSERT  $w1 <> 15
      [ zM
$label  LDR$cc  $w1, =$var
        STR$cc  $reg, [$base, $w1]
      |
       [ "$far" = "far"
$label  LDR$cc  $w1, =$var
        STR$cc  $reg, [$w1]
       |
$label  STR$cc  $reg, $var
       ]
      ]
        MEND


        END
