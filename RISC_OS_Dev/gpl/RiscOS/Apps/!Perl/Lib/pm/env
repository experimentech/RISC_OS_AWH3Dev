# This source code in this file is licensed to You by Castle Technology
# Limited ("Castle") and its licensors on contractual terms and conditions
# ("Licence") which entitle you freely to modify and/or to distribute this
# source code subject to Your compliance with the terms of the Licence.
# 
# This source code has been made available to You without any warranties
# whatsoever. Consequently, Your use, modification and distribution of this
# source code is entirely at Your own risk and neither Castle, its licensors
# nor any other person who has contributed to this source code shall be
# liable to You for any loss or damage which You may suffer as a result of
# Your use, modification or distribution of this source code.
# 
# Full details of Your rights and obligations are set out in the Licence.
# You should have received a copy of the Licence with this source code file.
# If You have not received a copy, the text of the Licence is available
# online at www.castle-technology.co.uk/riscosbaselicence.htm
# 
package Env;

=head1 NAME

Env - Perl module that imports environment variables

=head1 DESCRIPTION

Perl maintains environment variables in a pseudo-associative-array
named %ENV.  For when this access method is inconvenient, the Perl
module C<Env> allows environment variables to be treated as simple
variables.

The Env::import() function ties environment variables with suitable
names to global Perl variables with the same names.  By default it
does so with all existing environment variables (C<keys %ENV>).  If
the import function receives arguments, it takes them to be a list of
environment variables to tie; it's okay if they don't yet exist.

After an environment variable is tied, merely use it like a normal variable.
You may access its value 

    @path = split(/:/, $PATH);

or modify it

    $PATH .= ":.";

however you'd like.
To remove a tied environment variable from
the environment, assign it the undefined value

    undef $PATH;

=head1 AUTHOR

Chip Salzenberg <chip@fin.uucp>

=cut

sub import {
    my ($callpack) = caller(0);
    my $pack = shift;
    my @vars = @_ ? @_ : keys(%ENV);

    foreach (@vars) {
	tie ${"${callpack}::$_"}, Env, $_ if /^[A-Za-z_]\w*$/;
    }
}

sub TIESCALAR {
    bless \($_[1]);
}

sub FETCH {
    my ($self) = @_;
    $ENV{$$self};
}

sub STORE {
    my ($self, $value) = @_;
    if (defined($value)) {
	$ENV{$$self} = $value;
    } else {
	delete $ENV{$$self};
    }
}

1;
