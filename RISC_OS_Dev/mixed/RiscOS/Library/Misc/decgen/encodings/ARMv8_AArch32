# From DDI 0487A.g section J5
# Can be overlaid directly on top of the ARMv7 encodings

# F6.1.54 Load-Aquire
(cond:4)00011(sz:2)1(Rn:4)(Rt:4)(11)001001(1111)	{ne(cond,15)} {ne(sz,1)}	LDA_A1

# F6.1.210 Store-Release
(cond:4)00011(sz:2)0(Rn:4)(1111)(11)001001(Rt:4)	{ne(cond,15)} {ne(sz,1)}	STL_A1

# F6.1.56 Load-Aquire Exclusive
(cond:4)00011001(Rn:4)(Rt:4)(11)101001(1111)	{ne(cond,15)}	LDAEX_A1
(cond:4)00011011(Rn:4)(Rt:4)(11)101001(1111)	{ne(cond,15)}	LDAEXD_A1
(cond:4)00011101(Rn:4)(Rt:4)(11)101001(1111)	{ne(cond,15)}	LDAEXB_A1
(cond:4)00011111(Rn:4)(Rt:4)(11)101001(1111)	{ne(cond,15)}	LDAEXH_A1

# F6.1.212 Store-Release Exclusive
(cond:4)00011000(Rn:4)(Rd:4)(11)101001(Rt:4)	{ne(cond,15)}	STLEX_A1
(cond:4)00011010(Rn:4)(Rd:4)(11)101001(Rt:4)	{ne(cond,15)}	STLEXD_A1
(cond:4)00011100(Rn:4)(Rd:4)(11)101001(Rt:4)	{ne(cond,15)}	STLEXB_A1
(cond:4)00011110(Rn:4)(Rd:4)(11)101001(Rt:4)	{ne(cond,15)}	STLEXH_A1

# Table J5.7.1 External Debug
# DCPS1/2/3 has no A32 encoding

# F6.1.50 Halting breakpoint
(cond:4)00010(op:2)0(imm12:12)0(op2:3)(imm4:4)	{ne(cond,15)} {eq(op2,7)} {lnot(op)}	HLT_A1

# Table J5.7.2 Barriers and hints
# DMB OSHLD/NSHLD/ISHLD/LD see F6.1.44, same encoding as ARMv7
# DSB OSHLD/NSHLD/ISHLD/LD see F6.1.45, same encoding as ARMv7

# F6.1.179 Send event local
(cond:4)001100100000(11110000)00000101	{ne(cond,15)}	SEVL_A1

# Table J5.7.3 TLB maintenance
# Accessed using MCR operations, so no new opcodes

# F6.1.40 CRC
(cond:4)00010(sz:2)0(Rn:4)(Rd:4)(0)(0)C(0)0(op2:3)(Rm:4)	{ne(cond,15)} {eq(op2,4)}	CRC_A1

# Note that [LDR|STR]EX[B|H|D] appear here because previously
# bits 8-11 SBO, but that recommendation has changed because
# ARMv8 has added [LDA|STL]EX[B|H|D] in the same instruction space.

# F4.2.10
(cond:4)0001(op:4)(:8)(11)(op1:2)1001(:4)	{ne(cond,15)} {lor(eq(op,8),eq(op,9))} {eq(op1,1)}	UNDEFINED
(cond:4)0001(op:4)(:8)(11)(op1:2)1001(:4)	{ne(cond,15)} {lor(eq(op,10),eq(op,11))} {lnot(band(op1,2))}	UNDEFINED
(cond:4)0001(op:4)(:8)(11)(op1:2)1001(:4)	{ne(cond,15)} {ge(op,12)} {eq(op1,1)}	UNDEFINED

# F6.1.229 STREX
# A1 ARMv6*, ARMv7
(cond:4)00011000(Rn:4)(Rd:4)(11)111001(Rt:4)	{ne(cond,15)}	STREX_A1

# F6.1.230 STREXB
# A1 ARMv6K, ARMv7
(cond:4)00011100(Rn:4)(Rd:4)(11)111001(Rt:4)	{ne(cond,15)}	STREXB_A1

# F6.1.231 STREXD
# A1 ARMv6K, ARMv7
(cond:4)00011010(Rn:4)(Rd:4)(11)111001(Rt:4)	{ne(cond,15)}	STREXD_A1

# F6.1.232 STREXH
# A1 ARMv6K, ARMv7
(cond:4)00011110(Rn:4)(Rd:4)(11)111001(Rt:4)	{ne(cond,15)}	STREXH_A1

# F6.1.79 LDREX
# A1 ARMv6*, ARMv7
(cond:4)00011001(Rn:4)(Rt:4)(11)111001(1111)	{ne(cond,15)}	LDREX_A1

# F6.1.80 LDREXB
# A1 ARMv6K, ARMv7
(cond:4)00011101(Rn:4)(Rt:4)(11)111001(1111)	{ne(cond,15)}	LDREXB_A1

# F6.1.81 LDREXD
# A1 ARMv6K, ARMv7
(cond:4)00011011(Rn:4)(Rt:4)(11)111001(1111)	{ne(cond,15)}	LDREXD_A1

# F6.1.82 LDREXH
# A1 ARMv6K, ARMv7
(cond:4)00011111(Rn:4)(Rt:4)(11)111001(1111)	{ne(cond,15)}	LDREXH_A1
