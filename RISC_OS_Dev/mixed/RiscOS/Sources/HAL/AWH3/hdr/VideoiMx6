; This source code in this file is licensed to You by Castle Technology
; Limited ("Castle") and its licensors on contractual terms and conditions
; ("Licence") which entitle you freely to modify and/or to distribute this
; source code subject to Your compliance with the terms of the Licence.
;
; This source code has been made available to You without any warranties
; whatsoever. Consequently, Your use, modification and distribution of this
; source code is entirely at Your own risk and neither Castle, its licensors
; nor any other person who has contributed to this source code shall be
; liable to You for any loss or damage which You may suffer as a result of
; Your use, modification or distribution of this source code.
;
; Full details of Your rights and obligations are set out in the Licence.
; You should have received a copy of the Licence with this source code file.
; If You have not received a copy, the text of the Licence is available
; online at www.castle-technology.co.uk/riscosbaselicence.htm
;

        [       :LNOT: :DEF: __HAL_VideoiMx6HDR__
        GBLL    __HAL_VideoiMx6HDR__

;        GET     hdr.iMx6qIRQs
        GET     hdr.AWH3IRQs  ;BOOM!
;        GET     hdr.AllWinnerH3
;        GET     hdr:VideoDevice

 [ VideoInHAL
; HDMI Transmitter encoder formats

; hdmi_datamap values
HDMI_RGB444_8B    * 0x01
HDMI_RGB444_10B   * 0x03
HDMI_RGB444_12B   * 0x05
HDMI_RGB444_16B   * 0x07
HDMI_YCbCr444_8B  * 0x09
HDMI_YCbCr444_10B * 0x0B
HDMI_YCbCr444_12B * 0x0D
HDMI_YCbCr444_16B * 0x0F
HDMI_YCbCr422_8B  * 0x16
HDMI_YCbCr422_10B * 0x14
HDMI_YCbCr422_12B * 0x12

; HDMI CSC encode format
; hdmi_csc_enc_format values
HDMI_eRGB      * 0x0
HDMI_eYCC444   * 0x1
HDMI_eYCC422   * 0x2
HDMI_eExtended * 0x3

; HDMI colorimetry defined by ITU
; hdmi_colorimetry values
HDMI_eITU601    * 0x0
HDMI_eITU709    * 0x1

; default IPU clock, derived from mmdc_ch0 clock
IPU_DEFAULT_WORK_CLOCK * 264000000

; DI counter allocation (they start from 0!)
InternalHSYNCCntr       *       1
OutputHSYNCCntr         *       2
OutputVSYNCCntr         *       3
ActiveLineCntr          *       4
ActivePixelCntr         *       5





; Hardware cursor size limits
HW_CURSOR_WIDTH         * 32
HW_CURSOR_HEIGHT        * 32
HW_CURSOR_WIDTH_POW2    * 5
 ]

VIDEO_IRQ               * INT_TS ;This may be worng.
;VIDEO_IRQ               * IMX_INT_IPU1_FUNC
;HDMI_IRQ                * IMX_INT_HDMI_TX
HDMI_IRQ                * INT_HDMI
; -----------------------------------------------------------------------------------

 [ VideoInHAL
; VIDCList3 is terminated by a -1 word
; so min length of a vidc3 list...
VIDCList3_Size                  *       4+VIDCList3_ControlList-VIDCList3_Type

MaxPermittedPixelKHz            *       270000  ; max permitted pixel rate
 ]

; Device-specific struct for the VDU device

                        ^ 0
VDUDevSpec_SizeField    # 4 ; Size field
VDUDevSpec_Flags        # 4 ; Misc flags
VDUDevSpec_HDMI_TX_INT  # 4 ; hdmi transmitter interrupt number
VDUDevSpec_CCM_Base     # 4 ; CCM base address
;VDUDevSpec_IOMUXC_Base  # 4 ; IOMUXC base address
VDUDevSpec_HDMI_Log     # 4 ; HDMI base address
;VDUDevSpec_SRC_Log      # 4 ; System Reset unit logical address
;VDUDevSpec_IPU1_Log     # 4 ;
;VDUDevSpec_IPU2_Log     # 4 ;
;VDUDevSpec_CCMAn_Log    # 4 ;
VDUDevSpec_Size         # 0 ; Size value to write to size field

                      ^    0, a1
; Public bits
VideoDeviceDevice     #    HALDevice_VDU_Size
; Private bits
VideoWorkspace        #    VDUDevSpec_Size
Video_DeviceSize      *    :INDEX: @

        ] ; __HAL_VideoiMx6HDR__

        END
