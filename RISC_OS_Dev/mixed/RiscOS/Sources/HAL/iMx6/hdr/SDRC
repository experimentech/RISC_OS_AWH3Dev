; This source code in this file is licensed to You by Castle Technology
; Limited ("Castle") and its licensors on contractual terms and conditions
; ("Licence") which entitle you freely to modify and/or to distribute this
; source code subject to Your compliance with the terms of the Licence.
; 
; This source code has been made available to You without any warranties
; whatsoever. Consequently, Your use, modification and distribution of this
; source code is entirely at Your own risk and neither Castle, its licensors
; nor any other person who has contributed to this source code shall be
; liable to You for any loss or damage which You may suffer as a result of
; Your use, modification or distribution of this source code.
; 
; Full details of Your rights and obligations are set out in the Licence.
; You should have received a copy of the Licence with this source code file.
; If You have not received a copy, the text of the Licence is available
; online at www.castle-technology.co.uk/riscosbaselicence.htm
; 

        [       :LNOT: :DEF: __HAL_SDRC_HDR__
        GBLL    __HAL_SDRC_HDR__

; EMIFn (External Memory Interface) register - relative to EMIFn_Base (n = 1,2)

EMIF_MOD_ID_REV                 *       &000
EMIF_STATUS                     *       &004
EMIF_SDRAM_CONFIG               *       &008
EMIF_SDRAM_CONFIG_2             *       &00C
EMIF_SDRAM_REF_CTRL             *       &010
EMIF_SDRAM_REF_CTRL_SHDW        *       &014
EMIF_SDRAM_TIM_1                *       &018
EMIF_SDRAM_TIM_1_SHDW           *       &01C
EMIF_SDRAM_TIM_2                *       &020
EMIF_SDRAM_TIM_2_SHDW           *       &024
EMIF_SDRAM_TIM_3                *       &028
EMIF_SDRAM_TIM_3_SHDW           *       &02C
EMIF_LPDDR2_NVM_TIM             *       &030
EMIF_LPDDR2_NVM_TIM_SHDW        *       &034
EMIF_PWR_MGMT_CTRL              *       &038
EMIF_PWR_MGMT_CTRL_SHDW         *       &03C
EMIF_LPDDR2_MODE_REG_DATA       *       &040
EMIF_LPDDR2_MODE_REG_CFG        *       &050
EMIF_L3_CONFIG                  *       &054
EMIF_L3_CFG_VAL_1               *       &058
EMIF_L3_CFG_VAL_2               *       &05C
EMIF_PERF_CNT_1                 *       &080
EMIF_PERF_CNT_2                 *       &084
EMIF_PERF_CNT_CFG               *       &088
EMIF_PERF_CNT_SEL               *       &08C
EMIF_PERF_CNT_TIM               *       &090
EMIF_READ_IDLE_CTRL             *       &098
EMIF_READ_IDLE_CTRL_SHDW        *       &09C
EMIF_IRQSTATUS_RAW_SYS          *       &0A4
EMIF_IRQSTATUS_RAW_LL           *       &0A8
EMIF_IRQSTATUS_SYS              *       &0AC
EMIF_IRQSTATUS_LL               *       &0B0
EMIF_IRQENABLE_SET_SYS          *       &0B4
EMIF_IRQENABLE_SET_LL           *       &0B8
EMIF_IRQENABLE_CLR_SYS          *       &0BC
EMIF_IRQENABLE_CLR_LL           *       &0C0
EMIF_ZQ_CONFIG                  *       &0C8
EMIF_TEMP_ALERT_CONFIG          *       &0CC
EMIF_L3_ERR_LOG                 *       &0D0
EMIF_DDR_PHY_CTRL_1             *       &0E4
EMIF_DDR_PHY_CTRL_1_SHDW        *       &0E8
EMIF_DDR_PHY_CTRL_2             *       &0EC


; DMM (Dynamic Memory Manager) register - relative to DMM_Base

DMM_REVISON             *       &000
DMM_HWINFO              *       &004
DMM_LISA_HWINFO         *       &008
DMM_SYSCONFIG           *       &010
DMM_LISA_LOCK           *       &01C

DMM_LISA_MAP_0          *       &040
DMM_LISA_MAP_1          *       &044
DMM_LISA_MAP_2          *       &048
DMM_LISA_MAP_3          *       &04C

DMM_TILER_HWINFO        *       &208
DMM_TILER_OR0           *       &220
DMM_TILER_OR1           *       &224

DMM_PAT_HWINFO          *       &408
DMM_PAT_GEOMETRY        *       &40C
DMM_PAT_CONFIG          *       &410
DMM_PAT_VIEW0           *       &420
DMM_PAT_VIEW1           *       &424
DMM_PAT_VIEW_MAP_0      *       &440
DMM_PAT_VIEW_MAP_1      *       &444
DMM_PAT_VIEW_MAP_2      *       &448
DMM_PAT_VIEW_MAP_3      *       &44C

DMM_PAT_VIEW_MAP_BASE   *       &460
DMM_PAT_IRQSTATUS_RAW   *       &480
DMM_PAT_IRQSTATUS       *       &490
DMM_PAT_IRQENABLE_SET   *       &4A0
DMM_PAT_IRQENABLE_CLR   *       &4B0

DMM_PAT_STATUS_0        *       &4C0
DMM_PAT_STATUS_1        *       &4C4
DMM_PAT_STATUS_2        *       &4C8
DMM_PAT_STATUS_3        *       &4CC

DMM_PAT_DESCR_0         *       &500
DMM_PAT_AREA_0          *       &504
DMM_PAT_CTRL_0          *       &508
DMM_PAT_DATA_0          *       &50C
DMM_PAT_DESCR_1         *       &510
DMM_PAT_AREA_1          *       &514
DMM_PAT_CTRL_1          *       &518
DMM_PAT_DATA_1          *       &51C
DMM_PAT_DESCR_2         *       &520
DMM_PAT_AREA_2          *       &524
DMM_PAT_CTRL_2          *       &528
DMM_PAT_DATA_2          *       &52C
DMM_PAT_DESCR_3         *       &530
DMM_PAT_AREA_3          *       &534
DMM_PAT_CTRL_3          *       &538
DMM_PAT_DATA_3          *       &53C

DMM_PEG_HWINFO          *       &608
DMM_PEG_PRIO_0          *       &620
DMM_PEG_PRIO_1          *       &624
DMM_PEG_PRIO_2          *       &628
DMM_PEG_PRIO_3          *       &62C
DMM_PEG_PRIO_4          *       &630
DMM_PEG_PRIO_5          *       &634
DMM_PEG_PRIO_6          *       &638
DMM_PEG_PRIO_7          *       &63C
DMM_PEG_PRIO_PAT        *       &640

; bits in DMM_LISA_MAP_i
DMM_LISA_MAP_i_SDRC_ADDR        *       (&FF <<  0) ; SDRAM controller address MSB
DMM_LISA_MAP_i_SDRC_ADDR_SHIFT  *       0
DMM_LISA_MAP_i_SDRC_MAP         *       (  3 <<  8) ; SDRAM controller mapping
DMM_LISA_MAP_i_SDRC_MAP_SHIFT   *       8
DMM_LISA_MAP_i_SDRC_MAP_UNMAP   *       (  0 <<  8) ; un-mapped
DMM_LISA_MAP_i_SDRC_MAP_SDRC0   *       (  1 <<  8) ; mapped on SDRC 0 only
DMM_LISA_MAP_i_SDRC_MAP_SDRC1   *       (  2 <<  8) ; mapped on SDRC 1 only
DMM_LISA_MAP_i_SDRC_MAP_SDRC01  *       (  3 <<  8) ; mapped on SDRC 0 + 1 (interleaved)
DMM_LISA_MAP_i_SDRC_ADDRSPC     *       (  3 << 16) ; SDRAM controller address space
DMM_LISA_MAP_i_SDRC_ADDRSPC_SHIFT *     16
DMM_LISA_MAP_i_SDRC_INTL        *       (  3 << 18) ; SDRAM controller interleaving mode
DMM_LISA_MAP_i_SDRC_INTL_SHIFT  *       18
DMM_LISA_MAP_i_SYS_SIZE         *       (  7 << 20) ; DMM system section size
DMM_LISA_MAP_i_SYS_SIZE_SHIFT   *       20
DMM_LISA_MAP_i_SYS_SIZE_16MB    *       (  0 << 20)
DMM_LISA_MAP_i_SYS_SIZE_32MB    *       (  1 << 20)
DMM_LISA_MAP_i_SYS_SIZE_64MB    *       (  2 << 20)
DMM_LISA_MAP_i_SYS_SIZE_128MB   *       (  3 << 20)
DMM_LISA_MAP_i_SYS_SIZE_256MB   *       (  4 << 20)
DMM_LISA_MAP_i_SYS_SIZE_512MB   *       (  5 << 20)
DMM_LISA_MAP_i_SYS_SIZE_1GB     *       (  6 << 20)
DMM_LISA_MAP_i_SYS_SIZE_2GB     *       (  7 << 20)
DMM_LISA_MAP_i_SYS_ADDR         *       (&FF << 24) ; DMM system section address MSB
DMM_LISA_MAP_i_SYS_ADDR_SHIFT   *       24


        ] ; __HAL_SDRC_HDR__

        END
