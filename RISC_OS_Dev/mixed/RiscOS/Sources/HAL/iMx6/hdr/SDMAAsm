; This source code in this file is licensed to You by Castle Technology
; Limited ("Castle") and its licensors on contractual terms and conditions
; ("Licence") which entitle you freely to modify and/or to distribute this
; source code subject to Your compliance with the terms of the Licence.
;
; This source code has been made available to You without any warranties
; whatsoever. Consequently, Your use, modification and distribution of this
; source code is entirely at Your own risk and neither Castle, its licensors
; nor any other person who has contributed to this source code shall be
; liable to You for any loss or damage which You may suffer as a result of
; Your use, modification or distribution of this source code.
;
; Full details of Your rights and obligations are set out in the Licence.
; You should have received a copy of the Licence with this source code file.
; If You have not received a copy, the text of the Licence is available
; online at www.castle-technology.co.uk/riscosbaselicence.htm
;
;
; Copyright (c) 2014, RISC OS Open Ltd
; All rights reserved.
;
; Redistribution and use in source and binary forms, with or without
; modification, are permitted provided that the following conditions are met:
;     * Redistributions of source code must retain the above copyright
;       notice, this list of conditions and the following disclaimer.
;     * Redistributions in binary form must reproduce the above copyright
;       notice, this list of conditions and the following disclaimer in the
;       documentation and/or other materials provided with the distribution.
;     * Neither the name of RISC OS Open Ltd nor the names of its contributors
;       may be used to endorse or promote products derived from this software
;       without specific prior written permission.
;
; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
; IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
; ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
; LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
; CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
; SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
; INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
; CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
; POSSIBILITY OF SUCH DAMAGE.
;

; Macros which allow us to assemble the SDMA instruction set using objasm

; CPU flags for clrf, loop
SF      * 1
DF      * 2

; FU bus addresses for ldf, stf
ldf_MSA                           * 2_00000000
ldf_MDA                           * 2_00000100
ldf_MD_SZ8                        * 2_00001001
ldf_MD_SZ8_PF                     * 2_00101001
ldf_MD_SZ16                       * 2_00001010
ldf_MD_SZ16_PF                    * 2_00101010
ldf_MD_SZ32                       * 2_00001011
ldf_MD_SZ32_PF                    * 2_00101011
ldf_MS                            * 2_00001100

ldf_PSA                           * 2_11000000
ldf_PDA                           * 2_11010000
ldf_PD                            * 2_11001000
ldf_PD_PF                         * 2_11101000
ldf_PD_COPY                       * 2_11011000
ldf_PS                            * 2_11111111

ldf_DSA                           * 2_01000000

stf_MSA                           * 2_00000000
stf_MSA_FR                        * 2_00010000
stf_MSA_PF                        * 2_00100000
stf_MSA_PF_FR                     * 2_00110000
stf_MDA                           * 2_00000100
stf_MDA_FR                        * 2_00010100
stf_MD_SZ0_FL                     * 2_00101000
stf_MD_SZ8                        * 2_00001001
stf_MD_SZ8_FL                     * 2_00101001
stf_MD_SZ16                       * 2_00001010
stf_MD_SZ16_FL                    * 2_00101010
stf_MD_SZ32                       * 2_00001011
stf_MD_SZ32_FL                    * 2_00101011
stf_MD_CPY                        * 2_00011000
stf_MS                            * 2_00001111
stf_clrefMS                       * 2_00001100

stf_PSA_SZ8_F                     * 2_11000001
stf_PSA_SZ16_F                    * 2_11000010
stf_PSA_SZ32_F                    * 2_11000011
stf_PSA_SZ8_F_PF                  * 2_11100001
stf_PSA_SZ16_F_PF                 * 2_11100010
stf_PSA_SZ32_F_PF                 * 2_11100011
stf_PSA_SZ8_I                     * 2_11000101
stf_PSA_SZ16_I                    * 2_11000110
stf_PSA_SZ32_I                    * 2_11000111
stf_PSA_SZ8_I_PF                  * 2_11100101
stf_PSA_SZ16_I_PF                 * 2_11100110
stf_PSA_SZ32_I_PF                 * 2_11100111
stf_PSA_SZ8_D                     * 2_11001001
stf_PSA_SZ16_D                    * 2_11001010
stf_PSA_SZ32_D                    * 2_11001011
stf_PSA_SZ8_D_PF                  * 2_11101001
stf_PSA_SZ16_D_PF                 * 2_11101010
stf_PSA_SZ32_D_PF                 * 2_11101011
stf_PSA_SZ8_U                     * 2_11001101
stf_PSA_SZ16_U                    * 2_11001110
stf_PSA_SZ32_U                    * 2_11001111
stf_PSA_SZ8_PF_U                  * 2_11101101
stf_PSA_SZ16_PF_U                 * 2_11101110
stf_PSA_SZ32_PF_U                 * 2_11101111
stf_PDA_SZ8_F                     * 2_11010001
stf_PDA_SZ16_F                    * 2_11010010
stf_PDA_SZ32_F                    * 2_11010011
stf_PDA_SZ8_I                     * 2_11011001
stf_PDA_SZ16_I                    * 2_11011010
stf_PDA_SZ32_I                    * 2_11011011
stf_PDA_SZ8_D                     * 2_11011001
stf_PDA_SZ16_D                    * 2_11011010
stf_PDA_SZ32_D                    * 2_11011011
stf_PDA_SZ8_U                     * 2_11011101
stf_PDA_SZ16_U                    * 2_11011110
stf_PDA_SZ32_U                    * 2_11011111
stf_PD                            * 2_11001000
stf_PS                            * 2_11111111
stf_clrefPS                       * 2_11001100


; s_baseaddr must be set to the base of the image
 ;       GBLA    s_baseaddr


        MACRO
        s_add   $r, $s
        ; GReg[r] += GReg[s]
        ; T = (GReg[r] == 0)
        DCW     &0098 + $s + ($r<<8)
        MEND

        MACRO
        s_addi  $r, $i
        ; GReg[r] += #i
        ; T = (GReg[r] == 0)
        ASSERT  ($i >= 0) :LAND: ($i < 256)
        DCW     &1800 + $i + ($r<<8)
        MEND

        MACRO
        s_and   $r, $s
        ; GReg[r] &= GReg[s]
        DCW     &00B8 + $s + ($r<<8)
        MEND

        MACRO
        s_andi  $r, $i
        ; GReg[r] &= #i
        ASSERT  ($i >= 0) :LAND: ($i < 256)
        DCW     &3800 + $i + ($r<<8)
        MEND

        MACRO
        s_andn  $r, $s
        ; GReg[r] &= ~GReg[s]
        DCW     &00B0 + $s + ($r<<8)
        MEND

        MACRO
        s_andni $r, $i
        ; GReg[i] &= ~#i
        ASSERT  ($i >= 0) :LAND: ($i < 256)
        DCW     &3000 + $i + ($r<<8)
        MEND

        MACRO
        s_asr1  $r
        ; GReg[r] = ((signed) GReg[r]) >> 1
        DCW     &0016 + ($r<<8)
        MEND

        MACRO
        s_bclri $r, $i
        ; GReg[r] &= ~(1<<#i)
        ASSERT  ($i >= 0) :LAND: ($i < 32)
        DCW     &0020 + $i + ($r<<8)
        MEND

        MACRO
        s_bdf   $label
        ; if (DF) PC = label
        LCLA    ofs
      [ :DEF: $label
ofs     SETA    $label - . - 2 + 256
        ASSERT  (ofs >= 0) :LAND: (ofs < 512) :LAND: ((ofs :AND: 1) == 0)
        DCW     &7F00 + (((&$ofs-256) :SHR: 1) :AND: 255)
      |
        s_illegal
      ]
        MEND

        MACRO
        s_bf   $label
        ; if (!T) PC = label
        LCLA    ofs
      [ :DEF: $label
ofs     SETA    $label - . - 2 + 256
        ASSERT  (ofs >= 0) :LAND: (ofs < 512) :LAND: ((ofs :AND: 1) == 0)
        DCW     &7C00 + (((&$ofs-256) :SHR: 1) :AND: 255)
      |
        s_illegal
      ]
        MEND

        MACRO
        s_bseti $r, $i
        ; GReg[r] |= 1<<#i
        ASSERT  ($i >= 0) :LAND: ($i < 32)
        DCW     &0040 + $i + ($r<<8)
        MEND

        MACRO
        s_bsf   $label
        ; if (SF) PC = label
        LCLA    ofs
      [ :DEF: $label
ofs     SETA    $label - . - 2 + 256
        ASSERT  (ofs >= 0) :LAND: (ofs < 512) :LAND: ((ofs :AND: 1) == 0)
        DCW     &7E00 + ((($ofs-256) :SHR: 1) :AND: 255)
      |
        s_illegal
      ]
        MEND

        MACRO
        s_bt   $label
        ; if (T) PC = label
        LCLA    ofs
      [ :DEF: $label
ofs     SETA    $label - . - 2 + 256
        ASSERT  (ofs >= 0) :LAND: (ofs < 512) :LAND: ((ofs :AND: 1) == 0)
        DCW     &7D00 + ((($ofs-256) :SHR: 1) :AND: 255)
      |
        s_illegal
      ]
        MEND

        MACRO
        s_btsti $r, $i
        ; T = GReg[r] & (1<<#i)
        ASSERT  ($i >= 0) :LAND: ($i < 32)
        DCW     &0060 + $i + ($r<<8)
        MEND

        MACRO
        s_clrf  $ff
        ; Clear SF and/or DF
        ASSERT  ($ff >= 0) :LAND: ($ff <= 3)
        DCW     &0307 :EOR: ($ff<<8)
        MEND

        MACRO
        s_cmpeq $r, $s
        ; T = (GReg[r] == GReg[s])
        DCW     &00c8 + $s + ($r<<8)
        MEND

        MACRO
        s_cmpeqi $r, $i
        ; T = (GReg[r] == #i)
        ASSERT  ($i >= 0) :LAND: ($i < 256)
        DCW     &4800 + $i + ($r<<8)
        MEND

        MACRO
        s_cmphs $r, $s
        ; T = ((unsigned)GReg[r] >= (unsigned) GReg[s])
        DCW     &00D8 + $s + ($r<<8)
        MEND

        MACRO
        s_cmplt $r, $s
        ; T = ((signed)GReg[r] < (signed) GReg[s])
        DCW     &00D0 + $s + ($r<<8)
        MEND

        MACRO
        s_done  $jjj
        ; if(jjj&6 == 2) HE[CCR] = 0
        ; if(jjj == 3) HI[CCR] = 1
        ; if(jjj == 4) EP[CCR] = 0
        ; if((jjj == 0) && (NCP > CCP)) CCR = NCR
        ; else if((jjj == 1) && (NCP >= CCP)) CCR = NCR
        ; else CCR = NCR
        ASSERT  ($jjj >= 0) :LAND: ($jjj < 8)
        DCW     &0000 + ($jjj << 8)
        MEND

        MACRO
        s_yield
        ; "s_done 0" alias
        DCW     &0000
        MEND

        MACRO
        s_yieldge
        ; "s_done 1" alias
        DCW     &0100
        MEND

        MACRO
        s_illegal
        ; Trigger illegal instruction routine
        DCW     &0707
        MEND

        MACRO
        s_jmp   $label
        ; PC = label
        LCLA    ofs
      [ :DEF: $label
ofs     SETA    $label - s_baseaddr
        ASSERT  (ofs >= 0) :LAND: (ofs < 32768) :LAND: ((ofs :AND: 1) == 0)
        DCW     &8000 + (&$ofs :SHR: 1)
      |
        s_illegal
      ]
        MEND

        MACRO
        s_jmpr  $r
        ; PC = GReg[r]
        DCW     &0008 + ($r<<8)
        MEND

        MACRO
        s_jsr   $label
        ; RPC = PC+1
        ; PC = label
        LCLA    ofs
      [ :DEF: $label
ofs     SETA    $label - s_baseaddr
        ASSERT  (ofs >= 0) :LAND: (ofs < 32768) :LAND: ((ofs :AND: 1) == 0)
        DCW     &C000 + (&$ofs :SHR: 1)
      |
        s_illegal
      ]
        MEND

        MACRO
        s_jsrr  $r
        ; RPC = PC+1
        ; PC = GReg[r]
        DCW     &0009 + ($r<<8)
        MEND

        MACRO
        s_ld    $r, $b, $d
        ; GReg[r] = bus[GReg[b] + #d]
        ; SF = transfer_error
        ASSERT  ($d >= 0) :LAND: ($d < 32)
        DCW     &5000 + $b + ($d<<3) + ($r<<8)
        MEND

        MACRO
        s_ldf   $r, $f
        ; GReg[r] = fu[f]
        ; SF = transfer_error
        ASSERT  ($f >= 0) :LAND: ($f < 256)
        DCW     &6000 + $f + ($r<<8)
        MEND

        MACRO
        s_ldi   $r, $i
        ; GReg[r] = #i
        ASSERT  ($i >= 0) :LAND: ($i < 256)
        DCW     &0800 + $i + ($r<<8)
        MEND

        MACRO
        s_ldrpc $r
        ; GReg[r] = RPC
        DCW     &000A + ($r<<8)
        MEND

        MACRO
        s_loop  $label, $ff
        ; Mark hardware loop from here to $label, with GReg[0] as iter count
        ; Optionally clears CPU flags $ff, clears both by default
        LCLA    ofs
        LCLA    flags
      [ :DEF: $label
ofs     SETA    $label - . - 2
      [ "$ff" = ""
flags   SETA    0
      |
flags   SETA    3 :EOR: $ff
      ]
        ASSERT  (ofs >= 0) :LAND: (ofs < 512) :LAND: ((ofs :AND: 1) == 0)
        ASSERT  ($flags >= 0) :LAND: ($flags < 4)
        DCW     &7800 + (&$ofs :SHR: 1) + ($flags << 8)
      |
        s_illegal
      ]
        MEND

        MACRO
        s_lsl1  $r
        ; GReg[r] <<= 1
        DCW     &0017 + ($r<<8)
        MEND

        MACRO
        s_lsr1  $r
        ; GReg[r] = ((unsigned)GReg[r]) >> 1
        DCW     &0015 + ($r<<8)
        MEND

        MACRO
        s_mov   $r, $s
        ; GReg[r] = GReg[s]
        DCW     &0088 + $s + ($r<<8)
        MEND

        MACRO
        s_notify $jjj
        ; if(jjj < 4) {
        ;   if(jjj & 1) HI[CCR] = 1
        ;   if(jjj & 2) HE[CCR] = 0
        ; }
        ; else if(jjj == 4) EP[CCR] = 0
        ASSERT  ($jjj >= 0) :LAND: ($jjj <= 4)
        DCW     &0001 + ($jjj << 8)
        MEND

        MACRO
        s_or    $r, $s
        ; GReg[r] |= GReg[s]
        DCW     &00A8 + $s + ($r<<8)
        MEND

        MACRO
        s_ori   $r, $i
        ; GReg[r] |= #i
        ASSERT  ($i >= 0) :LAND: ($i < 256)
        DCW     &2800 + $i + ($r<<8)
        MEND

        MACRO
        s_ret
        ; PC = RPC
        DCW    &0006
        MEND

        MACRO
        s_revb  $r
        ; GReg[r][3,2,1,0] = GReg[r][0,1,2,3]
        DCW     &0010 + ($r<<8)
        MEND

        MACRO
        s_revblo $r
        ; GReg[r][3,2,1,0] = GReg[r][3,2,0,1]
        DCW     &0011 + ($r<<8)
        MEND

        MACRO
        s_ror1  $r
        ; GReg[r] = GReg[r] ROR 1
        DCW     &0014 + ($r<<8)
        MEND

        MACRO
        s_rorb  $r
        ; GReg[r] = GReg[r] ROR 8
        DCW     &0012 + ($r<<8)
        MEND

        MACRO
        s_softbkpt
        ; Breakpoint to enter debug mode
        DCW     &0005
        MEND

        MACRO
        s_st    $r, $b, $d
        ; bus[GReg[b] + #d] = GReg[r]
        ; DF = transfer_error
        ASSERT  ($d >= 0) :LAND: ($d < 32)
        DCW     &5800 + $b + ($d<<3) + ($r<<8)
        MEND

        MACRO
        s_stf   $r, $f
        ; fu[f] = GReg[r]
        ; DF = transfer_error
        ASSERT  ($f >= 0) :LAND: ($f < 256)
        DCW     &6800 + $f + ($r<<8)
        MEND

        MACRO
        s_sub   $r, $s
        ; GReg[r] -= GReg[s]
        ; T = (GReg[r] == 0)
        DCW     &00A0 + $s + ($r<<8)
        MEND

        MACRO
        s_subi  $r, $i
        ; GReg[r] -= #i
        ; T = (GReg[r] == 0)
        ASSERT  ($i >= 0) :LAND: ($i < 256)
        DCW     &2000 + $i + ($r<<8)
        MEND

        MACRO
        s_tst   $r, $s
        ; T = (GReg[r] & GReg[s]) != 0
        DCW     &00C0 + $s + ($r<<8)
        MEND

        MACRO
        s_tsti  $r, $i
        ; T = (GReg[r] & #i) != 0
        ASSERT  ($i >= 0) :LAND: ($i < 256)
        DCW     &4000 + $i + ($r<<8)
        MEND

        MACRO
        s_xor   $r, $s
        ; GReg[r] ^= GReg[s]
        DCW     &0090 + $s + ($r<<8)
        MEND

        MACRO
        s_xori  $r, $i
        ; GReg[r] ^= #i
        ASSERT  ($i >= 0) :LAND: ($i < 256)
        DCW     &1000 + $i + ($r<<8)
        MEND

        END
