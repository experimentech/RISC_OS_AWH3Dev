;Assembler header file for OSArgs
;written by DefMod (Jan  2 2007) on Tue Jan  2 11:43:22 2007
;Jonathan Coxhead, jonathan@doves.demon.co.uk, 29 June 1995

        [       :LNOT: :DEF: OSArgs_Hdr
        GBLS    OSArgs_Hdr

        [       :LNOT: :DEF: Get_Types
        GBLS    Get_Types
        ]
        [       :LNOT: :DEF: Types_Hdr
Get_Types                       SETS    "GET oslib/Types.Hdr"
        |
Get_Types                       SETS    ""
        ]
        $Get_Types

        [       :LNOT: :DEF: Get_OS
        GBLS    Get_OS
        ]
        [       :LNOT: :DEF: OS_Hdr
Get_OS                          SETS    "GET oslib/OS.Hdr"
        |
Get_OS                          SETS    ""
        ]
        $Get_OS

        [       :LNOT: :DEF: Get_FileSwitch
        GBLS    Get_FileSwitch
        ]
        [       :LNOT: :DEF: FileSwitch_Hdr
Get_FileSwitch                  SETS    "GET oslib/FileSwitch.Hdr"
        |
Get_FileSwitch                  SETS    ""
        ]
        $Get_FileSwitch

;Symbols for constants
OSArgs_StreamInteractive        *       &8
OSArgs_StreamSupportsGBPB       *       &10
OSArgs_StreamDir                *       &20
OSArgs_StreamReadable           *       &40
OSArgs_StreamWritable           *       &80
OSArgs_StreamWritten            *       &100
OSArgs_StreamEOFErrorOnNextRead *       &200
OSArgs_StreamUnbuffered         *       &400
OSArgs_StreamUnallocated        *       &800
OSArgs_StreamCritical           *       &1000
OSArgs_StreamDataLost           *       &2000
OSArgs_StreamImageFileBusy      *       &4000
OSArgs_IOCtlReason              *       &FFFF
OSArgs_IOCtlReasonShift         *       0
OSArgs_IOCtlGroup               *       &FF0000
OSArgs_IOCtlGroupShift          *       16
OSArgs_IOCtlReadValue           *       &40000000
OSArgs_IOCtlWriteValue          *       &80000000
OSArgs_IOCtlBaudRate            *       &1
OSArgs_IOCtlDataFormat          *       &2
OSArgs_IOCtlHandshaking         *       &3
OSArgs_IOCtlBufferSize          *       &4
OSArgs_IOCtlBufferThresholds    *       &5
OSArgs_IOCtlControlLines        *       &6
OSArgs_IOCtlFIFOTriggerLevel    *       &7
OSArgs_IOCtlSupportedBaudRateCount *       &8
OSArgs_IOCtlSupportedBaudRate   *       &9

;Symbols for structure offsets and sizes
                                ^       0
                                #       Bits
OSArgs_StreamStatus             *       @

                                ^       0
                                #       Bits
OSArgs_IOCtlOperation           *       @

                                ^       0
OSArgs_IOCtlParameters_operation #       OSArgs_IOCtlOperation
OSArgs_IOCtlParameters_value    #       Int
OSArgs_IOCtlParameters          *       @


;Symbols for SWI's and SWI reason codes
XOS_Args                        *       &20009
OS_Args                         *       &9

OSArgs_ReadPtr                  *       &0
   ;Entry
   ;  R0 = &0
   ;  R1 = file (OS_F)
   ;Exit
   ;  R2 = ptr (Int)

OSArgs_ReadPtrW                 *       &0
   ;Entry
   ;  R0 = &0
   ;  R1 = file (OS_FW)
   ;Exit
   ;  R2 = ptr (Int)

OSArgs_ReadTemporaryFS          *       &0
   ;Entry
   ;  R0 = &0
   ;  R1 = &0
   ;Exit
   ;  R0 = temp_fs_no (FileSwitch_FSNo)

OSArgs_SetPtr                   *       &1
   ;Entry
   ;  R0 = &1
   ;  R1 = file (OS_F)
   ;  R2 = ptr (Int)

OSArgs_SetPtrW                  *       &1
   ;Entry
   ;  R0 = &1
   ;  R1 = file (OS_FW)
   ;  R2 = ptr (Int)

OSArgs_ReadExt                  *       &2
   ;Entry
   ;  R0 = &2
   ;  R1 = file (OS_F)
   ;Exit
   ;  R2 = ext (Int)

OSArgs_ReadExtW                 *       &2
   ;Entry
   ;  R0 = &2
   ;  R1 = file (OS_FW)
   ;Exit
   ;  R2 = ext (Int)

OSArgs_SetExt                   *       &3
   ;Entry
   ;  R0 = &3
   ;  R1 = file (OS_F)
   ;  R2 = ext (Int)

OSArgs_SetExtW                  *       &3
   ;Entry
   ;  R0 = &3
   ;  R1 = file (OS_FW)
   ;  R2 = ext (Int)

OSArgs_ReadAllocation           *       &4
   ;Entry
   ;  R0 = &4
   ;  R1 = file (OS_F)
   ;Exit
   ;  R2 = allocation (Int)

OSArgs_ReadAllocationW          *       &4
   ;Entry
   ;  R0 = &4
   ;  R1 = file (OS_FW)
   ;Exit
   ;  R2 = allocation (Int)

OSArgs_ReadEOFStatus            *       &5
   ;Entry
   ;  R0 = &5
   ;  R1 = file (OS_F)
   ;Exit
   ;  R2 = eof_status (Bool)

OSArgs_ReadEOFStatusW           *       &5
   ;Entry
   ;  R0 = &5
   ;  R1 = file (OS_FW)
   ;Exit
   ;  R2 = eof_status (Bool)

OSArgs_SetAllocation            *       &6
   ;Entry
   ;  R0 = &6
   ;  R1 = file (OS_F)
   ;  R2 = allocation (Int)
   ;Exit
   ;  R2 = allocation_out (Int)

OSArgs_SetAllocationW           *       &6
   ;Entry
   ;  R0 = &6
   ;  R1 = file (OS_FW)
   ;  R2 = allocation (Int)
   ;Exit
   ;  R2 = allocation_out (Int)

OSArgs_ReadPath                 *       &7
   ;Entry
   ;  R0 = &7
   ;  R1 = file (OS_F)
   ;  R2 = buffer (pointer to String)
   ;  R5 = size (Int)
   ;Exit
   ;  R5 = spare (Int)

OSArgs_ReadPathW                *       &7
   ;Entry
   ;  R0 = &7
   ;  R1 = file (OS_FW)
   ;  R2 = buffer (pointer to String)
   ;  R5 = size (Int)
   ;Exit
   ;  R5 = spare (Int)

OSArgs_ImageStamped             *       &8
   ;Entry
   ;  R0 = &8
   ;  R1 = file (OS_F)
   ;  R2 = image_stamp (Int)

OSArgs_ImageStampedW            *       &8
   ;Entry
   ;  R0 = &8
   ;  R1 = file (OS_FW)
   ;  R2 = image_stamp (Int)

OSArgs_IOCtl                    *       &0
   ;Entry
   ;  R0 = &0
   ;  R1 = file (OS_F)
   ;  R2 = parameters (pointer to OSArgs_IOCtlParameters)

OSArgs_ReadInfo                 *       &FE
   ;Entry
   ;  R0 = &FE
   ;  R1 = file (OS_F)
   ;Exit
   ;  R0 = stream_status (OSArgs_StreamStatus)
   ;  R2 = fs_info (FileSwitch_FSInfo)

OSArgs_ReadInfoW                *       &FE
   ;Entry
   ;  R0 = &FE
   ;  R1 = file (OS_FW)
   ;Exit
   ;  R0 = stream_status (OSArgs_StreamStatus)
   ;  R2 = fs_info (FileSwitch_FSInfo)

OSArgs_Ensure                   *       &FF
   ;Entry
   ;  R0 = &FF
   ;  R1 = file (OS_F)

OSArgs_EnsureW                  *       &FF
   ;Entry
   ;  R0 = &FF
   ;  R1 = file (OS_FW)

ArgsV                           *       &9

        ]
        END
