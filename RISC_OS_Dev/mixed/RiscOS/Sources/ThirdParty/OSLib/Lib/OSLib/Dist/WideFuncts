New OSLIB 6.0 Functions using Wide file handles
***********************************************
Historically, OSLib defined file handles as 8 bit entities. As the official
Acorn documentation was unclear on the correct size for a file handle, this
was as good a choice as any, based on the author's inside knowledge of the
file systems. Even at the time of release of OSLib 6.0, no file systems used
file handles wider than this, but it was nonetheless recognised that 32 bit
file handles were theoretically a possibility.

For OSLib, this raised a problem of how to introduce 32-bit file handles in a
backwerd compatible way, such that old binaries wouldn't be broken. OSLib 6.0
therefore retained the 8 bit handles, and introduced new 32 bit handles, with
matching functions, which were distinguished by name by adding a 'w' suffix.
Programmers could therefore choose to use either legacy 8 bit handles as
before (e.g. by calling 'os_openin()', or move to 32 bit handles by calling,
for instance 'os_openinw()'.

Technically, this arrangement worked well, but many users found it to be
cumbersome and error-prone. The next phase was therefore to make the 32 bit
handles and related functions the default, and setting a compile-time switch
to force the use of 8 bit handles.

In OSLib 6.3 and later, by default, these names have been made synonyms of
the short forms; i.e. without the W, unless the compile-time switch OSLib_F32
has been defined. Therefore, from 6.3 onwards it is quite safe to use 32 bit
file handles with functions  such as osfind_openin. To be really safe,
without worrying about the compile time switch you may continue to call
osfile_openinw.

If you wish to continue using 8 bit file handles at source level, then you
must  #define OSLIB_F8, either implicitly in your makefile, or explicitly in
your source files.

If you don't know/don't care what size your file handles should be, then
you're probably perfectly safe using the default "out of the box" settings.

Binary compatibility with legacy code using 8-bit handles is maintained,
because OS_F  and its associated functions are retained as library symbols.

Core:
-----
OS_ChangeRedirectionW

ColourTrans_WriteCalibrationToFileW

Computer:
---------
Service_DeviceFSCloseRequestW
UpCall_StreamCreatedW
UpCall_StreamClosedW
Event_DeviceOverrunW

DOSFS_LayoutStructureW
DOSFS_LayoutStructureGivenSizeW

FileCore_LayoutStructureW

OS_BGetW
BGetVW
OS_BPutW
BPutVW

OSArgs_EnsureW
OSArgs_ImageStampedW
OSArgs_ReadAllocationW
OSArgs_ReadEOFStatusW
OSArgs_ReadExtW
OSArgs_ReadInfoW
OSArgs_ReadPathW
OSArgs_ReadPtrW
OSArgs_SetAllocationW
OSArgs_SetExtW
OSArgs_SetPtrW

OSFind_CloseW
OSFind_OpeninW
OSFind_OpenoutW
OSFind_OpenupW
UpCallFind_CloseW
UpCallFind_CreateOpenupW
UpCallFind_OpenupW

OSFSControl_ReadFSHandleW
UpCallFSControl_SetArgsSizeW

OSGBPB_ReadW
OSGBPB_ReadAtW
OSGBPBWriteW
OSGBPBWriteAtW

Toolbox:
--------
(none)

User:
-----
PDriver_AbortJobW
PDriver_CancelJobW
PDriver_CancelJobWithErrorW
PDriver_CurrentJobW
PDriver_EndJobW
PDriver_InsertIllustrationW
PDriver_ScreenDumpW
PDriver_SelectIllustrationW
PDriver_SelectJobW

Service_WimpSaveDesktopW


NEW / ALTERED STRUCTURES:
*************************

OS_FW

ArcWeb_URLW (there is no OS_F (8-bit) version)

Wimp_MessageSaveDesktopW
Wimp_FullMessageSaveDesktopW (there is no OS_F (8-bit) version)
