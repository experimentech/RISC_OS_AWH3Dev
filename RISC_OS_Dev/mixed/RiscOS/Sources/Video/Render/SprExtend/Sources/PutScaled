; This source code in this file is licensed to You by Castle Technology
; Limited ("Castle") and its licensors on contractual terms and conditions
; ("Licence") which entitle you freely to modify and/or to distribute this
; source code subject to Your compliance with the terms of the Licence.
; 
; This source code has been made available to You without any warranties
; whatsoever. Consequently, Your use, modification and distribution of this
; source code is entirely at Your own risk and neither Castle, its licensors
; nor any other person who has contributed to this source code shall be
; liable to You for any loss or damage which You may suffer as a result of
; Your use, modification or distribution of this source code.
; 
; Full details of Your rights and obligations are set out in the Licence.
; You should have received a copy of the Licence with this source code file.
; If You have not received a copy, the text of the Licence is available
; online at www.castle-technology.co.uk/riscosbaselicence.htm
; 
; > Sources.PutScaled.

; started WRS 3rd August 1993
; This is link and service code for the compiled form of c.putscaled,
; which exists in s.putscaled.
; It needs no hand patches, except that the register definitions at
; the beginning duplicate existing definitions and should be removed.

; ... is it a problem being in SVC mode? No problems so far!

; --------------------------------------------------------------------------------------
; Provide a basic debugging output routine.
; => R0 = a character to output
; <= R0 = -ve to denote no tracing right now 
    [ debug
        EXPORT  asm_writech
asm_writech
      [ {TRUE}
        ; HAL serial out
        Push    "R12,LR"
        MOV     R12,SL          ; get back workspace pointer.
        LDR     R1,debug_transmit
        TEQ     R1,#0
        MOVEQ   R0,#-1          ; no function pointer
        Pull    "R12,PC",EQ
        MOV     LR,PC
        MOV     PC,R1
        MOV     R0,#0
        Pull    "R12,PC"
      |
        ; HostFS out
        Push    "LR"
        SWI     XHostFS_WriteC
        MOVVS   R0,#-1
        MOVVC   R0,#0
        Pull    "PC"
      ]
    ]

dividebyzero
        Debug   cc,"DIVIDE BY ZERO",a2,a1,lr
        B exit

exit_oserror
; Exit from C with R0 = error ptr
        SETV
        ; FALL THROUGH to exit.

; --------------------------------------------------------------------------------------
; For an unexpected exit from compiled code, such as an assertion failure.
; There's no error message unless you're debugging, you simply stop the
; whole plot operation and return as fast as possible.
; If debugging, you have (presumably) already put out an error message.
exit
        MOV     r1, #0
exit_erl
        MOV     R12,SL              ; get back workspace pointer.
        STR     r0,ccompiler_errptr
        LDR     SP,ccompiler_sp     ; get back SP
        Debug   cc,"unexpected exit C code",R1 ; usually C line number
        B       exitbiggie

; ---------------------------------------------------------------------------------------
; Dynamic area allocation for the JPEG code.

ErrorBlock_DynName
        DCD     1
        DCB     "DynName:JPEG workspace"
        DCB     0
        ALIGN

ErrorBlock_DynTran
        DCD     1
        DCB     "DynTran:JPEG transcode"
        DCB     0
        ALIGN

ErrorBlock_DynCoef
        DCD     1
        DCB     "DynCoef:JPEG coefficients"
        DCB     0
        ALIGN

        EXPORT  area_resize
; on entry r0 = area type
;          r1 = pointer to variable with current size and to receive actual size after rounding
;          r2 = new absolute size size requested
; on exit  r0 = pointer to block, or 0 for 'none possible'
area_resize ROUT
        Push    "r4,lr"
        MOVS    r4,r1               ; check for a create operation
        LDRNE   r3,[r1]             ; current size
        BNE     %FT10

        ADD     lr,sl,#:INDEX:area_numbers
        LDR     lr,[lr,r0,LSL#2]
        TEQ     lr,#0
        MOVNE   r3,#0
        BNE     %FT10               ; area previously created, just zero size

        Push    "r0,r4-r8"
        CMP     r0,#1
        ADRHIL  r0,ErrorBlock_DynName
        MOVHI   r4,#0               ; area flags
        MOVLS   r4,#1:SHL:7         ; not draggable
        ADREQL  r0,ErrorBlock_DynTran
        MOVCS   r5,#&500000         ; max size approx for 32kx32k JPEG with worst case band buffer
        ADRCCL  r0,ErrorBlock_DynCoef
        MOVCC   r5,#&40000000       ; max size approx 8kx8k of JCOEF's
        BL      copy_error_one

        ADD     r8,r0,#4            ; r8 now points to Dynamic Area Name string!
        MOV     r0,#0               ; Create a new area
        MOV     r1,#-1
        MOV     r3,#-1
        MOV     r6,#0
        MOV     r7,#0
        SWI     XOS_DynamicArea
        Pull    "r0,r4-r8"
        BVS     %FT20

        ADD     lr,sl,#:INDEX:area_numbers
        STR     r1,[lr,r0,LSL#2]
        MOV     r0,r1
        B       %FT15
10
        SUB     r1,r2,r3            ; change in size
        ADD     lr,sl,#:INDEX:area_numbers
        LDR     r0,[lr,r0,LSL#2]    ; area
        SWI     XOS_ChangeDynamicArea
15
        SWIVC   XOS_ReadDynamicArea
20
        STRVS   r0,[sl,#:INDEX:ccompiler_errptr] ; if an error, remember it
        MOVVS   r0,#0               ; ... and return null pointer
        Pull    "r4,pc",VS
        TEQ     r4,#0
        STRNE   r1,[r4]             ; update workspace size
        Pull    "r4,pc"

        EXPORT  area_remove
; on entry r0 = area type
area_remove ROUT
        MOV     r3,lr
        ADD     lr,sl,#:INDEX:area_numbers
        LDR     r1,[lr,r0,LSL#2]    ; area
        CMP     r1,#0
        MOVNE   r2,#0
        STRNE   r2,[lr,r0,LSL#2]    ; mark as forgotten
        MOVNE   r0,#1               ; remove
        SWINE   XOS_DynamicArea
        MOV     pc,r3

; ---------------------------------------------------------------------------------------
bitblockmove
; routine for simple bit block move.

; This is called by the compiled code when pixels are equal size, no mask, only 'set' gcol action, no table.
; There's no point in 'compiling' it because there are no important variants that we want to compile in,
; so it's clearer to just write it in the assembler.

; Registers on entry:
r_inptr RN      0       ; r_inptr -> input (word pointer)
r_outptr RN     1       ; r_outptr -> output (word pointer)
r_inshift RN    2       ; r_inshift (aka r_inword3) - number of (most significant) bits of first word to transfer, in 1..32
r_outshift RN   3       ; r_outshift (aka r_inword4) - number of (most significant) bits of space in first word to fill up, in 1..32
r_xcount RN     4       ; r_xcount - number of bits to transfer.

; Workspace registers:
r_inword RN     5       ; r_inword, r_inword2 - temp space
r_inword2 RN    6       ; must come AFTER r_inword for LDM
r_outword RN    7       ; r_outword, r_outword2, r_outword3, r_outword4 - temp space
r_outword2 RN   8       ; must come AFTER r_outword for STM
r_shl    RN     9       ; r_shl, r_shr - temp space
r_shr    RN     10
                        ; NB r12 is NOT set up.
                        ; On exit arg registers are corrupted, others preserved

        STMDB   sp!,{r_inword,r_inword2,r_outword,r_outword2,r_shl,r_shr,lr}

;        Debug   cc,"bitblockmove: ",r0,r1,r2,r3,r4
;        Debug   cc,"            : ",r5,r6,r7,r8,r9
;        Debug   cc,"            : ",r10,r11,r12,sp,lr,pc

; The following diagrams help when trying to think about shift cases, especially for start conditions etc.
; Note particularly that an entire display line is 'little-endian' - least sig pixel is at the left,
; most sig pixel is at the right in an entirely consistent way.

; Input words:
; 0                             31 0                             31 0                             31 bit number
; |------------------------------| |------------------------------| |------------------------------|
; What to transfer:
;                         |***************************************************** . . .
;                         <-----> this is r_inshift on entry
; Output words:
; 0                             31 0                             31 0                             31 bit number
; |------------------------------| |------------------------------| |------------------------------|
; What to fill up:
;                |***************************************************** . . .
;                <--------------> this is r_outshift on entry

; The difference between r_outshift and r_inshift is the distance that bulk data has to be shifted,
; once we get into the main loop.

; the bottom 32-outshift bits of outword should be loaded
; with whatever is there already.
        LDR     r_outword,[r_outptr]
        MOV     r_outword,r_outword,LSL r_outshift
        MOV     r_outword,r_outword,LSR r_outshift                     ; discard unwanted bits

; xcount counts the number of bits which must be
; saved at r_outptr, of which the first r_shl bits can be found in outword
; and the remainder are still to be fetched from r_inptr.
        RSB     r_outword2,r_outshift,#32                              ; temp use of r_outword2
        ADD     r_xcount,r_xcount,r_outword2                           ; add the bits we've just loaded in

; Only the top r_inshift bits of r_inword are interesting
        LDR     r_inword,[r_inptr],#4
        RSB     r_inword2,r_inshift,#32                                ; temp use of r_inword2
        MOV     r_inword,r_inword,LSR r_inword2                        ; discard unwanted bits
        MOV     r_inword,r_inword,LSL r_inword2

; differing code depending on which of r_inshift and r_outshift is bigger
        CMP     r_outshift,r_inshift
        BEQ     insh_equal
        BLT     insh_more

; r_outshift is bigger than r_inshift:
; the first output word will consist of:
;   bottom 32-outshift bits undisturbed
;   top inshift bits from first input word
;   bottom outshift-inshift (= r_shr bits, shifted left by r_shl) bits from the next input word

        SUB     r_shr,r_outshift,r_inshift
        RSB     r_shl,r_shr,#32
        ORR     r_outword,r_outword,r_inword,LSR r_shr
        ; bottom r_shl bits of r_outword are now loaded with input.
        ; fetch the top of the next word as part of the main loop.
        B       loop64_enter

insh_equal
; No shift offset between input and output - everything a lot simpler!
; the first output word consists of:
;   bottom 32-outshift bits undisturbed
;   top 32-outshift bits of the input
        ORR     r_outword,r_outword,r_inword
        CMP     r_xcount,#32
        BLT     less32
        STR     r_outword,[r_outptr],#4
        SUBS    r_xcount,r_xcount,#32
        BEQ     done
; Now extra-simple 64-bit loop for no-shift case.
        B       loop64_noshift_enter
loop64_noshift
        LDMIA   r_inptr!,{r_inword,r_inword2}
        STMIA   r_outptr!,{r_inword,r_inword2}
loop64_noshift_enter
        SUBS    r_xcount,r_xcount,#64
        BGE     loop64_noshift
        MOV     r_outword,#0
        MOV     r_shl,#0
        MOV     r_shr,#32
        B       loop64_exit

insh_more
; inshift is bigger than outshift
; the first output word will consist of:
;   bottom 32-outshift bits undisturbed
;   outshift bits from the middle of the input word
        SUB     r_shl,r_inshift,r_outshift
        RSB     r_shr,r_shl,#32
        ORR     r_outword,r_outword,r_inword,LSL r_shl
; We still have r_shl bits of input at the top of r_inword,
; not the correct situation for entering the 64-bit loop (they should be
; at the bottom of r_outword). So, have to do one word of output by steam.
        CMP     r_xcount,#32
        BLT     less32
        STR     r_outword,[r_outptr],#4
        MOV     r_outword,r_inword,LSR r_shr
        SUBS    r_xcount,r_xcount,#32
        BEQ     done
        ; and fall into the 64-bit loop.

; the 64-bit loop - main time-critical bit
; The bottom r_shl bits of r_outword are valid and must be saved at r_outptr.
        SUBS    r_xcount,r_xcount,#64
        BLT     loop64_exit
loop64
        LDMIA   r_inptr!,{r_inword,r_inword2}                      ; pick up 64 input bits
        ORR     r_outword,r_outword,r_inword,LSL r_shl             ; borrow r_shl bits already in r_outword
        MOV     r_outword2,r_inword,LSR r_shr                      ; create outword2
        ORR     r_outword2,r_outword2,r_inword2,LSL r_shl
        STMIA   r_outptr!,{r_outword,r_outword2}                   ; output 64 bits
        MOV     r_outword,r_inword2,LSR r_shr                      ; holding r_shl bits over in r_outword
loop64_enter
        SUBS    r_xcount,r_xcount,#64                              ; loop if at least 64 bits still to do
        BGE     loop64                                             ; loop unless finished finished
loop64_exit                                                        ; we have finished the 64-bit loop
        ADDS    r_xcount,r_xcount,#64                              ; count how many still to do
        BEQ     done                                               ; exit if exactly finished

; The bottom r_shl bits of r_outword are valid and must be saved at r_outptr.
; r_xcount is less than 64.
        LDMIA   r_inptr!,{r_inword,r_inword2}                      ; all the input we'll ever need
        ORR     r_outword,r_outword,r_inword,LSL r_shl             ; make r_outword valid
        CMP     r_xcount,#32
        STRGE   r_outword,[r_outptr],#4                            ; if xcount >= 32 then do a whole word
        SUBGE   r_xcount,r_xcount,#32
        BEQ     done                                               ; if exactly 32 bits were left
        MOVGT   r_outword,r_inword,LSR r_shr                       ; create last output word
        ORRGT   r_outword,r_outword,r_inword2,LSL r_shl
less32
; output the bottom xcount (in 1..31) bits of r_outword, combined with what is already at [r_outptr].
        LDR     r_outword2,[r_outptr]                              ; load word already there - we want top 32-xcount bits
        MOV     r_outword2,r_outword2,LSR r_xcount                 ; get rid of unwanted bits
        MOV     r_outword2,r_outword2,LSL r_xcount
        RSB     r_shl,r_xcount,#32
        MOV     r_outword,r_outword,LSL r_shl                      ; get rid of any unwanted new bits
        ORR     r_outword,r_outword2,r_outword,LSR r_shl           ; and combine the two
        STR     r_outword,[r_outptr]                               ; then save - we've finished
done
        LDMIA   sp!,{r_inword,r_inword2,r_outword,r_outword2,r_shl,r_shr,pc}

; --------------------------------------------------------------------------
; Now the entry sequence from the main assembler.
; We B here from the assembler when various calculations
; have already been done, and various values in the assembler workspace
; set up.
; To exit from here we B exitbiggie - r12,r13 must be preserved.
; Entry: r1 = the sprite itself
;        r5 = GCOL action, and whether to use mask.
;        r12 = assembler workspace pointer (of course)
;        r13 = SVC stack (of course)
new_putscaled_compiler

; --------------------------------------------------------------------------------------
; Now the entry to the C code.
; Entry: r1 = the sprite itself
;        r5 = GCOL action, and whether to use mask.
;        r12 = assembler workspace pointer (of course)
;        r13 = SVC stack (of course)
;        all others are trash.

        LDR     r1,[r1,#spMode]     ; get the mode number/identifier
        STR     r1,save_mode        ; can be picked up by the C from here.

        MOV     R0,R12              ; assembler workspace pointer
        ADRL    R1,ccompiler_space  ; above R12, space for me.
        ADRL    R2,ccompiler_end    ; end of space for me.
        MOV     R3,R5               ; GCOL action and mask bit

        Debug   gs,"R1,R5,R12 = ",R1,R5,R12
        MOV     R4,#0
        STR     R4,ccompiler_errptr ; in case of error exit
        STR     SP,ccompiler_sp     ; in case of unexpected exit

        Debug   cc,"entering c code"
        MOV     SL,R12              ; will be left alone by compiled C - for debug routines above.
        BL      putscaled_compiler  ; dive into the C (returns r0=compiled code)
        MOV     R12,SL              ; R12 is ip to a C prog, will have been trampled on - restore it.

        SWI     XOS_RemoveCursors   ; about to stomp on the screen
        BVS     exitbiggie

        ADR     LR,ret              ; set return address
        MOV     PC,R0               ; and branch to the compiled code
        NOP
ret
        NOP
        SWI     XOS_RestoreCursors
        B       exitbiggie

      [ jpeg
; ----------------------------------------------------------------------
jpeg_fetchroutine
; This is called every line by compiled code from PutSpriteScaled, when the
; source is JPEG compressed data. It uses C function jpeg_find_line() to get some pixels.
; Entry:
;   r0 = y coordinate
;   r12 = wp
; Exit:
;   r0 = initial address to get RGB data from for this line, based given y coord.
;   all other registers preserved.

        Push    "R1-R3,R10-R12,LR"               ; r4-r9 are preserved by C code.

        MOV     R1,R0                            ; arg2 - int y coord
        LDR     R0,jpeg_info_ptr                 ; arg1 - decompress_info_ptr cinfo
        ADRL    R2,newtranstable                 ; arg3 - palette data
        Debug   gs,"palette in R2 = ",R2

        ; get ready to call C code
        MOV     SL,R12                           ; will be left alone by compiled C - for debug routines above.

        ; and call
        BL      jpeg_find_line                   ; base of that line in R0 on return

        Pull    "R1-R3,R10-R12,PC"               ; restore registers and return to runtime generated code.
      ]
      
; ----------------------------------------------------------------------------------------------

; Assembler function used by the C code to look up information about a pixel
; format. This would be in C, if the compiler didn't try and apply relocation
; offsets to it!

        MACRO
        PixelFormatInfo $br, $bg, $bb, $ba, $tr, $tg, $tb, $ta, $hints, $alphaimm12
        DCB $br, $bg, $bb, $ba, $tr, $tg, $tb, $ta, $hints, 0
        DCW $alphaimm12
        MEND

HINT_HIGHEST * 1

pixelformatinfo_table ; BITS        TOP             HINTS            ALPHAIMM12
        PixelFormatInfo 4, 4, 4, 0,  4,  8, 12,  0, 0,                 0         ; 12bpp TBGR
        PixelFormatInfo 4, 4, 4, 0, 12,  8,  4,  0, 0,                 0         ; 12bpp TRGB
        PixelFormatInfo 4, 4, 4, 4,  4,  8, 12, 16, HINT_HIGHEST<<3,  15+(20<<7) ; 12bpp ABGR
        PixelFormatInfo 4, 4, 4, 4, 12,  8,  4, 16, HINT_HIGHEST<<3,  15+(20<<7) ; 12bpp ABGR
        PixelFormatInfo 5, 5, 5, 0,  5, 10, 15,  0, 0,                 0         ; 15bpp TBGR
        PixelFormatInfo 5, 5, 5, 0, 15, 10,  5,  0, 0,                 0         ; 15bpp TRGB
        PixelFormatInfo 5, 5, 5, 1,  5, 10, 15, 16, HINT_HIGHEST<<3,   2+(18<<7) ; 15bpp ABGR
        PixelFormatInfo 5, 5, 5, 1, 15, 10,  5, 16, HINT_HIGHEST<<3,   2+(18<<7) ; 15bpp ABGR
        PixelFormatInfo 5, 6, 5, 0,  5, 11, 16,  0, HINT_HIGHEST<<2,   0         ; 16bpp  BGR
        PixelFormatInfo 5, 6, 5, 0, 16, 11,  5,  0, HINT_HIGHEST<<0,   0         ; 16bpp  RGB
        PixelFormatInfo 8, 8, 8, 0,  8, 16, 24,  0, 0,                 0         ; 24/32  BGR
        PixelFormatInfo 8, 8, 8, 0, 24, 16,  8,  0, 0,                 0         ; 24/32  RGB
        PixelFormatInfo 8, 8, 8, 8,  8, 16, 24, 32, HINT_HIGHEST<<3, 255+( 8<<7) ; 32bpp ABGR
        PixelFormatInfo 8, 8, 8, 8, 24, 16,  8, 32, HINT_HIGHEST<<3, 255+( 8<<7) ; 32bpp ARGB
        PixelFormatInfo 8, 8, 8, 0, 16, 24, 32,  0, HINT_HIGHEST<<2,   0         ; 32 HI TBGR

PixelFormat_12bpp * 5
PixelFormat_15bpp * 6
PixelFormat_16bpp * 7
PixelFormat_24bpp * 8
PixelFormat_32bpp * 9
PixelFormat_BPPMask * 15

        EXPORT  pixelformat_info
pixelformat_info
        AND     r1,r0,#PixelFormat_BPPMask       ; Get base format
        SUB     r2,r1,#PixelFormat_12bpp
        MOV     r2,r2,LSL #2                     ; r2 = table index
        CMP     r1,#PixelFormat_16bpp
        SUBHI   r2,r2,#2                         ; 16bpp only has two entries
        CMP     r1,#PixelFormat_24bpp
        SUBHI   r2,r2,#4                         ; 24bpp only has two entries, and 32bp is aliased ontop of  them
        ADD     r2,r2,r0,LSR #4                  ; Merge in RGB & alpha flags
        ADR     r0,pixelformatinfo_table
        ADD     r0,r0,r2,LSL #3                  ; 12 bytes per table entry
        ADD     r0,r0,r2,LSL #2
        MOV     pc,lr

        GET     Sources.swiv2
        GET     Sources.CSupport

      [ jpeg
; Now get optimised assembler bits of JPEG
        GET     jhdr.s
        GET     yuvtabs.s
        GET     Sources.diffuse
      ]
        END
