# 
# Copyright (c) 2014, RISC OS Open Ltd
# All rights reserved.
# 
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met: 
#     * Redistributions of source code must retain the above copyright
#       notice, this list of conditions and the following disclaimer.
#     * Redistributions in binary form must reproduce the above copyright
#       notice, this list of conditions and the following disclaimer in the
#       documentation and/or other materials provided with the distribution.
#     * Neither the name of RISC OS Open Ltd nor the names of its contributors
#       may be used to endorse or promote products derived from this software
#       without specific prior written permission.
# 
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
# LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
# SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
# INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
# CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
# POSSIBILITY OF SUCH DAMAGE.
# 

# These actions will fully classify VFP instructions, up to and including VFPv4
# Any unpredictable instructions will also be flagged (as CLASS_NOT_VFP), as we
# can't guarantee that attempting to re-execute them won't result in further
# synchronous exceptions (plus they might completely trash the system!)

VABS_A2(D,sz,M,nonstandard)
{
	COMMON_sz_nonstandard(0)
	D32_CHECK(sz,D)
	D32_CHECK(sz,M)
	return class;
}

VADD_fp_A2(D,sz,N,M,nonstandard)
{
	COMMON_sz_nonstandard(0)
	D32_CHECK(sz,D)
	D32_CHECK(sz,N)
	D32_CHECK(sz,M)
	return class;
}

VCMP_VCMPE_A1(D,sz,M,nonstandard)
{
	COMMON_sz_nonstandard(0)
	D32_CHECK(sz,D)
	D32_CHECK(sz,M)
	return class;
}

VCMP_VCMPE_A2(D,sz,nonstandard)
{
	COMMON_sz_nonstandard(0)
	D32_CHECK(sz,D)
	return class;
}

VCVT_VCVTR_fp_int_VFP_A1(D,opc2,sz,M,nonstandard)
{
	COMMON_sz_nonstandard(0)
	if(!(opc2 & 4))
	{
		/* Int to float */
		D32_CHECK(sz,D);
	}
	else
	{
		/* Float to int */
		D32_CHECK(sz,M);
	}
	return class;
}

VCVT_fp_fx_VFP_A1(D,sf,nonstandard)
{
	COMMON_nonstandard(CLASS_VFP3)
	if(sf)
		class |= CLASS_D;
	else
		class |= CLASS_S;
	D32_CHECK(sf,D)
	return class;
}

VCVT_dp_sp_A1(D,sz,M,nonstandard)
{
	COMMON_nonstandard(CLASS_S | CLASS_D);
	D32_CHECK(sz,M)
	D32_CHECK(!sz,D)
	return class;
}

VCVTB_VCVTT_hp_sp_VFP_A1(nonstandard)
{
	int class = CLASS_VFP3 | CLASS_HP;
	if(nonstandard)
		return CLASS_NOT_VFP;
	return class;
}

VDIV_A1(D,sz,N,M,nonstandard)
{
	COMMON_sz_nonstandard(CLASS_DIV)
	D32_CHECK(sz,D)
	D32_CHECK(sz,N)
	D32_CHECK(sz,M)
	return class;
}

VFMA_VFMS_A2(D,sz,N,M,nonstandard)
{
	COMMON_sz_nonstandard(CLASS_VFP4)
	D32_CHECK(sz,D)
	D32_CHECK(sz,N)
	D32_CHECK(sz,M)
	return class;
}

VFNMA_VFNMS_A1(D,sz,N,M,nonstandard)
{
	COMMON_sz_nonstandard(CLASS_VFP4)
	D32_CHECK(sz,D)
	D32_CHECK(sz,N)
	D32_CHECK(sz,M)
	return class;
}

VLDM_A1(D:Vd,W,Rn,imm8,nonstandard)
{
	COMMON_nonstandard(CLASS_NOT_CDP)
	uint32_t regs = imm8>>1;
	_UNPREDICTABLE((Rn==15) && W);
	_UNPREDICTABLE(!regs || (regs > 16) || ((D_Vd+regs) > 32));
	if(imm8 & 1)
	{
		_UNPREDICTABLE(D_Vd+regs > 16);
	}
	if(D_Vd+regs > 16)
		class |= CLASS_D32;
	return class;
}

VLDM_A2(Vd:D,W,Rn,imm8,nonstandard)
{
	COMMON_nonstandard(CLASS_NOT_CDP)
	uint32_t regs = imm8;
	_UNPREDICTABLE((Rn==15) && W);
	_UNPREDICTABLE(!regs || ((Vd_D+regs) > 32));
	return class;
}

VLDR_A1(D,nonstandard)
{
	COMMON_nonstandard(CLASS_NOT_CDP)
	if(D)
		class |= CLASS_D32;
	return class;
}

VLDR_A2(nonstandard)
{
	COMMON_nonstandard(CLASS_NOT_CDP)
	return class;
}

VMLA_VMLS_fp_A2(D,sz,N,M,nonstandard)
{
	COMMON_sz_nonstandard(0)
	D32_CHECK(sz,D)
	D32_CHECK(sz,N)
	D32_CHECK(sz,M)
	return class;
}

VMOV_imm_A2(D,sz,nonstandard)
{
	COMMON_sz_nonstandard(CLASS_VFP3)
	D32_CHECK(sz,D)
	return class;
}

VMOV_reg_A2(D,sz,M,nonstandard)
{
	COMMON_sz_nonstandard(0)
	D32_CHECK(sz,D)
	D32_CHECK(sz,M)
	return class;
}

VMOV_arm_A1(opc1,D,Rt,opc2,nonstandard)
{
	int class = CLASS_NOT_CDP;
	if(nonstandard || (opc1 & 2) || (opc2 & 3))
		return CLASS_NOT_VFP;
	if(D)
		class |= CLASS_D32;
	_UNPREDICTABLE(Rt==15);
	return class;
}

VMOV_scalar_A1(U,opc1,N,Rt,opc2,nonstandard)
{
	int class = CLASS_NOT_CDP;
	if(nonstandard || U || (opc1 & 2) || (opc2 & 3))
		return CLASS_NOT_VFP;
	if(N)
		class |= CLASS_D32;
	_UNPREDICTABLE(Rt==15);
	return class;
}

VMOV_1fp_A1(Rt,nonstandard)
{
	COMMON_nonstandard(CLASS_NOT_CDP)
	_UNPREDICTABLE(Rt==15);
	return class;
}

VMOV_2fp_A1(op,Rt2,Rt,Vm:M,nonstandard)
{
	COMMON_nonstandard(CLASS_NOT_CDP)
	_UNPREDICTABLE((Rt==15) || (Rt2==15) || (Vm_M==31));
	if(op)
	{
		_UNPREDICTABLE(Rt==Rt2);
	}
	return class;
}

VMOV_dbl_A1(op,Rt2,Rt,M,nonstandard)
{
	COMMON_nonstandard(CLASS_NOT_CDP)
	_UNPREDICTABLE((Rt==15) || (Rt2==15));
	if(op)
	{
		_UNPREDICTABLE(Rt==Rt2);
	}
	if(M)
		class |= CLASS_D32;
	return class;
}

VMUL_fp_A2(D,sz,N,M,nonstandard)
{
	COMMON_sz_nonstandard(0)
	D32_CHECK(sz,D)
	D32_CHECK(sz,N)
	D32_CHECK(sz,M)
	return class;
}

VNEG_A2(D,sz,M,nonstandard)
{
	COMMON_sz_nonstandard(0)
	D32_CHECK(sz,D)
	D32_CHECK(sz,M)
	return class;
}

VNMLA_VNMLS_VNMUL_A1(D,sz,N,M,nonstandard)
{
	COMMON_sz_nonstandard(0)
	D32_CHECK(sz,D)
	D32_CHECK(sz,N)
	D32_CHECK(sz,M)
	return class;
}

VNMLA_VNMLS_VNMUL_A2(D,sz,N,M,nonstandard)
{
	COMMON_sz_nonstandard(0)
	D32_CHECK(sz,D)
	D32_CHECK(sz,N)
	D32_CHECK(sz,M)
	return class;
}

VPOP_A1(D:Vd,imm8,nonstandard)
{
	COMMON_nonstandard(CLASS_NOT_CDP)
	uint32_t regs = imm8>>1;
	_UNPREDICTABLE(!regs || (regs > 16) || ((D_Vd+regs) > 32));
	if(imm8 & 1)
	{
		_UNPREDICTABLE(D_Vd+regs > 16);
	}
	if(D_Vd+regs > 16)
		class |= CLASS_D32;
	return class;
}

VPOP_A2(Vd:D,imm8,nonstandard)
{
	COMMON_nonstandard(CLASS_NOT_CDP)
	uint32_t regs = imm8;
	_UNPREDICTABLE(!regs || ((Vd_D+regs) > 32));
	return class;
}

VPUSH_A1(D:Vd,imm8,nonstandard)
{
	COMMON_nonstandard(CLASS_NOT_CDP)
	uint32_t regs = imm8>>1;
	_UNPREDICTABLE(!regs || (regs > 16) || ((D_Vd+regs) > 32));
	if(imm8 & 1)
	{
		_UNPREDICTABLE(D_Vd+regs > 16);
	}
	if(D_Vd+regs > 16)
		class |= CLASS_D32;
	return class;
}

VPUSH_A2(Vd:D,imm8,nonstandard)
{
	COMMON_nonstandard(CLASS_NOT_CDP)
	uint32_t regs = imm8;
	_UNPREDICTABLE(!regs || ((Vd_D+regs) > 32));
	return class;
}

VSQRT_A1(D,sz,M,nonstandard)
{
	COMMON_sz_nonstandard(CLASS_SQRT)
	D32_CHECK(sz,D)
	D32_CHECK(sz,M)
	return class;
}

VSTM_A1(D:Vd,W,Rn,imm8,nonstandard)
{
	COMMON_nonstandard(CLASS_NOT_CDP)
	uint32_t regs = imm8>>1;
	_UNPREDICTABLE((Rn==15) && W);
	_UNPREDICTABLE(!regs || (regs > 16) || ((D_Vd+regs) > 32));
	if(imm8 & 1)
	{
		_UNPREDICTABLE(D_Vd+regs > 16);
	}
	if(D_Vd+regs > 16)
		class |= CLASS_D32;
	return class;
}

VSTM_A2(Vd:D,W,Rn,imm8,nonstandard)
{
	COMMON_nonstandard(CLASS_NOT_CDP)
	uint32_t regs = imm8;
	_UNPREDICTABLE((Rn==15) && W);
	_UNPREDICTABLE(!regs || ((Vd_D+regs) > 32));
	return class;
}

VSTR_A1(D,nonstandard)
{
	COMMON_nonstandard(CLASS_NOT_CDP)
	if(D)
		class |= CLASS_D32;
	return class;
}

VSTR_A2(nonstandard)
{
	COMMON_nonstandard(CLASS_NOT_CDP)
	return class;
}

VSUB_fp_A2(D,sz,N,M,nonstandard)
{
	COMMON_sz_nonstandard(0)
	D32_CHECK(sz,D)
	D32_CHECK(sz,N)
	D32_CHECK(sz,M)
	return class;
}

VMRS_A1(reg,Rt,nonstandard)
{
	COMMON_nonstandard(CLASS_NOT_CDP)
	_UNPREDICTABLE((Rt==15) && (reg != REG_FPSCR));
	if(!(VMRS_MASK & (1<<reg)))
		return CLASS_NOT_VFP;
	/* Follow ARMv7 rules and limit user mode to only the FPSCR register */
	if((reg != REG_FPSCR) && !privileged_mode())
		return CLASS_NOT_VFP;
	return class;
}

VMSR_A1(reg,nonstandard)
{
	COMMON_nonstandard(CLASS_NOT_CDP)
	if(!(VMSR_MASK & (1<<reg)))
		return CLASS_NOT_VFP;
	/* Follow ARMv7 rules and limit user mode to only the FPSCR register */
	if((reg != REG_FPSCR) && !privileged_mode())
		return CLASS_NOT_VFP;
	return class;
}
