<HTML>
<HEAD>
<TITLE>getaddrinfo</TITLE>
</HEAD>
<BODY>
<H1>getaddrinfo</H1>
<HR>
<PRE>
<!-- Manpage converted by man2html 3.0.1 -->
<B><A HREF="/cgi-bin/man.cgi?section=3&topic=GETADDRINFO">GETADDRINFO(3)</A></B>            OpenBSD Programmer's Manual           <B><A HREF="/cgi-bin/man.cgi?section=3&topic=GETADDRINFO">GETADDRINFO(3)</A></B>


</PRE>
<H2>NAME</H2><PRE>
     <B>getaddrinfo</B>, <B>freeaddrinfo</B>, <B>gai_strerror</B> - nodename-to-address translation
     in protocol-independent manner


</PRE>
<H2>SYNOPSIS</H2><PRE>
     <B>#include</B> <B>&lt;sys/types.h&gt;</B>
     <B>#include</B> <B>&lt;sys/socket.h&gt;</B>
     <B>#include</B> <B>&lt;netdb.h&gt;</B>

     <I>int</I>
     <B>getaddrinfo</B>(<I>const</I> <I>char</I> <I>*nodename</I>, <I>const</I> <I>char</I> <I>*servname</I>,
             <I>const</I> <I>struct</I> <I>addrinfo</I> <I>*hints</I>, <I>struct</I> <I>addrinfo</I> <I>**res</I>);

     <I>void</I>
     <B>freeaddrinfo</B>(<I>struct</I> <I>addrinfo</I> <I>*ai</I>);

     <I>char</I> <I>*</I>
     <B>gai_strerror</B>(<I>int</I> <I>ecode</I>);


</PRE>
<H2>DESCRIPTION</H2><PRE>
     The <B>getaddrinfo</B>() function is defined for protocol-independent nodename-
     to-address translation.  It performs the functionality of gethostby-
     <B><A HREF="/cgi-bin/man.cgi?section=3&topic=name">name(3)</A></B> and <B><A HREF="/cgi-bin/man.cgi?section=3&topic=getservbyname">getservbyname(3)</A></B>, but in a more sophisticated manner.

     The addrinfo structure is defined as a result of including the &lt;<I>netdb.h</I>&gt;
     header:

     struct addrinfo {                                                  *
          int     ai_flags;     /* AI_PASSIVE, AI_CANONNAME, AI_NUMERICHOST */
          int     ai_family;    /* PF_xxx */
          int     ai_socktype;  /* SOCK_xxx */
          int     ai_protocol;  /* 0 or IPPROTO_xxx for IPv4 and IPv6 */
          size_t  ai_addrlen;   /* length of ai_addr */
          char   *ai_canonname; /* canonical name for nodename */
          struct sockaddr  *ai_addr; /* binary address */
          struct addrinfo  *ai_next; /* next structure in linked list */
     };

     The <I>nodename</I> and <I>servname</I> arguments are pointers to NUL-terminated
     strings or NULL. One or both of these two arguments must be a non-null
     pointer.  In the normal client scenario, both the <I>nodename</I> and <I>servname</I>
     are specified.  In the normal server scenario, only the <I>servname</I> is spec-
     ified.  A non-null <I>nodename</I> string can be either a node name or a numeric
     host address string (i.e., a dotted-decimal IPv4 address or an IPv6 hex
     address).  A non-null <I>servname</I> string can be either a service name or a
     decimal port number.

     The caller can optionally pass an addrinfo structure, pointed to by the
     third argument, to provide hints concerning the type of socket that the
     caller supports.  In this <I>hints</I> structure all members other than
     <I>ai</I><B>_</B><I>flags</I>, <I>ai</I><B>_</B><I>family</I>, <I>ai</I><B>_</B><I>socktype</I>, and <I>ai</I><B>_</B><I>protocol</I> must be zero or a null
     pointer.  A value of PF_UNSPEC for <I>ai</I><B>_</B><I>family</I> means the caller will accept
     any protocol family.  A value of 0 for <I>ai</I><B>_</B><I>socktype</I> means the caller will
     accept any socket type.  A value of 0 for <I>ai</I><B>_</B><I>protocol</I> means the caller
     will accept any protocol.  For example, if the caller handles only TCP
     and not UDP, then the <I>ai</I><B>_</B><I>socktype</I> member of the hints structure should be
     set to SOCK_STREAM when <B>getaddrinfo</B>() is called.  If the caller handles
     only IPv4 and not IPv6, then the <I>ai</I><B>_</B><I>family</I> member of the <I>hints</I> structure
     should be set to PF_INET when <B>getaddrinfo</B>() is called.  If the third ar-
     gument to <B>getaddrinfo</B>() is a null pointer, this is the same as if the
     caller had filled in an addrinfo structure initialized to zero with
     <I>ai</I><B>_</B><I>family</I> set to PF_UNSPEC.

     Upon successful return a pointer to a linked list of one or more addrinfo
     structures is returned through the final argument.  The caller can pro-
     cess each addrinfo structure in this list by following the <I>ai</I><B>_</B><I>next</I> point-
     er, until a null pointer is encountered.  In each returned addrinfo
     structure the three members <I>ai</I><B>_</B><I>family</I>, <I>ai</I><B>_</B><I>socktype</I>, and <I>ai</I><B>_</B><I>protocol</I> are
     the corresponding arguments for a call to the <B>socket</B>() function.  In each
     addrinfo structure the <I>ai</I><B>_</B><I>addr</I> member points to a filled-in socket ad-
     dress structure whose length is specified by the <I>ai</I><B>_</B><I>addrlen</I> member.

     If the AI_PASSIVE bit is set in the <I>ai</I><B>_</B><I>flags</I> member of the <I>hints</I> struc-
     ture, then the caller plans to use the returned socket address structure
     in a call to <B>bind</B>().  In this case, if the <I>nodename</I> argument is a null
     pointer, then the IP address portion of the socket address structure will
     be set to INADDR_ANY for an IPv4 address or IN6ADDR_ANY_INIT for an IPv6
     address.

     If the AI_PASSIVE bit is not set in the <I>ai</I><B>_</B><I>flags</I> member of the <I>hints</I>
     structure, then the returned socket address structure will be ready for a
     call to <B>connect</B>() (for a connection-oriented protocol) or either
     <B>connect</B>(), <B>sendto</B>(), or <B>sendmsg</B>() (for a connectionless protocol). In
     this case, if the <I>nodename</I> argument is a null pointer, then the IP ad-
     dress portion of the socket address structure will be set to the loopback
     address.

     If the AI_CANONNAME bit is set in the <I>ai</I><B>_</B><I>flags</I> member of the <I>hints</I> struc-
     ture, then upon successful return the <I>ai</I><B>_</B><I>canonname</I> member of the first
     addrinfo structure in the linked list will point to a NUL-terminated
     string containing the canonical name of the specified <I>nodename</I>.

     If the AI_NUMERICHOST bit is set in the <I>ai</I><B>_</B><I>flags</I> member of the <I>hints</I>
     structure, then a non-null <I>nodename</I> string must be a numeric host address
     string.  Otherwise an error of EAI_NONAME is returned.  This flag pre-
     vents any type of name resolution service (e.g., the DNS) from being
     called.

     The arguments to <B>getaddrinfo</B>() must sufficiently be consistent and unam-
     biguous.  Here are pitfall cases you may encounter:

     <B>o</B>   <B>getaddrinfo</B>() will raise an error if members of the <I>hints</I> structure
         are not consistent.  For example, for internet address families,
         <B>getaddrinfo</B>() will raise an error if you specify SOCK_STREAM to
         <I>ai</I><B>_</B><I>socktype</I> while you specify IPPROTO_UDP to <I>ai</I><B>_</B><I>protocol</I>.

     <B>o</B>   If you specify a <I>servname</I> which is defined only for certain
         <I>ai</I><B>_</B><I>socktype</I>, <B>getaddrinfo</B>() will raise an error because the arguments
         are not consistent.  For example, <B>getaddrinfo</B>() will raise an error
         if you ask for ``tftp'' service on SOCK_STREAM.

     <B>o</B>   For internet address families, if you specify <I>servname</I> while you set
         <I>ai</I><B>_</B><I>socktype</I> to SOCK_RAW, <B>getaddrinfo</B>() will raise an error, because
         service names are not defined for the internet SOCK_RAW space.

     <B>o</B>   If you specify a numeric <I>servname</I>, while leaving <I>ai</I><B>_</B><I>socktype</I> and
         <I>ai</I><B>_</B><I>protocol</I> unspecified, <B>getaddrinfo</B>() will raise an error.  This is
         because the numeric <I>servname</I> does not identify any socket type, and
         <B>getaddrinfo</B>() is not allowed to glob the argument in such case.

     All of the information returned by <B>getaddrinfo</B>() is dynamically allocat-
     ed: the addrinfo structures, the socket address structures, and canonical
     node name strings pointed to by the addrinfo structures.  To return this
     information to the system the function <B>freeaddrinfo</B>() is called.  The
     <I>addrinfo</I> structure pointed to by the <I>ai</I> <I>argument</I> is freed, along with any
     dynamic storage pointed to by the structure.  This operation is repeated
     until a NULL <I>ai</I><B>_</B><I>next</I> pointer is encountered.

     To aid applications in printing error messages based on the EAI_xxx codes
     returned by <B>getaddrinfo</B>(), <B>gai_strerror</B>() is defined.  The argument is
     one of the EAI_xxx values defined earlier and the return value points to
     a string describing the error.  If the argument is not one of the EAI_xxx
     values, the function still returns a pointer to a string whose contents
     indicate an unknown error.

   <B>Extension</B> <B>for</B> <B>scoped</B> <B>IPv6</B> <B>address</B>
     The implementation allows experimental numeric IPv6 address notation with
     scope identifier.  By appending the percent character and scope identifi-
     er to addresses, you can fill sin6_scope_id field for addresses.  This
     would make management of scoped address easier, and allows cut-and-paste
     input of scoped address.

     At this moment the code supports only link-local addresses with the for-
     mat.  Scope identifier is hardcoded to name of hardware interface associ-
     ated with the link.  (such as ne0). Example would be like
     ``fe80::1%ne0'', which means ``fe80::1 on the link associated with ne0
     interface''.

     The implementation is still very experimental and non-standard.  The cur-
     rent implementation assumes one-by-one relationship between interface and
     link, which is not necessarily true from the specification.


</PRE>
<H2>EXAMPLES</H2><PRE>
     The following code tries to connect to ``www.kame.net'' service ``http''.
     via stream socket.  It loops through all the addresses available, regard-
     less from address family.  If the destination resolves to IPv4 address,
     it will use AF_INET socket.  Similarly, if it resolves to IPv6, AF_INET6
     socket is used.  Observe that there is no hardcoded reference to particu-
     lar address family.  The code works even if <B>getaddrinfo</B> returns addresses
     that are not IPv4/v6.

           struct addrinfo hints, *res, *res0;
           int error;
           int s;
           const char *cause = NULL;

           memset(&amp;hints, 0, sizeof(hints));
           hints.ai_family = PF_UNSPEC;
           hints.ai_socktype = SOCK_STREAM;
           error = getaddrinfo("www.kame.net", "http", &amp;hints, &amp;res0);
           if (error) {
                   errx(1, "%s", gai_strerror(error));
                   /*NOTREACHED*/
           }
           s = -1;
           for (res = res0; res; res = res-&gt;ai_next) {
                   s = socket(res-&gt;ai_family, res-&gt;ai_socktype,
                       res-&gt;ai_protocol);
                   if (s &lt; 0) {
                           cause = "socket";
                           continue;
                   }

                   if (connect(s, res-&gt;ai_addr, res-&gt;ai_addrlen) &lt; 0) {
                           cause = "connect";
                           close(s);
                           s = -1;
                           continue;
                   }

                   break;  /* okay we got one */
           }
           if (s &lt; 0) {
                   err(1, cause);
                   /*NOTREACHED*/
           }
           freeaddrinfo(res0);

     The following example tries to open a wildcard listening socket onto ser-
     vice ``http'', for all the address families available.

           struct addrinfo hints, *res, *res0;
           int error;
           int s[MAXSOCK];
           int nsock;
           const char *cause = NULL;

           memset(&amp;hints, 0, sizeof(hints));
           hints.ai_family = PF_UNSPEC;
           hints.ai_socktype = SOCK_STREAM;
           hints.ai_flags = AI_PASSIVE;
           error = getaddrinfo(NULL, "http", &amp;hints, &amp;res0);
           if (error) {
                   errx(1, "%s", gai_strerror(error));
                   /*NOTREACHED*/
           }
           nsock = 0;
           for (res = res0; res &amp;&amp; nsock &lt; MAXSOCK; res = res-&gt;ai_next) {
                   s[nsock] = socket(res-&gt;ai_family, res-&gt;ai_socktype,
                       res-&gt;ai_protocol);
                   if (s[nsock] &lt; 0) {
                           cause = "socket";
                           continue;
                   }

                   if (bind(s[nsock], res-&gt;ai_addr, res-&gt;ai_addrlen) &lt; 0) {
                           cause = "bind";
                           close(s[nsock]);
                           continue;
                   }
                   (void) listen(s[nsock], 5);

                   nsock++;
           }
           if (nsock == 0) {
                   err(1, cause);
                   /*NOTREACHED*/
           }
           freeaddrinfo(res0);


</PRE>
<H2>DIAGNOSTICS</H2><PRE>
     Error return status from <B>getaddrinfo</B>() is zero on success and non-zero on
     errors.  Non-zero error codes are defined in &lt;<I>netdb.h</I>&gt;, and as follows:

     EAI_ADDRFAMILY  Address family for <I>nodename</I> not supported.
     EAI_AGAIN       Temporary failure in name resolution.
     EAI_BADFLAGS    Invalid value for <I>ai</I><B>_</B><I>flags</I>.
     EAI_FAIL        Non-recoverable failure in name resolution.
     EAI_FAMILY      <I>ai</I><B>_</B><I>family</I> not supported.
     EAI_MEMORY      Memory allocation failure.
     EAI_NODATA      No address associated with <I>nodename</I>.
     EAI_NONAME      <I>nodename</I> nor <I>servname</I> provided, or not known.
     EAI_SERVICE     <I>servname</I> not supported for <I>ai</I><B>_</B><I>socktype</I>.
     EAI_SOCKTYPE    <I>ai</I><B>_</B><I>socktype</I> not supported.
     EAI_SYSTEM      System error returned in <I>errno</I>.

     If called with proper argument, <B>gai_strerror</B>() returns a pointer to a
     string describing the given error code.  If the argument is not one of
     the EAI_xxx values, the function still returns a pointer to a string
     whose contents indicate an unknown error.


</PRE>
<H2>SEE ALSO</H2><PRE>
     <B><A HREF="/cgi-bin/man.cgi?section=3&topic=getnameinfo">getnameinfo(3)</A></B>, <B><A HREF="/cgi-bin/man.cgi?section=3&topic=gethostbyname">gethostbyname(3)</A></B>, <B><A HREF="/cgi-bin/man.cgi?section=3&topic=getservbyname">getservbyname(3)</A></B>, <B><A HREF="/cgi-bin/man.cgi?section=5&topic=hosts">hosts(5)</A></B>,
     <B><A HREF="/cgi-bin/man.cgi?section=5&topic=resolv.conf">resolv.conf(5)</A></B>, <B><A HREF="/cgi-bin/man.cgi?section=5&topic=services">services(5)</A></B>, <B><A HREF="/cgi-bin/man.cgi?section=7&topic=hostname">hostname(7)</A></B>, <B><A HREF="/cgi-bin/man.cgi?section=8&topic=named">named(8)</A></B>

     R. Gilligan, S. Thomson, J. Bound, and W. Stevens, <I>Basic</I> <I>Socket</I> <I>Interface</I>
     <I>Extensions</I> <I>for</I> <I>IPv6</I>, RFC2553, March 1999.

     Tatsuya Jinmei, and Atsushi Onoe, <I>An</I> <I>Extension</I> <I>of</I> <I>Format</I> <I>for</I> <I>IPv6</I> <I>Scoped</I>
     <I>Addresses</I>, internet draft, draft-ietf-ipngwg-scopedaddr-format-02.txt,
     work in progress material.

     Craig Metz, "Protocol Independence Using the Sockets API", <I>Proceedings</I> <I>of</I>
     <I>the</I> <I>freenix</I> <I>track:</I> <I>2000</I> <I>USENIX</I> <I>annual</I> <I>technical</I> <I>conference</I>, June 2000.


</PRE>
<H2>HISTORY</H2><PRE>
     The implementation first appeared in WIDE Hydrangea IPv6 protocol stack
     kit.


</PRE>
<H2>STANDARDS</H2><PRE>
     The <B>getaddrinfo</B>() function is defined in IEEE POSIX 1003.1g draft speci-
     fication, and documented in ``Basic Socket Interface Extensions for
     IPv6'' (RFC2553).


</PRE>
<H2>BUGS</H2><PRE>
     The current implementation is not thread-safe.

     The text was shamelessly copied from RFC2553.

OpenBSD 3.1                      May 25, 1995                                5
</PRE>
<HR>
<ADDRESS>
Man(1) output converted with
<a href="http://www.oac.uci.edu/indiv/ehood/man2html.html">man2html</a>
</ADDRESS>
</BODY>
</HTML>
